========================
CODE SNIPPETS
========================
TITLE: Install ast-grep via Nix
DESCRIPTION: Installs and runs ast-grep within a Nix shell environment.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: shell
CODE:
```
nix-shell -p ast-grep
```

----------------------------------------

TITLE: Install ast-grep via Homebrew
DESCRIPTION: Installs the ast-grep command-line tool using the Homebrew package manager.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: shell
CODE:
```
brew install ast-grep
```

----------------------------------------

TITLE: Install ast-grep via npm
DESCRIPTION: Installs the ast-grep CLI package globally using npm.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: shell
CODE:
```
npm i @ast-grep/cli -g
```

----------------------------------------

TITLE: Install ast-grep via pip
DESCRIPTION: Installs the ast-grep CLI package using pip.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: shell
CODE:
```
pip install ast-grep-cli
```

----------------------------------------

TITLE: Install ast-grep via MacPorts
DESCRIPTION: Installs the ast-grep command-line tool using the MacPorts package manager.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: shell
CODE:
```
sudo port install ast-grep
```

----------------------------------------

TITLE: Install ast-grep via Cargo
DESCRIPTION: Installs the ast-grep command-line tool using the Cargo package manager for Rust.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: shell
CODE:
```
cargo install ast-grep --locked
```

----------------------------------------

TITLE: Install Rust Environment
DESCRIPTION: Installs the stable Rust toolchain using rustup, which is the recommended method for setting up the Rust environment required for building ast-grep.

SOURCE: https://ast-grep.github.io/contributing/development

LANGUAGE: bash
CODE:
```
rustup install stable
```

----------------------------------------

TITLE: Setup Git Hooks with Pre-commit
DESCRIPTION: Installs git hooks using the pre-commit tool to ensure type checking, formatting, and clippy linting are performed automatically on commits.

SOURCE: https://ast-grep.github.io/contributing/development

LANGUAGE: bash
CODE:
```
pre-commit install
```

----------------------------------------

TITLE: Clone TypeScript repository
DESCRIPTION: Clones the TypeScript repository from GitHub for practice, with a depth of 1 to save bandwidth.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: shell
CODE:
```
git clone git@github.com:microsoft/TypeScript.git --depth 1
```

----------------------------------------

TITLE: Check ast-grep help
DESCRIPTION: Displays the help information for the ast-grep command-line tool.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: shell
CODE:
```
ast-grep --help
# if you are not on Linux
sg --help
```

----------------------------------------

TITLE: ast-grep pattern example
DESCRIPTION: An example of an ast-grep pattern that matches code where a property is checked for existence before calling a method on it.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: javascript
CODE:
```
obj.val && obj.val()
```

----------------------------------------

TITLE: ast-grep GitHub Action Setup
DESCRIPTION: Provides an example of setting up an official GitHub Action for ast-grep, enabling CI/CD integration for code analysis and transformation.

SOURCE: https://ast-grep.github.io/blog/stars-3000

LANGUAGE: yaml
CODE:
```
name: ast-grep CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run ast-grep
      uses: ast-grep/ast-grep-action@v1
      with:
        pattern: ""
```

----------------------------------------

TITLE: Run ast-grep search with inferred language
DESCRIPTION: Executes ast-grep to find code matching '$PROP && $PROP()', inferring the language from file extensions in the specified directory.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: shell
CODE:
```
# ast-grep will infer languages based on file extensions
ast-grep -p '$PROP && $PROP()' TypeScript/src
```

----------------------------------------

TITLE: N-API Binding Development
DESCRIPTION: Commands for developing the Node.js binding (@ast-grep/napi), including installing dependencies, building the binding, and running tests within the crates/napi directory.

SOURCE: https://ast-grep.github.io/contributing/development

LANGUAGE: bash
CODE:
```
cd crates/napi
yarn   # Install dependencies
yarn build # Build the binding
yarn test # Run test
```

----------------------------------------

TITLE: Faster Installation with cargo binstall
DESCRIPTION: Enables faster installation of ast-grep through `cargo binstall` support, providing pre-built binaries for quick setup and analysis.

SOURCE: https://ast-grep.github.io/blog/stars-8000

LANGUAGE: bash
CODE:
```
cargo install --git https://github.com/ast-grep/ast-grep
# or using pre-built binaries if available via cargo binstall
```

----------------------------------------

TITLE: Install ast-grep Python Package
DESCRIPTION: Installs the ast-grep Python library from PyPI using pip. This is the first step to using the Python API.

SOURCE: https://ast-grep.github.io/guide/api-usage/py-api

LANGUAGE: bash
CODE:
```
pip install ast-grep-py
```

----------------------------------------

TITLE: Install ast-grep
DESCRIPTION: Installs the ast-grep command-line tool using Cargo or Homebrew. This tool is essential for searching and rewriting code based on Abstract Syntax Trees.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: shell
CODE:
```
# install the binary `ast-grep`

```

LANGUAGE: shell
CODE:
```
cargo install ast-grep
# or use brew

```

LANGUAGE: shell
CODE:
```
brew install ast-grep
```

----------------------------------------

TITLE: ast-grep pattern with metavariable
DESCRIPTION: An ast-grep pattern using a metavariable '$PROP' to match any property being checked and then called.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: javascript
CODE:
```
$PROP && $PROP()
```

----------------------------------------

TITLE: Migrate add_system_to_stage to add_system in Rust
DESCRIPTION: This example shows how to migrate `add_system_to_stage` calls to the new `add_system` with `in_base_set` in Rust using ast-grep, based on the provided migration guide.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: sh
CODE:
```
ast-grep \

```

----------------------------------------

TITLE: Detect Problematic JSON Tags with Dash Prefix - Examples in Go
DESCRIPTION: These examples demonstrate various cases of incorrect JSON tags starting with `-,` that can lead to unexpected unmarshaling behavior in Go.

SOURCE: https://ast-grep.github.io/catalog/go

LANGUAGE: Go
CODE:
```
package main

type TestStruct1 struct {
	A string `json:"id"` // ok
}

type TestStruct2 struct {
	B string `json:"-,omitempty"` // wrong
}

type TestStruct3 struct {
	C string `json:"-,123"` // wrong
}

type TestStruct4 struct {
	D string `json:"-,"` // wrong
}
```

----------------------------------------

TITLE: Run ast-grep search with short flags
DESCRIPTION: Executes ast-grep using short flags '-p' for pattern and '-l' for language to find code matching '$PROP && $PROP()' in TypeScript files.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: shell
CODE:
```
ast-grep -p '$PROP && $PROP()' -l ts TypeScript/src
```

----------------------------------------

TITLE: Install ast-grep NAPI Package
DESCRIPTION: Installs the ast-grep napi package using either npm or pnpm. This is the first step to using the JavaScript API.

SOURCE: https://ast-grep.github.io/guide/api-usage/js-api

LANGUAGE: Bash
CODE:
```
npm install --save @ast-grep/napi
```

LANGUAGE: Bash
CODE:
```
pnpm add @ast-grep/napi
```

----------------------------------------

TITLE: Emacs Installation with straight.el
DESCRIPTION: This elisp snippet shows how to install the `ast-grep.el` Emacs package using `straight.el`, a package manager for Emacs.

SOURCE: https://ast-grep.github.io/guide/tools/editors

LANGUAGE: elisp
CODE:
```
(straight-use-package '(ast-grep :type git :host github :repo "SunskyXH/ast-grep.el"))
```

----------------------------------------

TITLE: Rust Main Function with Printer Thread and Channel
DESCRIPTION: Demonstrates the main thread setup for the message-passing model. It creates an mpsc channel, spawns a dedicated printer thread that receives results, and prepares worker threads.

SOURCE: https://ast-grep.github.io/blog/fearless-concurrency

LANGUAGE: rust
CODE:
```
fn main() {
    let (sender, receiver) = mpsc::channel();
    let mut printer = StdoutPrinter::new();
    let printer_thread = thread::spawn(move || {
        for result in receiver {
            printer.print(result);
        }
    });
    // spawn worker threads
}
```

----------------------------------------

TITLE: Detect JWT Library Usage in Go
DESCRIPTION: This code snippet demonstrates how to detect the usage of the `github.com/golang-jwt/jwt` library in Go code. It shows a basic example of creating and signing a JWT token.

SOURCE: https://ast-grep.github.io/catalog/go

LANGUAGE: Go
CODE:
```
package main

import (
	"fmt"
	"github.com/golang-jwt/jwt" // This matches the AST rule
)

func main() {
	token := jwt.New(jwt.SigningMethodHS256) // Create a new token
	// Add some claims
	token.Claims = jwt.MapClaims{"user": "alice", "role": "admin"}
	tokenString, err := token.SignedString([]byte("my-secret")) // Sign the token
	if err != nil {
		fmt.Printf("Error signing token: %v\n", err)
		return
	}
	fmt.Printf("Generated token: %s\n", tokenString)
}
```

----------------------------------------

TITLE: Run ast-grep search with language specified
DESCRIPTION: Executes ast-grep to find code matching the pattern '$PROP && $PROP()' in TypeScript files, specifying the language as 'ts'.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: shell
CODE:
```
ast-grep --pattern '$PROP && $PROP()' --lang ts TypeScript/src
```

----------------------------------------

TITLE: Find Go Function Declarations by Name Pattern
DESCRIPTION: This rule demonstrates how to find Go function declarations whose names match a specific pattern, such as starting with 'Test'. Since meta-variable patterns have limitations, this example utilizes a YAML rule with the `regex` atomic rule to achieve the desired matching. It targets `function_declaration` kinds with a `name` field matching the regex `Test.*`.

SOURCE: https://ast-grep.github.io/catalog/go

LANGUAGE: yaml
CODE:
```
id: test-functions
language: go
rule:
  kind: function_declaration
  has:
    field: name
    regex: Test.*
```

LANGUAGE: go
CODE:
```
package abs
import "testing"
func TestAbs(t *testing.T) {
    got := Abs(-1)
    if got != 1 {
        t.Errorf("Abs(-1) = %d; want 1", got)
    }
}
```

----------------------------------------

TITLE: Compile Mojo Parser with GCC Example
DESCRIPTION: An example of manually compiling the Mojo parser using GCC, specifying the output as mojo.so and including necessary paths and flags.

SOURCE: https://ast-grep.github.io/advanced/custom-language

LANGUAGE: shell
CODE:
```
gcc -shared -fPIC -fno-exceptions -g -I 'src' -o mojo.so -O2 src/scanner.cc -xc src/parser.c -lstdc++
```

----------------------------------------

TITLE: Refactor code with ast-grep
DESCRIPTION: Refactors TypeScript code by replacing patterns like '$PROP && $PROP()' with '$PROP?.()' using ast-grep's rewrite functionality in interactive mode.

SOURCE: https://ast-grep.github.io/guide/quick-start

LANGUAGE: shell
CODE:
```
# pattern and language argument support short form
ast-grep -p '$PROP && $PROP()' \
   --rewrite '$PROP?.()' \
   --interactive \
   -l ts \
   TypeScript/src
```

----------------------------------------

TITLE: C: Example of Method Call
DESCRIPTION: Provides an example of C code demonstrating the 'method call' syntax that the ast-grep rule targets. This shows how structs and function pointers might be used to simulate method invocation.

SOURCE: https://ast-grep.github.io/catalog/c/rewrite-method-to-function-call

LANGUAGE: c
CODE:
```
void test_func() {
    some_struct->field.method();
    some_struct->field.other_method(1, 2, 3);
}
```

----------------------------------------

TITLE: Example: OpenAI SDK Migration in Flask App (Python)
DESCRIPTION: This Python code snippet provides a practical example of an OpenAI SDK migration within a Flask application. It shows the original code structure before applying the ast-grep rules for API updates.

SOURCE: https://ast-grep.github.io/catalog/python/migrate-openai-sdk

LANGUAGE: python
CODE:
```
import os
import openai
from flask import Flask, jsonify

app = Flask(__name__)
openai.api_key = os.getenv("OPENAI_API_KEY")

@app.route("/chat", methods=("POST"))
def index():
    animal = request.form["animal"]
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=generate_prompt(animal),
        temperature=0.6,
    )
    return jsonify(response.choices)
```

----------------------------------------

TITLE: Example Directory Structure for Rules and Tests
DESCRIPTION: Illustrates the recommended file and directory structure for organizing ast-grep rules and their corresponding test cases. It shows the placement of rule files, test files, and the main configuration file.

SOURCE: https://ast-grep.github.io/guide/test-rule

LANGUAGE: bash
CODE:
```
my-awesome-rules/
  |- rules/
  | |- no-await-in-loop.yml        # rule file
  |- rule-tests/
  | |- no-await-in-loop-test.yml   # test file
  |- sgconfig.yml
```

----------------------------------------

TITLE: ast-grep LSP Command Usage
DESCRIPTION: Starts the Language Server Protocol server for editor integration, with options for configuration.

SOURCE: https://ast-grep.github.io/reference/cli

LANGUAGE: shell
CODE:
```
ast-grep lsp
ast-grep lsp -c CONFIG_FILE
ast-grep lsp --config CONFIG_FILE
ast-grep lsp -h
ast-grep lsp --help
```

----------------------------------------

TITLE: Clone Bevy Project
DESCRIPTION: Clones the 'big-brain' Bevy project repository from GitHub to a local machine. This is the initial step to start the migration process.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: sh
CODE:
```
git clone git@github.com:HerringtonDarkholme/big-brain.git
```

----------------------------------------

TITLE: ast-grep CLI Usage Examples
DESCRIPTION: Demonstrates common command-line interface (CLI) commands for ast-grep, including running tests with regex filtering and outputting results in JSON format.

SOURCE: https://ast-grep.github.io/blog/stars-3000

LANGUAGE: bash
CODE:
```
ast-grep test -f
ast-grep --json
```

----------------------------------------

TITLE: Emacs Doom Emacs Installation
DESCRIPTION: Instructions for adding the `ast-grep.el` package to your Doom Emacs configuration by adding it to the `packages.el` file.

SOURCE: https://ast-grep.github.io/guide/tools/editors

LANGUAGE: elisp
CODE:
```
(package! ast-grep :recipe (:host github :repo "SunskyXH/ast-grep.el"))
```

----------------------------------------

TITLE: Neovim Setup with nvim-lspconfig
DESCRIPTION: Configuration for Neovim using `nvim-lspconfig` to integrate the ast-grep Language Server Protocol (LSP) client. It specifies the command to run, supported filetypes, and how to detect the project root.

SOURCE: https://ast-grep.github.io/guide/tools/editors

LANGUAGE: lua
CODE:
```
require('lspconfig').ast_grep.setup({
  -- these are the default options, you only need to specify
  -- options you'd like to change from the default
  cmd = { 'ast-grep', 'lsp' },
  filetypes = { "c", "cpp", "rust", "go", "java", "python", "javascript", "typescript", "html", "css", "kotlin", "dart", "lua" },
  root_dir = require('lspconfig.util').root_pattern('sgconfig.yaml', 'sgconfig.yml')
})
```

----------------------------------------

TITLE: Create a New Rule
DESCRIPTION: Demonstrates the process of creating a new rule using `ast-grep new rule`. It guides the user through naming the rule, selecting the target language (e.g., JavaScript), and optionally creating a test file for the rule.

SOURCE: https://ast-grep.github.io/guide/scan-project

LANGUAGE: markdown
CODE:
```
> What is your rule's name? no-eval
> Choose rule's language JavaScript
Created rules at ./rules/no-eval.yml
> Do you also need to create a test for the rule? Yes
Created test at rule-tests/no-eval-test.yml
```

----------------------------------------

TITLE: JavaScript Recursive Function Example
DESCRIPTION: A sample JavaScript function demonstrating recursion, used in the context of ast-grep rule matching examples.

SOURCE: https://ast-grep.github.io/advanced/faq

LANGUAGE: javascript
CODE:
```
function recurse() {
  foo()
  recurse()
}
```

----------------------------------------

TITLE: Refactor SystemSet with add_systems
DESCRIPTION: This example shows how to migrate from Bevy's `SystemSet` with `add_system_set` to the more concise `add_systems` API. It targets the pattern of defining a system set with multiple systems and run criteria, converting it to a tuple of systems with a `run_if` condition.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: Shell
CODE:
```
ast-grep \
  -p '$APP.add_system_set_to_stage($STAGE, $SYS,)' \
  -r '$APP.add_systems($SYS.in_set($STAGE))' -i
```

LANGUAGE: Rust
CODE:
```
// Before:
app.add_system_set(
  SystemSet::new()
    .with_system(a)
    .with_system(b)
    .with_run_criteria(my_run_criteria)
);
// After:
app.add_systems((a, b).run_if(my_run_condition));
```

----------------------------------------

TITLE: XState v4 Migration Example (Before)
DESCRIPTION: This JavaScript code snippet demonstrates the structure of XState v4 code before migration, including importing `Machine` and `interpret`, and using `machine.withConfig` and `interpret`.

SOURCE: https://ast-grep.github.io/catalog/typescript/migrate-xstate-v5

LANGUAGE: javascript
CODE:
```
import { Machine, interpret } from 'xstate';

const machine = Machine({ /*...*/});

const specificMachine = machine.withConfig({
  actions: { /* ... */ },
  guards: { /* ... */ },
  services: { /* ... */ },
});

const actor = interpret(specificMachine, {
  /* actor options */
});
```

----------------------------------------

TITLE: XState v5 Migration Example (After)
DESCRIPTION: This JavaScript code snippet shows the equivalent XState v5 code after applying the migration rules. It uses `createMachine`, `createActor`, and `machine.provide`, with `services` replaced by `actors`.

SOURCE: https://ast-grep.github.io/catalog/typescript/migrate-xstate-v5

LANGUAGE: javascript
CODE:
```
import { Machine, interpret } from 'xstate'; 
import { createMachine, createActor } from 'xstate'; 

const machine = Machine({ /*...*/}); 
const machine = createMachine({ /*...*/}); 

const specificMachine = machine.withConfig({
const specificMachine = machine.provide({
  actions: { /* ... */ },
  guards: { /* ... */ },
  services: { /* ... */ }, 
  actors: { /* ... */ }, 
});

const actor = interpret(specificMachine, {
const actor = createActor(specificMachine, {
  /* actor options */
});
```

----------------------------------------

TITLE: TypeScript: Example Usage of findInFiles
DESCRIPTION: This TypeScript example demonstrates how to use the `js.findInFiles` function from ast-grep. It specifies paths to search, a matcher rule to find 'member_expression' kinds, and a callback function to assert the results, checking for errors and the content of matched nodes.

SOURCE: https://ast-grep.github.io/guide/api-usage/performance-tip

LANGUAGE: TypeScript
CODE:
```
let fileCount = await js.findInFiles({
  paths: ['relative/path/to/code'],
  matcher: {
    rule: {kind: 'member_expression'}
  },
}, (err, n) => {
  t.is(err, null)
  t.assert(n.length > 0)
  t.assert(n[0].text().includes('.'))
})
```

----------------------------------------

TITLE: Python dict Function Call Example
DESCRIPTION: Illustrates the difference between a Python `dict` function call and a dictionary literal, setting the context for the rewriter example.

SOURCE: https://ast-grep.github.io/guide/rewrite/rewriter

LANGUAGE: python
CODE:
```
# dict function call
d = dict(a=1, b=2)
# dictionary literal
d = {'a': 1, 'b': 2}
```

----------------------------------------

TITLE: Tree-sitter Node API Example
DESCRIPTION: Demonstrates the core, language-agnostic API of Tree-sitter for traversing syntax trees. It includes methods for getting node kind, specific children by field name, parent nodes, all child nodes, and the node's text content.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: TypeScript
CODE:
```
class Node {
  kind(): string     // Get the type of node, e.g., 'function_declaration'
  field(name: string): Node  // Get a specific child by its field name
  parent(): Node             // Navigate to the parent node
  children(): Node[]         // Get all child nodes
  text(): string             // Get the actual source code text
}
```

----------------------------------------

TITLE: Java: Example If Statement
DESCRIPTION: An example of a Java if statement that might be matched by pattern matching tools. This snippet demonstrates a condition involving width and height comparisons.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: Java
CODE:
```
if (width <= 1280 && height <= 800) {
  return 1;
}
```

----------------------------------------

TITLE: String Style Transformations: Concise syntax examples
DESCRIPTION: Illustrates the string style transformation syntax in ast-grep (v0.38.3+), offering a more concise alternative to the object-style syntax. Examples show how to use `substring` and `convert` transformations with named arguments.

SOURCE: https://ast-grep.github.io/guide/rewrite/transform

LANGUAGE: yaml
CODE:
```
# illustration of string style transformation syntax
NEW_VAR: transform($SOURCE_VAR, option1=value1, option2=value2)
```

LANGUAGE: yaml
CODE:
```
transform:
  LIST: substring($GEN, startChar=1, endChar=-1)
  KEBABED: convert($OLD_FN, toCase=kebabCase)
  MAYBE_COMMA: replace($$$ARGS, replace='^.+', by=', ')
```

----------------------------------------

TITLE: Snapshot Diff Example (Diff)
DESCRIPTION: Shows a diff output during an interactive snapshot update, highlighting specific changes in the rule's expected output.

SOURCE: https://ast-grep.github.io/guide/test-rule

LANGUAGE: diff
CODE:
```
[Wrong] no-await-in-loop snapshot is different from baseline.
Diff:
 labels:
 - source: await bar
   style: Primary
-  start: 2
+  start: 28
   end: 37
 - source: do { await bar; } while (baz);
   style: Secondary
For Code:
  async function foo() { do { await bar; } while (baz); }

Accept new snapshot? (Yes[y], No[n], Accept All[a], Quit[q])

```

----------------------------------------

TITLE: Inspect Project Configuration with ast-grep scan
DESCRIPTION: This bash command uses the `--inspect summary` flag with `ast-grep scan` to display information about the project directory and the configuration file being used. This helps in verifying the project setup.

SOURCE: https://ast-grep.github.io/guide/project/project-config

LANGUAGE: bash
CODE:
```
ast-grep scan --inspect summary
```

----------------------------------------

TITLE: Install Tree-sitter CLI
DESCRIPTION: Installs the Tree-sitter CLI tool globally using npm, which is required for compiling custom language parsers.

SOURCE: https://ast-grep.github.io/advanced/custom-language

LANGUAGE: bash
CODE:
```
npm install -g tree-sitter-cli
```

----------------------------------------

TITLE: Run Benchmark
DESCRIPTION: Executes the benchmark tests for ast-grep, which are located in the 'benches' folder and are not run by default with 'cargo test'.

SOURCE: https://ast-grep.github.io/contributing/development

LANGUAGE: bash
CODE:
```
cd benches
cargo bench
```

----------------------------------------

TITLE: Common Cargo Commands
DESCRIPTION: Provides a list of essential Cargo commands for Rust projects, including running tests, checking code, linting with clippy, and formatting code.

SOURCE: https://ast-grep.github.io/contributing/development

LANGUAGE: bash
CODE:
```
cargo test     # Run test
```

LANGUAGE: bash
CODE:
```
cargo check    # Run checking
```

LANGUAGE: bash
CODE:
```
cargo clippy   # Run clippy
```

LANGUAGE: bash
CODE:
```
cargo fmt      # Run formatting
```

----------------------------------------

TITLE: Release New Version
DESCRIPTION: Command to release a new version of ast-grep. This command bumps the version, creates a git tag, and triggers GitHub actions for publishing to crates.io, npm, and PyPi.

SOURCE: https://ast-grep.github.io/contributing/development

LANGUAGE: bash
CODE:
```
cargo xtask [version-number]
```

----------------------------------------

TITLE: TSX: Example of React Functions Not Necessarily Hooks
DESCRIPTION: This TypeScript example demonstrates React functions that start with 'use' but are not intended to be React hooks. It includes a regular function and a constant arrow function, both prefixed with 'use', alongside a genuine React hook for comparison.

SOURCE: https://ast-grep.github.io/catalog/tsx

LANGUAGE: tsx
CODE:
```
function useIAmNotHookActually(args) {
    console.log('Called in React but I dont need to be a hook')
    return args.length
}
const useIAmNotHookToo = (...args) => {
    console.log('Called in React but I dont need to be a hook')
    return args.length
}

function useTrueHook() {
    useEffect(() => {
      console.log('Real hook')
    })
}
```

----------------------------------------

TITLE: Illustrate Incorrect JSON Tag Usage in Go Structs
DESCRIPTION: This code provides examples of incorrect JSON tag usage in Go structs, specifically highlighting the vulnerability where tags start with `-,` followed by a comma. These examples demonstrate how such tags can lead to unexpected unmarshaling behavior.

SOURCE: https://ast-grep.github.io/catalog/go/unmarshal-tag-is-dash

LANGUAGE: go
CODE:
```
package main

type TestStruct1 struct {
	A string `json:"id"` // ok
}

type TestStruct2 struct {
	B string `json:"-,omitempty"` // wrong
}

type TestStruct3 struct {
	C string `json:"-,123"` // wrong
}

type TestStruct4 struct {
	D string `json:"-,"` // wrong
}
```

----------------------------------------

TITLE: Neovim Plugin Installation for coc.nvim
DESCRIPTION: Instructions for installing the `coc-ast-grep` plugin for Neovim using vim-plug. This enables ast-grep functionality within the coc.nvim environment.

SOURCE: https://ast-grep.github.io/guide/tools/editors

LANGUAGE: vim
CODE:
```
Plug 'yaegassy/coc-ast-grep', {'do': 'yarn install --frozen-lockfile'}
```

----------------------------------------

TITLE: YAML Rule to Detect Problematic JSON Tags
DESCRIPTION: This YAML configuration defines an ast-grep rule to detect struct fields with JSON tags that start with a `-` but are followed by a comma, indicating a potential security vulnerability.

SOURCE: https://ast-grep.github.io/catalog/go

LANGUAGE: YAML
CODE:
```
id: unmarshal-tag-is-dash
severity: error
message: Struct field can be decoded with the `-` key because the JSON tag
  starts with a `-` but is followed by a comma.
rule:
  pattern: '`$TAG`'
  inside:
    kind: field_declaration
constraints:
  TAG:
    regex: json:"-,.*"
```

----------------------------------------

TITLE: ast-grep JSON output example
DESCRIPTION: An example of the JSON output generated by ast-grep when the --json flag is used. It shows the structure of a match object, including text, range, file, lines, and metaVariables.

SOURCE: https://ast-grep.github.io/guide/tools/json

LANGUAGE: json
CODE:
```
[
  {
    "text": "Some(matched)",
    "range": {
      "byteOffset": { "start": 10828, "end": 10841 },
      "start": { "line": 303, "column": 2 },
      "end": { "line": 303, "column": 15 }
    },
    "file": "crates/config/src/rule/mod.rs",
    "lines": "  Some(matched)",
    "replacement": "None",
    "replacementOffsets": { "start": 10828, "end": 10841 },
    "language": "Rust",
    "metaVariables": {
      "single": {
        "A": {
          "text": "matched",
          "range": {
            "byteOffset": { "start": 10833, "end": 10840 },
            "start": { "line": 303, "column": 7 },
            "end": { "line": 303, "column": 14 }
          }
        }
      },
      "multi": {},
      "transformed": {}
    }
  }
]
```

----------------------------------------

TITLE: Create New ast-grep Project
DESCRIPTION: Initializes a new ast-grep project by creating necessary configuration files and directories. It prompts the user for locations of rules, tests, and utility files.

SOURCE: https://ast-grep.github.io/guide/scan-project

LANGUAGE: markdown
CODE:
```
No sgconfig.yml found. Creating a new ast-grep project...
> Where do you want to have your rules? rules
> Do you want to create rule tests? Yes
> Where do you want to have your tests? rule-tests
> Do you want to create folder for utility rules? Yes
> Where do you want to have your utilities? utils
Your new ast-grep project has been created!
```

----------------------------------------

TITLE: Consume ast-grep JSON with jq and jless
DESCRIPTION: Example of piping ast-grep's JSON output to jq to extract specific fields (like 'replacement') and then to jless for viewing.

SOURCE: https://ast-grep.github.io/guide/tools/json

LANGUAGE: bash
CODE:
```
ast-grep run -p 'Some($A)' -r 'None' --json | jq '.[].replacement' | jless
```

----------------------------------------

TITLE: ast-grep: 'all' Composite Rule Example
DESCRIPTION: Provides an example of the 'all' composite rule, which matches a node only if all its sub-rules match. It takes an array of rules.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yaml
CODE:
```
all:
  - kind: call_expression
  - pattern: console.log($ARG)
```

----------------------------------------

TITLE: Match Function Parameters with Multi Meta Variables
DESCRIPTION: Demonstrates matching function parameters using multi meta variables, showing how '$$$ARGS' captures parameter lists, including empty lists and multiple arguments.

SOURCE: https://ast-grep.github.io/guide/pattern-syntax

LANGUAGE: javascript
CODE:
```
function foo(bar) {
  return bar
}

function noop() {}

function add(a, b, c) {
  return a + b + c
}
```

----------------------------------------

TITLE: Get number of digits in a `usize`
DESCRIPTION: This rule provides a way to count the number of digits in a `usize` type, likely in Rust, offering a fix and a simple pattern example.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Rust
CODE:
```
kind: "expression"
pattern: "$A.to_string().len()"
```

----------------------------------------

TITLE: Basic Python API Usage Example
DESCRIPTION: Demonstrates a typical workflow: parsing a Python string into a syntax tree using SgRoot, finding a specific node (a print statement), and extracting information from a captured pattern.

SOURCE: https://ast-grep.github.io/guide/api-usage/py-api

LANGUAGE: python
CODE:
```
from ast_grep_py import SgRoot

root = SgRoot("print('hello world')", "python") # 1. parse
node = root.root()                              # 2. get root
print_stmt = node.find(pattern="print($A)")     # 3. find
print_stmt.get_match('A').text()                # 4. collect information
# 'hello world'
```

----------------------------------------

TITLE: JavaScript Barrel Import Example
DESCRIPTION: Shows a typical JavaScript barrel import statement that needs to be refactored into individual imports.

SOURCE: https://ast-grep.github.io/reference/yaml/rewriter

LANGUAGE: JavaScript
CODE:
```
import { A, B, C } from './module';
// rewrite the above to
import A from './module/a';
import B from './module/b';
import C from './module/c';
```

----------------------------------------

TITLE: Vue Template Example for Ant Design Vue Upgrade (HTML)
DESCRIPTION: This HTML snippet demonstrates a Vue template containing Ant Design Vue components. It includes examples of `a-modal`, `a-tooltip`, and `a-tag`, all using the `visible` attribute, which is the target for the ast-grep upgrade rule to be replaced with `open` for modal and tooltip components.

SOURCE: https://ast-grep.github.io/catalog/html/upgrade-ant-design-vue

LANGUAGE: html
CODE:
```
<template>
  <a-modal :visible="visible">content</a-modal>
  <a-tooltip :visible="visible" />
  <a-tag :visible="visible">tag</a-tag>
</template>
```

----------------------------------------

TITLE: VSCode Schema Validation for rule.yml
DESCRIPTION: This snippet shows how to enable schema validation for `rule.yml` files in VSCode to catch errors and get autocompletions. It requires adding a schema URL to the top of the file and installing a YAML extension.

SOURCE: https://ast-grep.github.io/guide/tools/editors

LANGUAGE: yaml
CODE:
```
# yaml-language-server: $schema=https://raw.githubusercontent.com/ast-grep/ast-grep/main/schemas/rule.json
```

----------------------------------------

TITLE: Example HTML for i18n Extraction
DESCRIPTION: This HTML snippet demonstrates the input content for the i18n key extraction rule. It includes static text ('Hello') that should be extracted and dynamic text ('{{ text }}') that should be skipped.

SOURCE: https://ast-grep.github.io/catalog/html/extract-i18n-key

LANGUAGE: html
CODE:
```
<template>
  <span>Hello</span>
  <span>{{ text }}</span>
</template>
```

----------------------------------------

TITLE: Format String Vulnerability Examples (C++)
DESCRIPTION: This C++ code snippet demonstrates format string vulnerabilities and their fixes. The vulnerable examples pass user-controlled data directly to `fprintf` and `sprintf`. The corrected examples explicitly use `"%s"` to ensure the data is treated as a string, preventing potential code execution.

SOURCE: https://ast-grep.github.io/catalog/cpp/fix-format-vuln

LANGUAGE: cpp
CODE:
```
// Error
fprintf(stderr, out);
sprintf(&buffer[2], obj->Text);
sprintf(buf1, Text_String(TXT_WAITING_FOR_CONNECTIONS));
// OK
fprintf(stderr, "%s", out);
sprintf(&buffer[2], "%s", obj->Text);
sprintf(buf1, "%s", Text_String(TXT_WAITING_FOR_CONNECTIONS));
```

----------------------------------------

TITLE: ast-grep Project Structure
DESCRIPTION: Illustrates the standard directory structure created after initializing a new ast-grep project, including folders for rules, tests, utilities, and the main configuration file.

SOURCE: https://ast-grep.github.io/guide/scan-project

LANGUAGE: bash
CODE:
```
my-awesome-project
  |- rules           # where rules go
  |- rule-tests       # test cases for rules
  |- utils           # global utility rules for reusing
  |- sgconfig.yml    # root configuration file
```

----------------------------------------

TITLE: TypeScript Example of TypeMap Node Definition
DESCRIPTION: Illustrates a concrete example of a node type definition within the TypeMap for TypeScript, specifically for a 'function_declaration'. It shows how the 'type', 'named', and 'fields' properties are populated.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
type TypeScript = {
  // AST node type definition
  function_declaration: {
    type: "function_declaration", // kind
    named: true,                  // is named
    fields: {
      body: {
        types: [ { type: "statement_block", named: true } ]
      },
    }
  },
  ...
}
```

----------------------------------------

TITLE: Chai `should` to `expect` Assertion Example
DESCRIPTION: Demonstrates the conversion of Chai assertions from the `should` style to the `expect` style in JavaScript. This includes examples for checking instance types and function properties.

SOURCE: https://ast-grep.github.io/catalog/typescript/switch-from-should-to-expect

LANGUAGE: javascript
CODE:
```
it('should produce an instance of chokidar.FSWatcher', () => {
  watcher.should.be.an.instanceof(chokidar.FSWatcher);
});
it('should expose public API methods', () => {
  watcher.on.should.be.a('function');
  watcher.emit.should.be.a('function');
  watcher.add.should.be.a('function');
  watcher.close.should.be.a('function');
  watcher.getWatched.should.be.a('function');
});
```

----------------------------------------

TITLE: Detect Problematic JSON Tags with Dash Prefix in Go
DESCRIPTION: This snippet detects a security vulnerability in Go's JSON unmarshaling where a struct field with a JSON tag starting with `-,` can be unexpectedly unmarshaled with the `-` key. This can lead to unintended exposure of fields.

SOURCE: https://ast-grep.github.io/catalog/go

LANGUAGE: Go
CODE:
```
type User struct {
    Username string `json:"username,omitempty"`
    Password string `json:"password,omitempty"`
    IsAdmin  bool   `json:"-,omitempty"`  // Intended to prevent marshaling
}

// This still works and sets IsAdmin to true!
json.Unmarshal([]byte(`{"-": true}`), &user)
// Result: main.User{Username:"", Password:"", IsAdmin:true}
```

----------------------------------------

TITLE: Specify Files for Rule Application
DESCRIPTION: Uses glob patterns to specify which files a rule should apply to. Paths are relative to the project root and should not start with './'.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
files:
  - src/**/*.js
  - src/**/*.ts
```

----------------------------------------

TITLE: ast-grep DSL: Mixed Paradigms Example
DESCRIPTION: Demonstrates the ast-grep DSL's blend of declarative, logic, and imperative paradigms using a JavaScript code snippet. It illustrates pattern matching, logic operators, and conditional statements within the DSL.

SOURCE: https://ast-grep.github.io/blog/yaml-vs-dsl

LANGUAGE: JavaScript
CODE:
```
`$method($message)` where {
  $method <: `console.log`,
  if ($message <: r"Hello, .*!") {
    $linter = "hello world"
  } else {
    $linter = "not hello"
  },
  register_diagnostic(
    span = $method,
    message = $linter
  )
}
```

----------------------------------------

TITLE: Run ast-grep with fzf for interactive launching
DESCRIPTION: This bash script uses fzf to create an interactive launcher for ast-grep. It allows users to search and select files, preview them with `bat`, and open them in vim. The script sets up a prefix for ast-grep commands and handles initial queries and dynamic reloading.

SOURCE: https://ast-grep.github.io/guide/tooling-overview

LANGUAGE: bash
CODE:
```
SG_PREFIX="ast-grep run --color=always -p "
INITIAL_QUERY="${*:-}"
: | fzf --ansi --disabled --query "$INITIAL_QUERY" \
    --bind "start:reload:$SG_PREFIX {q}" \
    --bind "change:reload:sleep 0.1; $SG_PREFIX {q} || true" \
    --delimiter : \
    --preview 'bat --color=always {1} --highlight-line {2}' \
    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
    --bind 'enter:become(vim {1} +{2})'
```

----------------------------------------

TITLE: Python Type Hint Transformation Example (Input)
DESCRIPTION: This Python code snippet shows an example of a nested type hint that will be transformed by the ast-grep rules.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: python
CODE:
```
results:  Optional[Union[List[Union[str, dict]], str]]

```

----------------------------------------

TITLE: Example Barrel Import Statement (TypeScript)
DESCRIPTION: This is an example of a barrel import statement in TypeScript, where multiple identifiers are imported from a single barrel file.

SOURCE: https://ast-grep.github.io/catalog/typescript/speed-up-barrel-import

LANGUAGE: typescript
CODE:
```
import {a, b, c} from './barrel'
```

----------------------------------------

TITLE: Handle Non-Matches with Meta Variables
DESCRIPTION: Illustrates cases where meta variables do not match, such as commented-out code, strings, or when the number of arguments differs from the pattern's expectation.

SOURCE: https://ast-grep.github.io/guide/pattern-syntax

LANGUAGE: javascript
CODE:
```
// console.log(123) in comment is not matched
'console.log(123) in string' // is not matched as well
console.log() // mismatch argument
console.log(a, b) // too many arguments
```

----------------------------------------

TITLE: Failed Test Example (Bash)
DESCRIPTION: Illustrates the output when test cases fail, indicating 'noisy' matches (false positives) or 'missing' matches (false negatives).

SOURCE: https://ast-grep.github.io/guide/test-rule

LANGUAGE: bash
CODE:
```
Running 1 tests
FAIL no-await-in-loop  ...........N............M

----------- Failure Details -----------
[Noisy] Expect no-await-in-loop to report no issue, but some issues found in:

  async function foo() { for (var bar of baz) await bar; }

[Missing] Expect rule no-await-in-loop to report issues, but none found in:

  for (let a of b) { console.log(a) }

Error: test failed. 0 passed; 1 failed;

```

----------------------------------------

TITLE: Example of inefficient digit count calculation (Rust)
DESCRIPTION: This Rust code snippet demonstrates the inefficient way to calculate the number of digits in a `usize` by converting the number to a string and counting its characters. This method can be costly due to string allocation.

SOURCE: https://ast-grep.github.io/catalog/rust/get-digit-count-in-usize

LANGUAGE: rust
CODE:
```
let width = (lines + num).to_string().chars().count();
```

----------------------------------------

TITLE: Ruby Code Examples for Symbol over Proc
DESCRIPTION: These Ruby code snippets demonstrate the usage of the `&:symbol` shorthand for method invocation. The examples show how `select` and `each` methods can be made more concise by replacing block syntax with this shorthand.

SOURCE: https://ast-grep.github.io/catalog/ruby/prefer-symbol-over-proc

LANGUAGE: ruby
CODE:
```
[1, 2, 3].select { |v| v.even? }
(1..100).each { |i| i.to_s }
not_list.no_match { |v| v.even? }
```

LANGUAGE: ruby
CODE:
```
[1, 2, 3].select(&:even?)
(1..100).each(&:to_s)
```

----------------------------------------

TITLE: Ordered Rule Matching for Recursive Function Detection in JavaScript
DESCRIPTION: Illustrates how the order of rules in ast-grep affects matching, using an example to find recursive function calls in JavaScript. It shows a working example where the function declaration is matched first, followed by the recursive call.

SOURCE: https://ast-grep.github.io/advanced/faq

LANGUAGE: yaml
CODE:
```
id: recursive-call
language: JavaScript
rule:
  all:
  - pattern: function $F() { $$$ }
  - has:
      pattern: $F()
      stopBy: end
```

----------------------------------------

TITLE: Rust: Iterate over string byte offsets with char_indices
DESCRIPTION: Demonstrates the correct way to iterate over a Rust string to get byte offsets using `char_indices()`. This is crucial because Rust strings are UTF-8 encoded, where characters can occupy variable byte lengths. The example shows how `char_indices()` provides the correct byte index for each character, unlike `chars().enumerate()` which yields character indices.

SOURCE: https://ast-grep.github.io/catalog/rust/boshen-footgun

LANGUAGE: rs
CODE:
```
let yes = "y̆es";
let mut char_indices = yes.char_indices();
assert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')
assert_eq!(Some((1, '\u{0306}')), char_indices.next());
// note the 3 here - the last character took up two bytes
assert_eq!(Some((3, 'e')), char_indices.next());
assert_eq!(Some((4, 's')), char_indices.next());
```

----------------------------------------

TITLE: Match JavaScript Object Accessors with Rules
DESCRIPTION: Illustrates how to match JavaScript object accessors like `get foo() {}` or `set bar() {}` using ast-grep. It explains that meta-variables alone are insufficient because they are parsed as keywords. The recommended approach is to use rules with `kind: method_definition` and a regex to filter for 'get' or 'set'.

SOURCE: https://ast-grep.github.io/advanced/pattern-parse

LANGUAGE: javascript
CODE:
```
obj = { $KIND foo() { } }
```

LANGUAGE: yaml
CODE:
```
rule:
  kind: method_definition
  regex: '^get|set\s'
```

----------------------------------------

TITLE: Go example of problematic defer statement
DESCRIPTION: Demonstrates the anti-pattern in Go where a defer statement's arguments are evaluated immediately. This example shows a test function with `defer require.NoError(t, failpoint.Disable(...))` which disables the failpoint prematurely.

SOURCE: https://ast-grep.github.io/catalog/go/defer-func-call-antipattern

LANGUAGE: go
CODE:
```
func TestIssue16696(t *testing.T) {
	alarmRatio := vardef.MemoryUsageAlarmRatio.Load()
	vardef.MemoryUsageAlarmRatio.Store(0.0)
	defer vardef.MemoryUsageAlarmRatio.Store(alarmRatio)
	require.NoError(t, failpoint.Enable("github.com/pingcap/tidb/pkg/executor/sortexec/testSortedRowContainerSpill", "return(true)"))
	defer require.NoError(t,
	   failpoint.Disable(
		"github.com/pingcap/tidb/pkg/executor/sortexec/testSortedRowContainerSpill"
	))
	require.NoError(t, failpoint.Enable("github.com/pingcap/tidb/pkg/executor/join/testRowContainerSpill", "return(true)"))
	defer require.NoError(t,
		failpoint.Disable("github.com/pingcap/tidb/pkg/executor/join/testRowContainerSpill"))
}
```

----------------------------------------

TITLE: Typed Rule Example in ast-grep
DESCRIPTION: Illustrates the typed rule feature in ast-grep, allowing the `kind` property in rule JSON to be typed for enhanced correctness and UX. It shows an example of a correct typed rule.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
interface Rule<M extends TypeMaps> {
    kind: Kinds<M>
    ... // other rules
}
```

LANGUAGE: typescript
CODE:
```
sgNode.find({
  rule: {
    // kind: 'invalid_kind', // error!
    kind: 'function_declaration', // typed!
  }
})
```

----------------------------------------

TITLE: Using llms.txt with Gemini for Ast-grep Documentation
DESCRIPTION: This example demonstrates how to use the `llms.txt` file with Google's Gemini model to reduce hallucinations and improve the accuracy of information retrieval regarding ast-grep. It involves copying the full documentation text and pasting it into an AI chatbot conversation.

SOURCE: https://ast-grep.github.io/blog/more-llm-support

LANGUAGE: English
CODE:
```
1. Visit https://ast-grep.github.io/llms-full.txt and copy the full documentation text
2. Paste these documents into your conversation with your preferred AI chatbot
3. Ask AI questions about ast-grep
```

----------------------------------------

TITLE: Clone Mock Mojo Grammar
DESCRIPTION: Clones a mock Tree-sitter grammar for Mojo from GitHub, used for demonstration purposes in this guide.

SOURCE: https://ast-grep.github.io/advanced/custom-language

LANGUAGE: bash
CODE:
```
git clone https://github.com/HerringtonDarkholme/tree-sitter-mojo.git
```

----------------------------------------

TITLE: Match Function Calls with Prefix using YAML and Regex Constraints
DESCRIPTION: Demonstrates how to match function calls that start with a specific prefix (e.g., 'use' for React Hooks) using ast-grep's YAML rules and regex constraints. It highlights the correct way to define patterns and constraints for meta-variables.

SOURCE: https://ast-grep.github.io/advanced/faq

LANGUAGE: yaml
CODE:
```
rule:
  pattern: $HOOK($$$ARGS)
constraints:
  HOOK: { regex: '^use' }
```

----------------------------------------

TITLE: Semgrep Rule Examples
DESCRIPTION: Semgrep utilizes code patterns to identify and rectify bugs and security vulnerabilities. It supports advanced features for precise matching and offers a broad range of pre-defined rules for various languages and security best practices.

SOURCE: https://ast-grep.github.io/advanced/tool-comparison

LANGUAGE: yaml
CODE:
```
rules:
  - id: example-rule
    patterns:
      - pattern-either:
          - pattern: |
              console.log($FUNC)
          - pattern: |
              console.warn($FUNC)
    message: "Found usage of console.log or console.warn"
    languages:
      - javascript
      - typescript
    severity: INFO
```

----------------------------------------

TITLE: Create New Project with Custom Language in ast-grep
DESCRIPTION: The `ast-grep new` command allows users to select custom languages for new projects, facilitating the setup of projects with specific language requirements.

SOURCE: https://ast-grep.github.io/blog/stars-5000

LANGUAGE: bash
CODE:
```
sg new --lang=python
```

----------------------------------------

TITLE: Migrate OpenAI SDK: Import and Initialization (Python)
DESCRIPTION: This snippet shows how to update Python code to import the 'Client' from the 'openai' library and initialize it. It addresses the breaking change where 'openai.Client' is now used instead of directly accessing 'openai'.

SOURCE: https://ast-grep.github.io/catalog/python/migrate-openai-sdk

LANGUAGE: yaml
CODE:
```
id: import-openai
language: python
rule:
  pattern: import openai
fix: from openai import Client
```

LANGUAGE: yaml
CODE:
```
id: rewrite-client
language: python
rule:
  pattern: openai.api_key = $KEY
fix: client = Client($KEY)
```

----------------------------------------

TITLE: Migrate OpenAI SDK - Python
DESCRIPTION: This rule set helps migrate the OpenAI SDK to its newer version. It includes rules to update import statements, initialize the client with an API key, and change the `Completion.create` method to `client.completions.create`.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: yaml
CODE:
```
id: import-openai
language: python
rule:
  pattern: import openai
fix: from openai import Client
---
id: rewrite-client
language: python
rule:
  pattern: openai.api_key = $KEY
fix: client = Client($KEY)
---
id: rewrite-chat-completion
language: python
rule:
  pattern: openai.Completion.create($$$ARGS)
fix: |-
  client.completions.create(
    $$$ARGS
  )
```

LANGUAGE: python
CODE:
```
import os
import openai
from flask import Flask, jsonify

app = Flask(__name__)openai.api_key = os.getenv("OPENAI_API_KEY")

@app.route("/chat", methods=("POST"))
def index():
    animal = request.form["animal"]
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=generate_prompt(animal),
        temperature=0.6,
    )
    return jsonify(response.choices)
```

LANGUAGE: python
CODE:
```
import os
import openai 
from openai import Client 
from flask import Flask, jsonify

app = Flask(__name__)openai.api_key = os.getenv("OPENAI_API_KEY") 
client = Client(os.getenv("OPENAI_API_KEY")) 

@app.route("/chat", methods=("POST"))
def index():
    animal = request.form["animal"]
    response = openai.Completion.create( 
    response = client.completions.create( 
      model="text-davinci-003",
      prompt=generate_prompt(animal),
      temperature=0.6,
    )
    return jsonify(response.choices)
```

----------------------------------------

TITLE: String Fix Example in YAML
DESCRIPTION: Demonstrates a basic string fix in YAML for ast-grep, replacing a console.log call with a logger.log call using meta variables.

SOURCE: https://ast-grep.github.io/reference/yaml/fix

LANGUAGE: yaml
CODE:
```
rule:
  pattern: console.log($$$ARGS)
fix: logger.log($$$ARGS)
```

----------------------------------------

TITLE: Java Plain Code Search Example
DESCRIPTION: Demonstrates searching for an exact Java code snippet. This method is less common as tools often tokenize queries, but it represents a basic form of code search.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: Java
CODE:
```
try {
  File file = File.createTempFile("foo", "bar");
} catch (IOException e) {
}
```

----------------------------------------

TITLE: TypeScript Example: Console Usage
DESCRIPTION: Provides a TypeScript code example demonstrating the usage of console methods. It includes `console.debug('')` which would be flagged by the rule, and a `try-catch` block where `console.error(e)` is permitted.

SOURCE: https://ast-grep.github.io/catalog/typescript/no-console-except-catch

LANGUAGE: typescript
CODE:
```
console.debug('')
try {
    console.log('hello')
} catch (e) {
    console.error(e) // OK
}
```

----------------------------------------

TITLE: Example React Component Before Reverse Compilation (TSX)
DESCRIPTION: This TSX code demonstrates a React component that utilizes `useCallback` and `useMemo` for optimization. It serves as the input for the Reverse React Compiler to showcase its functionality.

SOURCE: https://ast-grep.github.io/catalog/tsx/reverse-react-compiler

LANGUAGE: tsx
CODE:
```
const Component = () => {
  const [count, setCount] = useState(0)
  const increment = useCallback(() => {
    setCount((prevCount) => prevCount + 1)
  }, [])
  const expensiveCalculation = useMemo(() => {
    // mock Expensive calculation
    return count * 2
  }, [count])

  return (
    <>
      <p>Expensive Result: {expensiveCalculation}</p>
      <button onClick={increment}>{count}</button>
    </>
  )
}
```

----------------------------------------

TITLE: Example: Convert Optional[int] to int | None
DESCRIPTION: Demonstrates the conversion of a Python function argument type hint from `Optional[int]` to `int | None`. The example shows the original function signature and the resulting signature after applying the ast-grep rule for PEP 604 compliance.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: python
CODE:
```
def a(arg: Optional[int]): pass

```

LANGUAGE: python
CODE:
```
def a(arg: Optional[int]): pass
def a(arg: int | None): pass

```

----------------------------------------

TITLE: Update Rule Pattern
DESCRIPTION: An example of updating a rule configuration, specifically modifying the `pattern` to detect the usage of `eval()` in JavaScript code.

SOURCE: https://ast-grep.github.io/guide/scan-project

LANGUAGE: yml
CODE:
```
id: no-eval
message: Add your rule message here....
message: Do not use eval! Dangerous! Hazardous! Perilous!
severity: error
language: JavaScript
rule:
  pattern: Your Rule Pattern here...
  pattern: eval($CODE)
```

----------------------------------------

TITLE: SgNode Find Method Example
DESCRIPTION: Illustrates how to use the find method on an SgNode to locate nodes based on their kind (e.g., 'string') and retrieve their text content.

SOURCE: https://ast-grep.github.io/guide/api-usage/py-api

LANGUAGE: python
CODE:
```
node = root.root()
string = node.find(kind="string")
assert string # assume we can find a string node in the source
print(string.text())
```

----------------------------------------

TITLE: Interactive Edit Session
DESCRIPTION: Shows how to start an interactive edit session using the `-i` or `--interactive` flag, allowing for selective application of changes or editing in a text editor.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
ast-grep run -p 'foo()' -r 'bar()' -i
```

----------------------------------------

TITLE: Run ast-grep with JSON output
DESCRIPTION: This example demonstrates how to run ast-grep with the --json flag to output results in JSON format. This is useful for piping the output to other command-line tools.

SOURCE: https://ast-grep.github.io/guide/tools/json

LANGUAGE: bash
CODE:
```
ast-grep run -p 'Some($A)' -r 'None' --json
```

----------------------------------------

TITLE: Semgrep YAML Rule for Python
DESCRIPTION: An example of a Semgrep rule defined in YAML for Python code. It includes an ID, a pattern placeholder, a message, the target language, and severity.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: yaml
CODE:
```
rules:
  - id: my-pattern-name
    pattern: |
      TODO
    message: "Some message to display to the user"
    languages: [python]
    severity: ERROR
```

----------------------------------------

TITLE: Rust Worker Using Shared Printer (Old)
DESCRIPTION: Illustrates how a `Worker` struct holds a generic `Printer` that is shareable between threads (`Send + Sync`), demonstrating the initial approach to concurrency in ast-grep.

SOURCE: https://ast-grep.github.io/blog/fearless-concurrency

LANGUAGE: rust
CODE:
```
// in the worker thread
struct Worker<P: Printer> {
    // printer is shareable between threads
    // because it implements Send + Sync
    printer: P,
}
impl<P> Worker<P> {
    fn search(&self, file: &File) {
        let results = self.search_in_file(file);
        self.printer.print(results);
    }
    // other methods not using printer...
}
```

----------------------------------------

TITLE: TSX: Example of Nested and Non-Nested Links
DESCRIPTION: This TypeScript example demonstrates correct and incorrect usage of link elements in React. It shows a `Component` function with a nested link, which would trigger a warning, and an `OkayComponent` function with a single link, which is valid.

SOURCE: https://ast-grep.github.io/catalog/tsx

LANGUAGE: tsx
CODE:
```
function Component() {
  return <a href='/destination'>
    <a href='/anotherdestination'>Nested link!</a>
  </a>;
}
function OkayComponent() {
  return <a href='/destination'>
    I am just a link.
  </a>;
}
```

----------------------------------------

TITLE: ast-grep: 'any' Composite Rule Example
DESCRIPTION: Demonstrates the 'any' composite rule, matching a node if at least one of its sub-rules matches. It accepts an array of rules.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yaml
CODE:
```
any:
  - pattern: console.log($ARG)
  - pattern: console.warn($ARG)
  - pattern: console.error($ARG)
```

----------------------------------------

TITLE: Example: Adding Type Hint to Pytest Fixture Argument
DESCRIPTION: Illustrates adding a type hint to a pytest fixture argument. The example shows Python code where a fixture argument 'foo' initially lacks a type hint, and the diff displays the result after applying a rule to add ': int' to it.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: python
CODE:
```
@pytest.fixture
def foo() -> int:
    return 5

@pytest.fixture(scope="function")
def some_fixture(foo) -> str:
    return str(foo)

def regular_function(foo) -> None:
    ...

def test_code(foo) -> None:
    assert foo == 5

```

LANGUAGE: python
CODE:
```
@pytest.fixture
def foo() -> int:
    return 5

@pytest.fixture(scope="function")
def some_fixture(foo) -> str: 
def some_fixture(foo: int) -> str: 
    return str(foo)

def regular_function(foo) -> None:
    ...

def test_code(foo) -> None: 
def test_code(foo: int) -> None: 
    assert foo == 5

```

----------------------------------------

TITLE: Match Specific Package Imports in Go
DESCRIPTION: This rule provides a template for detecting imports of specific packages in Go source code. It's customizable for security auditing, dependency management, and compliance. The rule targets `import_spec` kinds and uses a `regex` pattern to match direct, versioned, subpackage, and grouped imports.

SOURCE: https://ast-grep.github.io/catalog/go

LANGUAGE: yaml
CODE:
```
id: match-package-import
language: go
rule:
  kind: import_spec
  has:
    regex: PACKAGE_PATTERN_HERE
```

----------------------------------------

TITLE: JavaScript code matching await in loops
DESCRIPTION: This JavaScript code block provides examples of different loop structures that contain an 'await' expression. These examples are intended to be matched by the preceding ast-grep rule designed to find 'await' within various loop types.

SOURCE: https://ast-grep.github.io/guide/rule-config/relational-rule

LANGUAGE: javascript
CODE:
```
while (foo) {
  await bar()
}
for (let i = 0; i < 10; i++) {
  await bar()
}
for (let key in obj) {
  await bar()
}
do {
  await bar()
} while (condition)
```

----------------------------------------

TITLE: Example SVG with Hyphenated Attributes (TSX)
DESCRIPTION: An example of a React TSX component rendering an SVG element with attributes like `stroke-linecap` and `fill-opacity` that are not directly compatible with JSX.

SOURCE: https://ast-grep.github.io/catalog/tsx/rename-svg-attribute

LANGUAGE: tsx
CODE:
```
const element = (
  <svg width="100" height="100" viewBox="0 0 100 100">
    <path d="M10 20 L30 40" stroke-linecap="round" fill-opacity="0.5" />
  </svg>
)
```

----------------------------------------

TITLE: ast-grep stream JSON output example
DESCRIPTION: Demonstrates the format of ast-grep's output when using the --json=stream option, where each match is a separate JSON object on a new line.

SOURCE: https://ast-grep.github.io/guide/tools/json

LANGUAGE: bash
CODE:
```
$ ast-grep -p pattern --json=stream
{"text":"Some(matched)", ... }
{"text":"Some(matched)", ... }
{"text":"Some(matched)", ... }
```

----------------------------------------

TITLE: Example Usage of parse and find
DESCRIPTION: Demonstrates how to use the `parse` function to create an ast-grep instance from a JavaScript source string and then use the `find` method on the root node to locate specific code patterns like `console.log`.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: typescript
CODE:
```
import { parse, Lang } from '@ast-grep/napi'

const ast = parse(Lang.JavaScript, source)
const root = ast.root()
root.find("console.log")

```

----------------------------------------

TITLE: Match Go Function Calls Accurately
DESCRIPTION: This rule addresses the ambiguity in matching Go function calls, where type conversions can be mistaken for calls. It uses a contextual pattern within a larger code snippet and the `call_expression` selector to ensure only actual function calls are matched. The pattern is defined within a `context` field, specifying `func t() { fmt.Println($A) }`.

SOURCE: https://ast-grep.github.io/catalog/go

LANGUAGE: yaml
CODE:
```
id: match-function-call
language: go
rule:
  pattern:
    context: 'func t() { fmt.Println($A) }'
    selector: call_expression
```

LANGUAGE: go
CODE:
```
func main() {
    fmt.Println("OK")
}
```

----------------------------------------

TITLE: Replace StageLabel Trait with SystemSet in Rust
DESCRIPTION: This example demonstrates replacing the `StageLabel` trait with `SystemSet` in Rust code using ast-grep. It's a straightforward find-and-replace operation.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: bash
CODE:
```
ast-grep -p 'StageLabel' -r SystemSet -i
```

----------------------------------------

TITLE: Register Custom Language in sgconfig.yml
DESCRIPTION: Example YAML configuration for `sgconfig.yml` to register a custom language, specifying its name and properties.

SOURCE: https://ast-grep.github.io/advanced/custom-language

LANGUAGE: yaml
CODE:
```
customLanguages:
  - name: mojo
    grammar: "src:tree-sitter-mojo"
    filetypes: ["mojo", "mji", "mjp"]
    வுகளில்: "mojo.so"
```

----------------------------------------

TITLE: ast-grep test Command Usage
DESCRIPTION: This snippet shows the basic usage of the `ast-grep test` command. It outlines the command structure and the placeholder for options.

SOURCE: https://ast-grep.github.io/reference/cli/test

LANGUAGE: shell
CODE:
```
ast-grep test [OPTIONS]
```

----------------------------------------

TITLE: Search Nodes Using Keyword Arguments (Rules)
DESCRIPTION: Provides examples of using keyword arguments with the find and find_all methods to search for nodes matching specific patterns, kinds, or combinations of rules.

SOURCE: https://ast-grep.github.io/guide/api-usage/py-api

LANGUAGE: python
CODE:
```
root = SgRoot("print('hello world')", "python")
node = root.root()
node.find(pattern="print($A)") # will return the print function call
node.find(kind="string") # will return the string 'hello world'
# below will return print function call because it matches both rules
node.find(pattern="print($A)", kind="call")
# below will return None because the pattern cannot be a string literal
node.find(pattern="print($A)", kind="string")

strings = node.find_all(kind="string") # will return [SgNode("hello world")]
assert len(strings) == 1
```

----------------------------------------

TITLE: Match 'this.foo' in Getter using Combined Fields (Simplified)
DESCRIPTION: This example demonstrates the simplified ast-grep rule for finding 'this.foo' within a class getter, using combined fields. It reduces nesting compared to the initial example, making the rule easier to understand and maintain.

SOURCE: https://ast-grep.github.io/guide/rule-config/composite-rule

LANGUAGE: yaml
CODE:
```
rule:
  pattern: this.foo
  inside:
    pattern:
      context: class A { get $GETTER() { $$$ } }
      selector: method_definition
    inside:
        kind: class_body
    stopBy:
      any:
        - kind: object
        - kind: class_body
```

----------------------------------------

TITLE: Configure Test Cases (YAML)
DESCRIPTION: Defines valid and invalid code examples for testing a specific ast-grep rule. 'valid' contains code expected to pass, while 'invalid' contains code expected to fail.

SOURCE: https://ast-grep.github.io/guide/test-rule

LANGUAGE: yaml
CODE:
```
id: no-await-in-loop
valid:
  - for (let a of b) { console.log(a) }
  # ....
invalid:
  - async function foo() { for (var bar of baz) await bar; }
  # ....

```

----------------------------------------

TITLE: Ruby: Migrate *_filter to *_action
DESCRIPTION: This snippet demonstrates the ast-grep rule for migrating `before_filter`, `after_filter`, and `around_filter` to `before_action`, `after_action`, and `around_action` in Ruby on Rails controllers. It includes the YAML configuration for the rule and examples of the code before and after the migration.

SOURCE: https://ast-grep.github.io/catalog/ruby/migrate-action-filter

LANGUAGE: yaml
CODE:
```
id: migration-action-filter
language: ruby
rule:
  any:
    - pattern: before_filter $$$ACTION
    - pattern: around_filter $$$ACTION
    - pattern: after_filter $$$ACTION
  has:
    pattern: $FILTER
    field: method
fix:
  $NEW_ACTION $$$ACTION
transform:
  NEW_ACTION:
    replace:
      source: $FILTER
      replace: _filter
      by: _action
```

LANGUAGE: ruby
CODE:
```
class TodosController < ApplicationController
  before_filter :authenticate
  around_filter :wrap_in_transaction, only: :show
  after_filter do |controller|
    flash[:error] = "You must be logged in"
  end

  def index
    @todos = Todo.all
  end
end
```

LANGUAGE: ruby
CODE:
```
class TodosController < ApplicationController
  before_action :authenticate
  before_filter :authenticate
  around_action :wrap_in_transaction, only: :show
  around_filter :wrap_in_transaction, only: :show
  after_action do |controller|  
     flash[:error] = "You must be logged in"
  end
  after_filter do |controller|
    flash[:error] = "You must be logged in"
  end

  def index
    @todos = Todo.all
  end
end
```

----------------------------------------

TITLE: TSX Example: Unnecessary vs. True React Hooks
DESCRIPTION: This TSX code snippet demonstrates functions that are unnecessarily prefixed with 'use' and a function that is a true React hook. It serves as an example for the ast-grep rule to identify and refactor components that don't require hook implementation.

SOURCE: https://ast-grep.github.io/catalog/tsx/unnecessary-react-hook

LANGUAGE: tsx
CODE:
```
function useIAmNotHookActually(args) {
    console.log('Called in React but I dont need to be a hook')
    return args.length
}
const useIAmNotHookToo = (...args) => {
    console.log('Called in React but I dont need to be a hook')
    return args.length
}

function useTrueHook() {
    useEffect(() => {
      console.log('Real hook')
    })
}
```

----------------------------------------

TITLE: Search and Rewrite Code with ast-grep
DESCRIPTION: Use ast-grep to perform structural search and replace operations on code. This example demonstrates finding patterns like '$A && $A()' and rewriting them to '$A?.()'.

SOURCE: https://ast-grep.github.io/index

LANGUAGE: shell
CODE:
```
ast-grep -p '$A && $A()' -r '$A?.()'
```

----------------------------------------

TITLE: JavaScript CST Example
DESCRIPTION: This snippet shows the Concrete Syntax Tree (CST) representation of the same JavaScript expression. CSTs are more faithful to the original code, including all details like operators.

SOURCE: https://ast-grep.github.io/advanced/core-concepts

LANGUAGE: plaintext
CODE:
```
binary_expression
  number
  +
  number
```

----------------------------------------

TITLE: Rust Printer Trait and StdoutPrinter (New)
DESCRIPTION: Presents the updated `Printer` trait without `Send + Sync` bounds and a `StdoutPrinter` implementation using a direct mutable reference to `Stdout`, simplifying the printing process.

SOURCE: https://ast-grep.github.io/blog/fearless-concurrency

LANGUAGE: rust
CODE:
```
trait Printer {
    fn print(&mut self, result: ...);
}
// stdout printer implementation
struct StdoutPrinter {
    output: Stdout, // no more Mutex
}
impl Printer for StdoutPrinter {
    fn print(&mut self, result: ...) {
        writeln!(self.output, "{}", result).unwrap();
    }
}
```

----------------------------------------

TITLE: JavaScript AST Example
DESCRIPTION: This snippet illustrates the Abstract Syntax Tree (AST) representation of a simple JavaScript expression. ASTs simplify code by omitting details like operators and punctuation.

SOURCE: https://ast-grep.github.io/advanced/core-concepts

LANGUAGE: plaintext
CODE:
```
binary_expression
  number
  number
```

----------------------------------------

TITLE: Precise Code Transformation with expandStart/expandEnd
DESCRIPTION: Utilize `expandStart` and `expandEnd` in ast-grep rules to precisely control the range of code that gets transformed or fixed, offering more granular control over code modifications.

SOURCE: https://ast-grep.github.io/blog/stars-5000

LANGUAGE: yaml
CODE:
```
id: example
rule:
  pattern: "if ($condition) {
    $body
  }"
  expandStart: "$condition"
  expandEnd: "$body"
fix:
  - replace: "while ($condition) {
    $body
  }"
```

----------------------------------------

TITLE: Migrate XState withConfig to provide
DESCRIPTION: This rule targets the `withConfig` method in XState and replaces it with the `provide` method, which is the v5 equivalent for configuring machines.

SOURCE: https://ast-grep.github.io/catalog/typescript/migrate-xstate-v5

LANGUAGE: yaml
CODE:
```
id: migrate-to-provide
rule: { pattern: $MACHINE.withConfig }
fix: $MACHINE.provide
```

----------------------------------------

TITLE: IntelliJ Structural Search Replace (Java Example)
DESCRIPTION: IntelliJ Structural Search Replace is an IDE feature for searching and replacing code based on structural patterns. It is integrated within the IntelliJ IDE and currently supports languages like Java, Kotlin, and Groovy.

SOURCE: https://ast-grep.github.io/advanced/tool-comparison

LANGUAGE: java
CODE:
```
// Search Template:
System.out.println($VAR$);

// Replacement Template:
logger.info($VAR$);
```

----------------------------------------

TITLE: ast-grep scan: Rule Option
DESCRIPTION: Scans the codebase using a single rule defined in a specified file. This option conflicts with `--config` and is useful for running individual rules without a full project setup.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan -r, --rule <RULE_FILE>
```

----------------------------------------

TITLE: Find Struct Inheritance
DESCRIPTION: This rule identifies struct inheritance patterns in C++ code, providing a simple example for analysis.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: C++
CODE:
```
kind: "class"
pattern: "class $A : public $B {...}"
```

----------------------------------------

TITLE: Detect problematic defer statements with function calls
DESCRIPTION: This rule identifies problematic `defer` statements that involve function calls in Go. It serves as a simple pattern example for detection.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Go
CODE:
```
kind: "statement"
pattern: "defer $A($B)"
```

----------------------------------------

TITLE: Example TypeScript Code for Import Usage
DESCRIPTION: This TypeScript code snippet demonstrates the usage of an imported module, specifically `MongoClient` from the `mongodb` package, which can be targeted by the 'find-import-usage' rule.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-usage

LANGUAGE: typescript
CODE:
```
import { MongoClient } from 'mongodb';
const url = 'mongodb://localhost:27017';
async function run() {
  const client = new MongoClient(url);
}
```

----------------------------------------

TITLE: FixConfig with expandEnd for YAML
DESCRIPTION: Shows an advanced FixConfig example in YAML for ast-grep. It removes a key-value pair and its trailing comma by expanding the fix range to include the comma.

SOURCE: https://ast-grep.github.io/reference/yaml/fix

LANGUAGE: yaml
CODE:
```
rule:
  kind: pair
  has:
    field: key
    regex: Remove
# remove the key-value pair and its comma
fix:
  template: ''
  expandEnd: { regex: ',' } # expand the range to the comma
```

----------------------------------------

TITLE: ast-grep: 'matches' Composite Rule Example
DESCRIPTION: Shows the 'matches' composite rule, which matches a node based on a predefined utility rule ID. Requires defining utility rules separately.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yaml
CODE:
```
utils:
  isFunction:
    any:
      - kind: function_declaration
      - kind: function
rule:
  matches: isFunction
```

----------------------------------------

TITLE: Run ast-grep Scan (Before Optimization)
DESCRIPTION: This command demonstrates how to scan a TypeScript project using ast-grep with a specified configuration file. The output is redirected to /dev/null. The provided performance metrics show the execution time before optimizations.

SOURCE: https://ast-grep.github.io/blog/optimize-ast-grep

LANGUAGE: bash
CODE:
```
ast-grep scan -c eslint/sgconfig.yml TypeScript/src --json > /dev/null
11.57s user, 0.48s system, 330% cpu, 3.644 total
```

----------------------------------------

TITLE: Rewrite `indoc!` macro
DESCRIPTION: This rule focuses on rewriting the `indoc!` macro, likely in Rust, providing a simple pattern example for the transformation process.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Rust
CODE:
```
kind: "macro_invocation"
pattern: "indoc!($A)"
```

----------------------------------------

TITLE: Get Digit Count in usize using checked_ilog10 (Rust)
DESCRIPTION: This Rust code snippet efficiently calculates the number of digits in a `usize` number. It uses `checked_ilog10` to find the integer logarithm base 10 and adds 1. This method avoids string allocation and is faster than converting the number to a string. `unwrap_or(0)` handles the case where the input is zero.

SOURCE: https://ast-grep.github.io/catalog/rust/get-digit-count-in-usize

LANGUAGE: rust
CODE:
```
num.checked_ilog10().unwrap_or(0) + 1
```

----------------------------------------

TITLE: ast-grep DSL: Similar Syntax, Different Meanings
DESCRIPTION: Demonstrates a common DSL design pitfall where similar syntax appearances can have different meanings. This example shows syntax nodes, pattern calls, and predicate calls that resemble function calls but serve distinct purposes.

SOURCE: https://ast-grep.github.io/blog/yaml-vs-dsl

LANGUAGE: JavaScript
CODE:
```
// this is a syntax node call
augmented_assignment_expression(operator = $op)
pattern console_method_to_info($method) {
  `console.$method($message)` => `console.info($message)`
}
// this is a pattern call
console_method_to_info(method = `log`)
predicate program_contains_logger() {
  $program <: contains `logger`
}
// this is a predicate call
program_contains_logger()

// define a lines function
function lines($string) {
    return split($string, separator=`\n`)
}
// this is a function call
lines(string = $message)
```

----------------------------------------

TITLE: Fix Doc-Tests after Refactoring
DESCRIPTION: This example shows how to manually fix Bevy doc-tests after automated refactoring. It addresses the issue where `add_system_to_stage` calls in comments were not updated by the refactoring tool, requiring manual changes to `add_system` with `in_set`.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: Rust
CODE:
```
-//!         .add_system_to_stage(BigBrainStage::Actions, drink_action_system)
-//!         .add_system_to_stage(BigBrainStage::Scorers, thirsty_scorer_system)
+//!         .add_system(drink_action_system.in_set(BigBrainStage::Actions))
+//!         .add_system(thirsty_scorer_system.in_set(BigBrainStage::Scorers))
```

----------------------------------------

TITLE: Run `ast-grep` Command
DESCRIPTION: Demonstrates the basic usage of the `ast-grep run` command, including pattern matching and path specification. This is the default command when running the CLI.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
ast-grep run [OPTIONS] --pattern <PATTERN> [PATHS]...
```

----------------------------------------

TITLE: Get Meta Variables from Search Results
DESCRIPTION: Demonstrates how to retrieve meta-variables from matched nodes using `getMatch` for single variables and `getMultipleMatches` for multiple variables.

SOURCE: https://ast-grep.github.io/guide/api-usage/js-api

LANGUAGE: TypeScript
CODE:
```
export class SgNode {
  getMatch(m: string): SgNode | null
  getMultipleMatches(m: string): Array<SgNode>
}
```

LANGUAGE: JavaScript
CODE:
```
const src = `
console.log('hello')
logger('hello', 'world', '!')
`
const root = parse(Lang.JavaScript, src).root()
const node = root.find('console.log($A)')
const arg = node.getMatch("A") // returns SgNode('hello')
arg !== null // true, node is found
arg.text() // returns 'hello'
// returns [] because $A and $$$A are different
node.getMultipleMatches('A')

const logs = root.find('logger($$$ARGS)')
// returns [SgNode('hello'), SgNode(','), SgNode('world'), SgNode(','), SgNode('!')]
logs.getMultipleMatches("ARGS")
logs.getMatch("A") // returns null
```

----------------------------------------

TITLE: Rust Code Example: Before Refactoring
DESCRIPTION: This is the original Rust code snippet before the refactoring operation. It features an 'indoc!' macro containing a Rust raw string literal with CSS-like content.

SOURCE: https://ast-grep.github.io/catalog/rust

LANGUAGE: rust
CODE:
```
fn main() {
    indoc! {r#"
        .foo {
            order: 1;
        }
    "#};
}
```

----------------------------------------

TITLE: Match Dynamic Content with Meta Variables
DESCRIPTION: Shows how to use meta variables (e.g., $META_VARIABLE) to match dynamic content within patterns. These act as wildcards for single AST nodes and can be named for clarity.

SOURCE: https://ast-grep.github.io/guide/pattern-syntax

LANGUAGE: javascript
CODE:
```
function tryAstGrep() {
  console.log('Hello World')
}

const multiLineExpression =
  console
   .log('Also matched!')
```

----------------------------------------

TITLE: Rust Worker Sending Results via Channel (New)
DESCRIPTION: Shows the refactored `Worker` struct which now holds a `Sender` for an mpsc channel. The `search` method sends results to the channel instead of directly calling a printer.

SOURCE: https://ast-grep.github.io/blog/fearless-concurrency

LANGUAGE: rust
CODE:
```
struct Worker {
    sender: Sender<...>, 
}

impl Worker {
    fn search(&self, file: &File) {
        let results = self.search_in_file(file);
        self.sender.send(results).unwrap();
    }
    // other methods, no generic used
}
```

----------------------------------------

TITLE: Migrate add_system_to_stage to add_systems
DESCRIPTION: This snippet demonstrates how to refactor Bevy's `add_system_to_stage` to the newer `add_systems` API using ast-grep. It targets the specific pattern of adding a system to a stage and converts it to using `in_base_set` or `in_set` for better organization.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: Shell
CODE:
```
ast-grep \
  -p '$APP.add_system_to_stage($STAGE, $SYS)' \
  -r '$APP.add_system($SYS.in_base_set($STAGE))' -i
```

LANGUAGE: Rust
CODE:
```
app.add_system_to_stage(BigBrainStage::Thinkers, thinker::thinker_system);
// After:
app.add_system(thinker::thinker_system.in_base_set(BigBrainStage::Thinkers));
```

----------------------------------------

TITLE: C: Diff after Rewriting Method Call
DESCRIPTION: Illustrates the 'diff' or the result of applying the ast-grep rule to the example C code. It shows the transformation from the original method call syntax to the refactored function call syntax.

SOURCE: https://ast-grep.github.io/catalog/c/rewrite-method-to-function-call

LANGUAGE: c
CODE:
```
void test_func() {
    some_struct->field.method();
    method(&some_struct->field);
    some_struct->field.other_method(1, 2, 3);
    other_method(&some_struct->field, 1, 2, 3);
}
```

----------------------------------------

TITLE: ast-grep: 'not' Composite Rule Example
DESCRIPTION: Illustrates the 'not' composite rule, which matches a node if its single sub-rule does not match. It takes a single rule object.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yaml
CODE:
```
not:
  pattern: console.log($ARG)
```

----------------------------------------

TITLE: Detect JWT Library Import in Go
DESCRIPTION: This Go code example demonstrates how to use ast-grep to detect the import of the JWT library. It includes a main function that creates and signs a JWT token, highlighting the import statement that the ast-grep rule would match.

SOURCE: https://ast-grep.github.io/catalog/go/match-package-import

LANGUAGE: go
CODE:
```
package main

import (
	"fmt"
	"github.com/golang-jwt/jwt" // This matches the AST rule
)

func main() {
	token := jwt.New(jwt.SigningMethodHS256) // Create a new token
	// Add some claims
	token.Claims = jwt.MapClaims{"user": "alice", "role": "admin"}
	tokenString, err := token.SignedString([]byte("my-secret")) // Sign the token
	if err != nil {
		fmt.Printf("Error signing token: %v\n", err)
		return
	}
	fmt.Printf("Generated token: %s\n", tokenString)
}
```

----------------------------------------

TITLE: TypeScript Example of TypeMap with Subtypes
DESCRIPTION: Demonstrates the use of the 'subtypes' property in the TypeMap for TypeScript, showing how 'declaration' acts as an alias for other node kinds like 'class_declaration' and 'function_declaration'.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
type TypeScript = {
  // node type alias
  declaration: {
    type: "declaration",
    subtypes: [
      { type: "class_declaration", named: true },
      { type: "function_declaration", named: true },
    ]
  },
  ...
}
```

----------------------------------------

TITLE: ast-grep scan Usage
DESCRIPTION: The basic usage of the `ast-grep scan` command, showing how to specify options and target paths for code scanning.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan [OPTIONS] [PATHS]...
```

----------------------------------------

TITLE: Fix Problematic JSON Tags with Dash Prefix in Go
DESCRIPTION: This snippet shows the correct way to omit a field from JSON marshaling/unmarshaling in Go by using just `-` without a comma in the JSON tag.

SOURCE: https://ast-grep.github.io/catalog/go

LANGUAGE: Go
CODE:
```
type User struct {
    Username string `json:"username,omitempty"`
    Password string `json:"password,omitempty"`
    IsAdmin  bool   `json:"-"`  // Correctly prevents marshaling/unmarshaling
}
```

----------------------------------------

TITLE: Python Type Hint Transformation Example (Output)
DESCRIPTION: This Python code snippet shows the result after applying the recursive rewriting rules to the input type hint, demonstrating the transformation of Optional and Union types.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: python
CODE:
```
results:  Optional[Union[List[Union[str, dict]], str]] 
results:  List[str | dict] | str | None

```

----------------------------------------

TITLE: Get Matches from SgNode in Python
DESCRIPTION: Demonstrates how to retrieve single or multiple meta-variable matches from an SgNode using get_match and get_multiple_matches. Also shows the equivalent __getitem__ for single matches.

SOURCE: https://ast-grep.github.io/guide/api-usage/py-api

LANGUAGE: python
CODE:
```
class SgNode:
    def get_match(self, meta_var: str) -> Optional[SgNode]: ...
    def get_multiple_matches(self, meta_var: str) -> List[SgNode]: ...
    def __getitem__(self, meta_var: str) -> SgNode: ...
```

LANGUAGE: python
CODE:
```
src = """
print('hello')
logger('hello', 'world', '!')
"""
root = SgRoot(src, "python").root()
node = root.find(pattern="print($A)")
arg = node.get_match("A") # returns SgNode('hello')
assert arg # assert node is found
arg.text() # returns 'hello'
# returns [] because $A and $$$A are different
node.get_multiple_matches("A")

logs = root.find(pattern="logger($$$ARGS)")
# returns [SgNode('hello'), SgNode(','), SgNode('world'), SgNode(','), SgNode('!')]
logs.get_multiple_matches("ARGS")
logs.get_match("A") # returns None
```

LANGUAGE: python
CODE:
```
node = root.find(pattern="print($A)")
# node.get_match("A").text() # error: node.get_match("A") can be None
node["A"].text() # Ok
```

----------------------------------------

TITLE: AI-Powered Ast-grep Rule Creation with Codemod Studio
DESCRIPTION: Codemod Studio leverages an AI assistant to help users write ast-grep rules using natural language. Users describe their goal, the AI suggests a pattern, and users can refine and test it against their codebase.

SOURCE: https://ast-grep.github.io/blog/more-llm-support

LANGUAGE: English
CODE:
```
* **Describe your goal** : In plain English, explain what you want to achieve with your ast-grep rule (e.g., "Find all instances of `console.log`").
* **AI assistance** : The AI analyzes your description and suggests an appropriate ast-grep pattern.
* **Refine and test** : You can then refine the generated rule, test it against your codebase, and iterate until it meets your needs.
```

----------------------------------------

TITLE: Rust Printer Trait and StdoutPrinter (Old)
DESCRIPTION: Defines the `Printer` trait requiring `Send + Sync` for thread safety and provides a `StdoutPrinter` implementation that uses a `Mutex` to protect shared stdout access.

SOURCE: https://ast-grep.github.io/blog/fearless-concurrency

LANGUAGE: rust
CODE:
```
trait Printer: Send + Sync {
    fn print(&self, result: ...);
}

// demo Printer implementation
struct StdoutPrinter {
    // output is shared between threads
    output: Mutex<Stdout>,
}
impl Printer for StdoutPrinter {
    fn print(&self, result: ...) {
        // lock the output to print
        let stdout = self.output.lock().unwrap();
        writeln!(stdout, "{}", result).unwrap();
    }
}
```

----------------------------------------

TITLE: Diff of i18n Key Extraction in HTML
DESCRIPTION: This diff shows the result of applying the 'extract-i18n-key' rule to the example HTML. The static 'Hello' text has been replaced with '{{ $(\'Hello\') }}', while the dynamic text remains unchanged.

SOURCE: https://ast-grep.github.io/catalog/html/extract-i18n-key

LANGUAGE: html
CODE:
```
<template>
  <span>Hello</span> // [!code --]
  <span>{{ $(\'Hello\') }}</span> // [!code ++]
  <span>{{ text }}</span>
</template>
```

----------------------------------------

TITLE: ast-grep: 'has' Relational Rule Example
DESCRIPTION: Demonstrates the 'has' relational rule in ast-grep, which matches a node if it has a descendant matching a sub-rule. Includes 'kind', 'stopBy', and 'field' options.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yaml
CODE:
```
has:
  kind: property_identifier    # a sub rule object
  stopBy: end                  # stopBy accepts 'end', 'neighbor' or another rule object.
  field: name                  # specify the sub-node in the target
```

----------------------------------------

TITLE: Rust Code Example: After Refactoring (Diff)
DESCRIPTION: This Rust code snippet shows the result of the refactoring operation. The 'indoc!' macro and its delimiters have been removed, and the inner content is now enclosed in backticks.

SOURCE: https://ast-grep.github.io/catalog/rust

LANGUAGE: rust
CODE:
```
fn main() {
    indoc! {r#" // [!code --] 
    `.foo {    // [!code ++] 
        order: 1;
    }
    "#};
        `; 
}
```

----------------------------------------

TITLE: Python: Example of Optional[Type] to Type | None Conversion
DESCRIPTION: Demonstrates the transformation of a Python function signature using `Optional[int]` to the preferred `int | None` syntax, as recommended by PEP 604.

SOURCE: https://ast-grep.github.io/catalog/python/optional-to-none-union

LANGUAGE: python
CODE:
```
def a(arg: Optional[int]): pass
```

LANGUAGE: python
CODE:
```
def a(arg: int | None): pass
```

----------------------------------------

TITLE: Match Multiple Nodes with Multi Meta Variables
DESCRIPTION: Explains the use of multi meta variables (e.g., $$$) to match zero or more AST nodes, commonly used for function arguments, parameters, or statements.

SOURCE: https://ast-grep.github.io/guide/pattern-syntax

LANGUAGE: javascript
CODE:
```
console.log()                       // matches zero AST node
console.log('hello world')          // matches one node
console.log('debug: ', key, value)  // matches multiple nodes
console.log(...args)                // it also matches spread
```

----------------------------------------

TITLE: Migrate OpenAI SDK: Update Completion Method (Python)
DESCRIPTION: This snippet demonstrates refactoring Python code to use the new 'completions' method instead of the deprecated 'Completion.create' from the OpenAI API. It shows how to transform calls like 'openai.Completion.create(...)' to 'client.completions.create(...)'.

SOURCE: https://ast-grep.github.io/catalog/python/migrate-openai-sdk

LANGUAGE: yaml
CODE:
```
id: rewrite-chat-completion
language: python
rule:
  pattern: openai.Completion.create($$$ARGS)
fix: |-
  client.completions.create(
    $$$ARGS
  )
```

----------------------------------------

TITLE: JavaScript Pattern Matching with Strictness
DESCRIPTION: Shows a JavaScript example of a pattern `function $A() {}` and how the default 'smart' strictness in ast-grep matches both regular and async functions by skipping the 'async' keyword (an unnamed node).

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: javascript
CODE:
```
// function $A() {}
function foo() {}    // matched
async function bar() {} // matched
```

----------------------------------------

TITLE: Apply Multiple Rewriters (Integer and String) in YAML
DESCRIPTION: This example illustrates how to define two separate rewriters, one for integers and one for strings, and then apply both to a list of nodes using the 'rewrite' transformation.

SOURCE: https://ast-grep.github.io/guide/rewrite/rewriter

LANGUAGE: yaml
CODE:
```
rewriters:
- id: rewrite-int
  rule: {kind: integer}
  fix: integer
- id: rewrite-str
  rule: {kind: string}
  fix: string
```

----------------------------------------

TITLE: Use Alternative Joiner for Rewritten Nodes in YAML
DESCRIPTION: This example demonstrates how to use the 'joinBy' field within the 'rewrite' transformation to specify a custom separator (' + ') for joining multiple transformed sub-nodes.

SOURCE: https://ast-grep.github.io/guide/rewrite/rewriter

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR:
    rewrite:
      rewriters: [rewrite-num, rewrite-str]
      source: $$$LIST
      joinBy: ' + '
```

----------------------------------------

TITLE: Match node by character range
DESCRIPTION: This rule matches an AST node based on its character span, defined by a start (inclusive) and end (exclusive) position.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
range:
  start: { line: 0, column: 0 }
  end: { line: 0, column: 13 }
```

----------------------------------------

TITLE: Example GraphQL Injection Match Result
DESCRIPTION: This output shows the result of an ast-grep search for a GraphQL fragment spread within a JavaScript file. It highlights the specific line and characters that match the search pattern.

SOURCE: https://ast-grep.github.io/advanced/language-injection

LANGUAGE: shell
CODE:
```
help[test]:
  ┌─ relay.js:8:7
  │
8 │       ...ArtistDescription_artist
  │       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
```

----------------------------------------

TITLE: ast-grep: 'precedes' Relational Rule Example
DESCRIPTION: Illustrates the 'precedes' relational rule, matching a node that appears before another node matching a sub-rule. It uses 'kind' and 'stopBy' but not 'field'.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yaml
CODE:
```
precedes:
  kind: function_declaration   # a sub rule object
  stopBy: end                  # stopBy accepts 'end', 'neighbor' or another rule object.
```

----------------------------------------

TITLE: ast-grep New Command Usage
DESCRIPTION: Creates new ast-grep projects, rules, tests, or utilities with options for language, defaults, and base directory.

SOURCE: https://ast-grep.github.io/reference/cli

LANGUAGE: shell
CODE:
```
ast-grep new [COMMAND] [OPTIONS] [NAME]
ast-grep new project
ast-grep new rule
ast-grep new test
ast-grep new util
ast-grep new help
ast-grep new -l LANG
ast-grep new --lang LANG
ast-grep new -y
ast-grep new --yes
ast-grep new -b BASE_DIR
ast-grep new --base-dir BASE_DIR
ast-grep new -h
ast-grep new --help
```

----------------------------------------

TITLE: ast-grep: 'follows' Relational Rule Example
DESCRIPTION: Shows the 'follows' relational rule, which matches a node that appears after another node matching a sub-rule. It supports 'kind' and 'stopBy', but not 'field'.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yaml
CODE:
```
follows:
  kind: function_declaration   # a sub rule object
  stopBy: end                  # stopBy accepts 'end', 'neighbor' or another rule object.
```

----------------------------------------

TITLE: Define Test Cases for 'no-await-in-loop' Rule
DESCRIPTION: Provides example valid and invalid code snippets to test the 'no-await-in-loop' rule. The `valid` array contains code that should not trigger the rule, while the `invalid` array contains code that should.

SOURCE: https://ast-grep.github.io/guide/test-rule

LANGUAGE: yaml
CODE:
```
id: no-await-in-loop
valid:
  - for (let a of b) { console.log(a) }
  # .... more valid test cases
invalid:
  - async function foo() { for (var bar of baz) await bar; }
  # .... more invalid test cases
```

----------------------------------------

TITLE: Diff: OpenAI SDK Migration Applied (Python)
DESCRIPTION: This Python code snippet displays the 'diff' after applying the ast-grep rules for OpenAI SDK migration. It highlights the changes made, including the import of 'Client', the initialization of 'client', and the updated method call for completions.

SOURCE: https://ast-grep.github.io/catalog/python/migrate-openai-sdk

LANGUAGE: python
CODE:
```
import os
import openai 
from openai import Client 
from flask import Flask, jsonify

app = Flask(__name__)
openai.api_key = os.getenv("OPENAI_API_KEY") 
client = Client(os.getenv("OPENAI_API_KEY")) 

@app.route("/chat", methods=("POST"))
def index():
    animal = request.form["animal"]
    response = openai.Completion.create( 
    response = client.completions.create( 
      model="text-davinci-003",
      prompt=generate_prompt(animal),
      temperature=0.6,
    )
    return jsonify(response.choices)
```

----------------------------------------

TITLE: Refactored Imports after Optimization (TypeScript)
DESCRIPTION: This shows the result of applying the ast-grep rule and rewriter to the example barrel import. Each identifier is now imported directly from its specific file within the barrel.

SOURCE: https://ast-grep.github.io/catalog/typescript/speed-up-barrel-import

LANGUAGE: typescript
CODE:
```
import {a, b, c} from './barrel'
import a from './barrel/a'
import b from './barrel/b'
import c from './barrel/c'
```

----------------------------------------

TITLE: Rule Configuration (YAML)
DESCRIPTION: Shows the basic structure of a rule configuration file in YAML format. It includes fields for rule ID, message, severity, target language, and the pattern to match.

SOURCE: https://ast-grep.github.io/guide/scan-project

LANGUAGE: yml
CODE:
```
id: no-eval
message: Add your rule message here....
severity: error # error, warning, hint, info
language: JavaScript
rule:
  pattern: Your Rule Pattern here...
# utils: Extract repeated rule as local utility here.
# note: Add detailed explanation for the rule.
```

----------------------------------------

TITLE: Python: Convert Generator to List Comprehension
DESCRIPTION: Shows a Python example of using ast-grep's `transform` feature to convert a generator expression within a `join` call to a list comprehension.

SOURCE: https://ast-grep.github.io/guide/rewrite/transform

LANGUAGE: python
CODE:
```
"""Example of Converting Generator in Python"""
# This rule will convert the generator inside `join` to a list.
```

----------------------------------------

TITLE: Extract Substring in String Style
DESCRIPTION: This example shows the string-style syntax for the 'substring' transformation, enabling the extraction of a part of a meta-variable. It takes the source variable and slicing parameters like 'startChar' and 'endChar'.

SOURCE: https://ast-grep.github.io/reference/yaml/transformation

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR: substring($VAR, startChar=1, endChar=-1)
```

----------------------------------------

TITLE: Display ast-grep Help Information
DESCRIPTION: This flag prints the help message for ast-grep, providing a summary of available commands and options. A more detailed summary can be obtained using '-h'.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: bash
CODE:
```
-h, --help
```

----------------------------------------

TITLE: Match Simple Expressions with Pattern
DESCRIPTION: Demonstrates how ast-grep's pattern syntax can match simple expressions like 'a + 1' across different code structures, including variable assignments, function calls, and nested objects.

SOURCE: https://ast-grep.github.io/guide/pattern-syntax

LANGUAGE: javascript
CODE:
```
const b = a + 1

funcCall(a + 1)

deeplyNested({
  target: a + 1
})
```

----------------------------------------

TITLE: TSX: React Component with Memoization
DESCRIPTION: This TypeScript example showcases a React component that utilizes `useState`, `useCallback`, and `useMemo` for state management and optimization. It demonstrates how these hooks can be used to memoize functions and expensive calculations.

SOURCE: https://ast-grep.github.io/catalog/tsx

LANGUAGE: tsx
CODE:
```
const Component = () => {
  const [count, setCount] = useState(0)
  const increment = useCallback(() => {
    setCount((prevCount) => prevCount + 1)
  }, [])
  const expensiveCalculation = useMemo(() => {
    // mock Expensive calculation
    return count * 2
  }, [count])

  return (
    <>
      <p>Expensive Result: {expensiveCalculation}</p>
      <button onClick={increment}>{count}</button>
    </>
  )
}
```

----------------------------------------

TITLE: Beware of char offset when iterate over a string
DESCRIPTION: This rule warns about potential issues with character offsets when iterating over strings, particularly in Rust. It provides a simple pattern example for detection.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Rust
CODE:
```
kind: "string"
pattern: "for $A in $B.chars().enumerate()"
```

----------------------------------------

TITLE: ast-grep scan: Interactive Option
DESCRIPTION: Starts an interactive editing session, allowing confirmation and selective application of code changes, or opening a text editor for tweaking matched code. Code rewriting only occurs within this session.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan -i, --interactive
```

----------------------------------------

TITLE: Equivalent 'all' Rule for Simplified Field Combination
DESCRIPTION: This example provides the equivalent 'all' composite rule for the simplified field combination. It explicitly lists the 'pattern' and 'inside' rules, showing how they function identically to the combined field approach.

SOURCE: https://ast-grep.github.io/guide/rule-config/composite-rule

LANGUAGE: yaml
CODE:
```
all:
  - pattern: this.foo
  - inside:
      kind: class_body
```

----------------------------------------

TITLE: Project Configuration for Global Utility Rules in YML
DESCRIPTION: This YML file configures an ast-grep project, specifying the directories for regular rules ('rules') and utility rules ('utils'). This setup is necessary for ast-grep to locate and utilize global utility rules.

SOURCE: https://ast-grep.github.io/guide/rule-config/utility-rule

LANGUAGE: yml
CODE:
```
ruleDirs:
  - rules
utilDirs:
  - utils
```

----------------------------------------

TITLE: Follow Symbolic Links
DESCRIPTION: Explains the `--follow` flag, which instructs `ast-grep` to follow symbolic links during directory traversal.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
ast-grep run --follow
```

----------------------------------------

TITLE: Run Tests After Refactoring
DESCRIPTION: This command shows how to verify the correctness of refactored code by running all tests. It's a crucial step after applying automated changes to ensure no regressions or new errors have been introduced.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: Shell
CODE:
```
cargo test
```

----------------------------------------

TITLE: Detect Problematic Defer Statements in Go
DESCRIPTION: This rule identifies a Go anti-pattern where defer statements contain function calls with parameters evaluated immediately. It helps prevent ineffective tests by ensuring deferred function arguments are evaluated at the time of execution, not when the defer statement is encountered. The pattern targets `defer $A.$B(t, failpoint.$M($$$))` within `defer_statement` selectors.

SOURCE: https://ast-grep.github.io/catalog/go

LANGUAGE: shell
CODE:
```
ast-grep \
  --lang go \
  --pattern '{ defer $A.$B(t, failpoint.$M($$$)) }' \
  --selector defer_statement
```

LANGUAGE: go
CODE:
```
func TestIssue16696(t *testing.T) {
	alarmRatio := vardef.MemoryUsageAlarmRatio.Load()
	vardef.MemoryUsageAlarmRatio.Store(0.0)
	defer vardef.MemoryUsageAlarmRatio.Store(alarmRatio)
	require.NoError(t, failpoint.Enable("github.com/pingcap/tidb/pkg/executor/sortexec/testSortedRowContainerSpill", "return(true)"))
	defer require.NoError(t,
	   failpoint.Disable(
		"github.com/pingcap/tidb/pkg/executor/sortexec/testSortedRowContainerSpill"
	))
	require.NoError(t, failpoint.Enable("github.com/pingcap/tidb/pkg/executor/join/testRowContainerSpill", "return(true)"))
	defer require.NoError(t,
		failpoint.Disable("github.com/pingcap/tidb/pkg/executor/join/testRowContainerSpill"))
}
```

LANGUAGE: go
CODE:
```
defer func() {
    require.NoError(t, failpoint.Disable("some/path"))
}()
```

----------------------------------------

TITLE: Specify Configuration File Path with ast-grep scan
DESCRIPTION: This bash command demonstrates how to use the `--config` option with the `ast-grep scan` command to explicitly specify the path to the configuration file. This is useful when the `sgconfig.yml` is not in the project root.

SOURCE: https://ast-grep.github.io/guide/project/project-config

LANGUAGE: bash
CODE:
```
ast-grep scan --config path/to/config.yml
```

----------------------------------------

TITLE: Reuse Matched Content with Capturing Meta Variables
DESCRIPTION: Shows how to reuse previously matched AST nodes by using the same named meta variable multiple times in a pattern, similar to capture groups in regular expressions.

SOURCE: https://ast-grep.github.io/guide/pattern-syntax

LANGUAGE: javascript
CODE:
```
// will match these patterns
a == a
1 + 1 == 1 + 1
// but will not match these
a == b
1 + 1 == 2
```

----------------------------------------

TITLE: JS: Sequential transformations for fooDebug to fooRelease
DESCRIPTION: This JavaScript example shows how to transform 'fooDebug' into 'fooRelease' using a sequence of ast-grep transformations: `convert` to kebab-case, `replace` to change 'debug' to 'release', and `convert` back to camelCase. This addresses limitations in directly concatenating meta-variables with capitalized strings.

SOURCE: https://ast-grep.github.io/guide/rewrite/transform

LANGUAGE: yaml
CODE:
```
rule: {pattern: $OLD_FN($$$ARGS)}      # Capture OLD_FN
constraints: {OLD_FN: {regex: Debug$}} # Only match if it ends with 'Debug'
transform:
  KEBABED:                             # 1. Convert to 'foo-debug'
    convert:
      source: $OLD_FN
      toCase: kebabCase
  RELEASED:                            # 2. Replace with 'foo-release'
    replace:
      source: $KEBABED
      replace: (?<ROOT>)-debug
      by: $ROOT-release
  UNKEBABED:                           # 3. Convert to 'fooRelease'
    convert:
      source: $RELEASED
      toCase: camelCase
fix: $UNKEBABED($$$ARGS)
```

----------------------------------------

TITLE: ast-grep new Command Usage
DESCRIPTION: This snippet shows the general usage syntax for the `ast-grep new` command. It outlines the structure for invoking the command with optional arguments and options.

SOURCE: https://ast-grep.github.io/reference/cli/new

LANGUAGE: shell
CODE:
```
ast-grep new [COMMAND] [OPTIONS] [NAME]
```

----------------------------------------

TITLE: Python API: Edit Class
DESCRIPTION: Defines the `Edit` class in the Python API, used to represent changes to be made to the code, including start position, end position, and the inserted text.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: python
CODE:
```
class Edit:
    # The start position of the edit
    start_pos: int
    # The end position of the edit
    end_pos: int
    # The text to be inserted
    inserted_text: str
```

----------------------------------------

TITLE: GitHub Action workflow for ast-grep linting
DESCRIPTION: This YAML file defines a GitHub Actions workflow to automate ast-grep linting. It checks out the repository code and uses the official ast-grep action to scan for linting errors on every push event.

SOURCE: https://ast-grep.github.io/guide/tooling-overview

LANGUAGE: yml
CODE:
```
on: [push]

jobs:
  sg-lint:
    runs-on: ubuntu-latest
    name: Run ast-grep lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: ast-grep lint step
        uses: ast-grep/action@v1.4
```

----------------------------------------

TITLE: Rewrite console.log with logger.log
DESCRIPTION: This example shows how to rewrite `console.log` statements to `logger.log` using ast-grep. The pattern `console.log($MATCH)` is used to find the target code, and it can be rewritten to `logger.log($MATCH)`.

SOURCE: https://ast-grep.github.io/playground

LANGUAGE: JavaScript
CODE:
```
console.log($MATCH)
```

LANGUAGE: JavaScript
CODE:
```
logger.log($MATCH)
```

----------------------------------------

TITLE: Suppress Meta Variable Capturing
DESCRIPTION: Explains how to suppress meta variable capturing by prefixing the variable name with an underscore (e.g., $_FUNC). This improves matching speed by avoiding content capture.

SOURCE: https://ast-grep.github.io/guide/pattern-syntax

LANGUAGE: javascript
CODE:
```
// Given this pattern

$_FUNC($_FUNC)

// it will match all function call with one argument or spread call
test(a)
testFunc(1 + 1)
testFunc(...args)
```

----------------------------------------

TITLE: Rewrite Code with --rewrite Flag (Python)
DESCRIPTION: This example demonstrates how to use the `--rewrite` flag with `ast-grep run` to replace all occurrences of an identifier 'foo' with 'bar' in Python code. It shows the command to execute and mentions the interactive mode and auto-update flags.

SOURCE: https://ast-grep.github.io/guide/rewrite-code

LANGUAGE: bash
CODE:
```
ast-grep run --pattern 'foo' --rewrite 'bar' --lang python
```

----------------------------------------

TITLE: Display Help Information with -h, --help
DESCRIPTION: The `-h` or `--help` flags display help information for ast-grep commands. A summary of options can be viewed with `-h`.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: bash
CODE:
```
sg -h
sg --help
```

----------------------------------------

TITLE: Find CSS in HTML using ast-grep run
DESCRIPTION: This example demonstrates how to use the `ast-grep run` command to find CSS patterns within an HTML file. ast-grep automatically extracts and matches CSS code embedded in HTML.

SOURCE: https://ast-grep.github.io/advanced/language-injection

LANGUAGE: html
CODE:
```
<style>
  h1 { color: red; }
</style>
<h1>
  Hello World!
</h1>
<script>
  alert('hello world!')
</script>
```

LANGUAGE: sh
CODE:
```
ast-grep run -p 'color: $COLOR'
```

LANGUAGE: text
CODE:
```
test.html
2│  h1 { color: red; }
```

----------------------------------------

TITLE: TSX Example: Nested and Valid Links
DESCRIPTION: This TSX code demonstrates a React component with a nested link, which violates the rule, and a correctly structured component with a single link.

SOURCE: https://ast-grep.github.io/catalog/tsx/avoid-nested-links

LANGUAGE: tsx
CODE:
```
function Component() {
  return <a href='/destination'>
    <a href='/anotherdestination'>Nested link!</a>
  </a>;
}
function OkayComponent() {
  return <a href='/destination'>
    I am just a link.
  </a>;
}
```

----------------------------------------

TITLE: Building ast-grep from Source on Older Linux Distributions
DESCRIPTION: For users on Linux distributions with glibc versions older than 2.35 (e.g., Ubuntu 20.04), pre-compiled ast-grep binaries are not supported. This snippet shows the general command to build ast-grep from source, which is a viable alternative.

SOURCE: https://ast-grep.github.io/blog/new-ver-38

LANGUAGE: bash
CODE:
```
git clone https://github.com/ast-grep/ast-grep.git
cd ast-grep
# Ensure you have Rust and Cargo installed
cargo install --path .
# Or for a specific version:
cargo install --path . --version 0.37.0
```

----------------------------------------

TITLE: Example: useState with string type annotation
DESCRIPTION: This TypeScript code snippet shows a React component using `useState` with an explicit string type annotation, which can often be simplified.

SOURCE: https://ast-grep.github.io/catalog/tsx/redundant-usestate-type

LANGUAGE: ts
CODE:
```
function Component() {
  const [name, setName] = useState<string>('React')
}
```

----------------------------------------

TITLE: Replace console.log with logger.log using ast-grep
DESCRIPTION: This example demonstrates how to use ast-grep's Find & Patch scheme to replace a `console.log` function call with a `logger.log` call. It utilizes a pattern to find the target node and a fix to specify the replacement, using meta-variables to capture and reuse arguments.

SOURCE: https://ast-grep.github.io/advanced/find-n-patch

LANGUAGE: yaml
CODE:
```
rule:
  pattern: console.log($MSG)
fix: logger.log($MSG)
```

----------------------------------------

TITLE: Configure Test Cases with `testConfigs`
DESCRIPTION: Define configurations for ast-grep's test cases, including the directory for tests and an optional snapshot directory.

SOURCE: https://ast-grep.github.io/reference/sgconfig

LANGUAGE: yaml
CODE:
```
testConfigs:
- testDir: test
  snapshotDir: __snapshots__
- testDir: anotherTestDir
```

----------------------------------------

TITLE: Create Migration Branch
DESCRIPTION: Creates and switches to a new Git branch named 'upgrade-bevy'. This practice ensures that migration changes are isolated and can be easily reverted if necessary.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: sh
CODE:
```
git checkout -b upgrade-bevy
```

----------------------------------------

TITLE: Format Output for GitHub Actions with --format
DESCRIPTION: Use the `--format` flag to output warning and error messages in a format compatible with GitHub Actions. Currently, only the 'github' format is supported.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: bash
CODE:
```
sg --format=github
```

----------------------------------------

TITLE: Example: Renaming Pytest Fixture 'foo' to 'five'
DESCRIPTION: Demonstrates the effect of renaming a pytest fixture named 'foo' to 'five'. It shows the original Python code with the fixture and its usage, followed by the transformed code where all instances of 'foo' related to the fixture have been updated to 'five'.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: python
CODE:
```
@pytest.fixture
def foo() -> int:
    return 5

@pytest.fixture(scope="function")
def some_fixture(foo: int) -> str:
    return str(foo)

def regular_function(foo) -> None:
    ...

def test_code(foo: int) -> None:
    assert foo == 5

```

LANGUAGE: python
CODE:
```
@pytest.fixture
def foo() -> int: 
def five() -> int: 
    return 5

@pytest.fixture(scope="function")
def some_fixture(foo: int) -> str: 
def some_fixture(five: int) -> str: 
    return str(foo)

def regular_function(foo) -> None:
    ...

def test_code(foo: int) -> None: 
def test_code(five: int) -> None: 
    assert foo == 5
    assert five == 5

```

----------------------------------------

TITLE: Find JavaScript in HTML using ast-grep scan with rule files
DESCRIPTION: This example shows how to use `ast-grep scan` with a rule file to find JavaScript code, specifically `alert` calls, within an HTML file. ast-grep handles the language injection seamlessly.

SOURCE: https://ast-grep.github.io/advanced/language-injection

LANGUAGE: yml
CODE:
```
id: no-alert
language: JavaScript
severity: warning
rule:
  pattern: alert($MSG)
message: Prefer use appropriate custom UI instead of obtrusive alert call.
```

LANGUAGE: sh
CODE:
```
ast-grep scan --rule no-alert.yml
```

LANGUAGE: text
CODE:
```
warning[no-alert]: Prefer use appropriate custom UI instead of obtrusive alert call.
  ┌─ test.html:8:3
  │
8 │   alert('hello world!')
  │   ^^^^^^^^^^^^^^^^^^^^^
```

----------------------------------------

TITLE: Refactor add_stage_after to configure_set in Rust
DESCRIPTION: This snippet illustrates refactoring the `add_stage_after` method to use `configure_set` with `after` and `before` methods in Rust. It employs ast-grep meta-variables to capture and reuse parts of the original code.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: bash
CODE:
```
ast-grep \
  -p '$APP.add_stage_after($STAGE, $OWN_STAGE, SystemStage::parallel())' \
  -r '$APP.configure_set($OWN_STAGE.after($STAGE))' -i
```

LANGUAGE: bash
CODE:
```
ast-grep \
  -p 'app.add_stage_after($STAGE, $OWN_STAGE, SystemStage::parallel(),)' \
  -r 'app.configure_set($OWN_STAGE.after($STAGE))' -i
```

LANGUAGE: diff
CODE:
```
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -225,7 +225,7 @@ impl Plugin for BigBrainPlugin {
         app.add_stage_after(First, BigBrainStage::Scorers, SystemStage::parallel());
+        app.configure_set(BigBrainStage::Scorers.after(First));
@@ -245,7 +245,7 @@ impl Plugin for BigBrainPlugin {
         app.add_stage_after(PreUpdate, BigBrainStage::Actions, SystemStage::parallel());
+        app.configure_set(BigBrainStage::Actions.after(PreUpdate));
@@ -253,7 +253,7 @@ impl Plugin for BigBrainPlugin {
         app.add_stage_after(Last, BigBrainStage::Cleanup, SystemStage::parallel());
+        app.configure_set(BigBrainStage::Cleanup.after(Last));

```

----------------------------------------

TITLE: Example: Using Generator Expression with `any` (Python)
DESCRIPTION: This Python code snippet demonstrates the practical application of converting a list comprehension to a generator expression when used with the `any` function, showcasing improved memory efficiency.

SOURCE: https://ast-grep.github.io/catalog/python/prefer-generator-expressions

LANGUAGE: python
CODE:
```
any([x for x in range(10)])
```

----------------------------------------

TITLE: Search from Standard Input
DESCRIPTION: Illustrates how to enable searching code directly from standard input using the `--stdin` flag.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
echo 'console.log("hello")' | ast-grep run --stdin --pattern 'console.log($A)'
```

----------------------------------------

TITLE: Match await inside various loop types (ast-grep YAML)
DESCRIPTION: This example shows how to use the 'inside' relational rule with an 'any' operator to match an 'await' expression within multiple types of loop constructs, including 'for', 'for-in', 'while', and 'do-while'. The 'stopBy: end' ensures the search for the loop context is efficient.

SOURCE: https://ast-grep.github.io/guide/rule-config/relational-rule

LANGUAGE: yaml
CODE:
```
rule:
  pattern: await $PROMISE
  inside:
    any:
      - kind: for_in_statement
      - kind: for_statement
      - kind: while_statement
      - kind: do_statement
    stopBy: end
```

----------------------------------------

TITLE: Example of CSS Injection in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates the use of styled-components, which is a common pattern for injecting CSS into JavaScript. The provided `languageInjections` configuration in `sgconfig.yml` would enable ast-grep to analyze the CSS within the template literal.

SOURCE: https://ast-grep.github.io/advanced/language-injection

LANGUAGE: js
CODE:
```
import styled from 'styled-components';

const Button = styled.button`
  background: red;
  color: white;
  padding: 10px 20px;
  border-radius: 3px;
`

export default function App() {
  return <Button>Click Me</Button>
}
```

----------------------------------------

TITLE: GritQL for Rewriting Console Logs
DESCRIPTION: A GritQL query that demonstrates rewriting `console.log` calls to `winston.debug` and `console.error` calls to `winston.warn` using pattern matching and conditional mapping.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: gritql
CODE:
```
`console.$method($msg)` => `winston.$method($msg)` where {
  $method <: or {
    `log` => `debug`,
    `error` => `warn`
  }
}
```

----------------------------------------

TITLE: Get Transformed Code as String with napi
DESCRIPTION: The `getTransformed` function in ast-grep's Node.js API (napi) allows retrieving the result of code transformations directly as a string, simplifying the integration of transformation logic.

SOURCE: https://ast-grep.github.io/blog/stars-5000

LANGUAGE: javascript
CODE:
```
import { interact } from "@ast-grep/napi";

const transformedCode = await interact({
  code: "let x = 1;",
  rule: {
    pattern: "let $X = $Y;",
    fix: {
      replace: "const $X = $Y;"
    }
  }
});

console.log(transformedCode.replacements[0].newContent);
```

----------------------------------------

TITLE: YAML Rule with Fix: Rewriting console.log
DESCRIPTION: This example shows how to use the 'fix' field in ast-grep rules for automatic code rewriting. It targets 'console.log' calls and rewrites them to 'console.log('Hello ' + $GREET)', replacing the meta-variable '$GREET' with its matched content.

SOURCE: https://ast-grep.github.io/guide/project/lint-rule

LANGUAGE: yaml
CODE:
```
rule:
  pattern: console.log($GREET)
fix: console.log('Hello ' + $GREET)

```

----------------------------------------

TITLE: Core Parsing and Pattern Functions
DESCRIPTION: Provides core functions for interacting with ast-grep: `parse` to convert source code strings into `SgRoot` objects, `kind` to get the numerical representation of a language's kind, and `pattern` to compile string patterns into `NapiConfig`.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: typescript
CODE:
```
/** Parse a string to an ast-grep instance */
export function parse(lang: Lang, src: string): SgRoot
/** Get the `kind` number from its string name. */
export function kind(lang: Lang, kindName: string): number
/** Compile a string to ast-grep Pattern. */
export function pattern(lang: Lang, pattern: string): NapiConfig

```

----------------------------------------

TITLE: Define File Search Configuration with FindConfig
DESCRIPTION: Details the `FindConfig` interface used by `findInFiles`. This configuration object specifies the file paths to search and the matching rules (`NapiConfig`) for nodes within those files, enabling efficient batch processing.

SOURCE: https://ast-grep.github.io/guide/api-usage/performance-tip

LANGUAGE: typescript
CODE:
```
export interface FindConfig {
  paths: Array<string>
  matcher: NapiConfig
}
```

----------------------------------------

TITLE: Edit Interface for Code Modifications
DESCRIPTION: Defines the `Edit` interface, used in conjunction with the `replace` and `commitEdits` methods for modifying code. It specifies the start and end positions of the text to be replaced and the new inserted text.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: typescript
CODE:
```
interface Edit {
  startPos: number
  endPos: number
  insertedText: string
}

```

----------------------------------------

TITLE: Kotlin Example of Import Dependency Violation
DESCRIPTION: This Kotlin code snippet demonstrates an import statement that would violate the Clean Architecture rule enforced by ast-grep. It shows an import from the 'data' package (`com.example.customlintexample.data.models.UserDto`) within a context likely intended for the domain layer.

SOURCE: https://ast-grep.github.io/catalog/kotlin/ensure-clean-architecture

LANGUAGE: kotlin
CODE:
```
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelScope
import com.example.customlintexample.data.models.UserDto
import com.example.customlintexample.domain.usecases.GetUserUseCase
import com.example.customlintexample.presentation.states.MainState
import dagger.hilt.android.lifecycle.HiltViewModel

```

----------------------------------------

TITLE: Example: Adding Type Hints to Pytest Fixtures (Python)
DESCRIPTION: This Python code illustrates adding type hints to pytest fixtures and their usages. It shows an initial version where a fixture 'foo' and its usage in 'some_fixture' and 'test_code' lack explicit type hints, followed by the refactored version where type hints are added.

SOURCE: https://ast-grep.github.io/catalog/python/refactor-pytest-fixtures

LANGUAGE: python
CODE:
```
@pytest.fixture
def foo() -> int:
    return 5

@pytest.fixture(scope="function")
def some_fixture(foo) -> str:
    return str(foo)

def regular_function(foo) -> None:
    ...

def test_code(foo) -> None:
    assert foo == 5

```

----------------------------------------

TITLE: Neovim Telescope Integration
DESCRIPTION: This shows how to use ast-grep with the `telescope.nvim` plugin for enhanced searching. It includes the command to activate the ast-grep picker.

SOURCE: https://ast-grep.github.io/guide/tools/editors

LANGUAGE: vim
CODE:
```
Telescope ast_grep
```

----------------------------------------

TITLE: Rust code refactoring example
DESCRIPTION: This snippet shows the original Rust code containing the `indoc!` macro with a raw string literal. The subsequent diff demonstrates the refactored version where the macro is removed and the content is enclosed in backticks.

SOURCE: https://ast-grep.github.io/catalog/rust/rewrite-indoc-macro

LANGUAGE: rust
CODE:
```
fn main() {
    indoc! {r#"
        .foo {
            order: 1;
        }
    "#};
}
```

----------------------------------------

TITLE: Match Literals or Array of Literals in YAML
DESCRIPTION: This YAML example demonstrates how to match either literal values or an array containing literal values. Without utility rules, this would require significant repetition of rule definitions.

SOURCE: https://ast-grep.github.io/guide/rule-config/utility-rule

LANGUAGE: yaml
CODE:
```
rule:
  any:
    - kind: 'false'
    - kind: undefined
    # more literal kinds omitted
    # ...
    - kind: array
      has:
        any:
          - kind: 'false'
          - kind: undefined
          # more literal kinds omitted
          # ...
```

----------------------------------------

TITLE: Link Rule to Documentation
DESCRIPTION: Provides a documentation link for a rule, which can be displayed in editor extensions. This helps users understand the purpose and context of a specific rule.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
url: 'https://ast-grep.github.io/catalog/python/#migrate-openai-sdk'
```

----------------------------------------

TITLE: Customizable Code Highlighting with Labels in ast-grep Rules
DESCRIPTION: This feature allows users to define custom labels for code highlighting within ast-grep rule configurations. These labels provide more context and improve the user interface for diagnostics, enabling better sharing of coding best practices and style guide reminders across teams. The VSCode extension also supports these labels via LSP.

SOURCE: https://ast-grep.github.io/blog/new-ver-38

LANGUAGE: yaml
CODE:
```
rules:
  - id: example-rule
    message: "This is a custom message."
    severity: info
    language: javascript
    patterns:
      - pattern: |
          function $FUNC($PARAM) {
            $BODY
          }
      - label: "Function Definition"
        pattern: $FUNC
      - label: "Parameter List"
        pattern: $PARAM
      - label: "Function Body"
        pattern: $BODY
```

----------------------------------------

TITLE: TypeScript Infer Example for Multi Meta Variables
DESCRIPTION: This TypeScript code snippet illustrates the concept of non-greedy matching for multiple meta variables, similar to the `infer` keyword in template string literals. It shows how `$$$ARGS` can match multiple nodes until a subsequent pattern element is satisfied.

SOURCE: https://ast-grep.github.io/advanced/pattern-parse

LANGUAGE: typescript
CODE:
```
// Example illustrating non-greedy matching behavior similar to $$$ARGS
// const matchedArgs = `someFunction(${$$$ARGS})`;
```

----------------------------------------

TITLE: Configure Strictness in Pattern Object (YAML/JavaScript)
DESCRIPTION: This example shows how to define strictness within a YAML Pattern Object for JavaScript. The `strictness` field is set to 'ast', influencing how the pattern '$FOO($BAR)' is matched against the code.

SOURCE: https://ast-grep.github.io/advanced/match-algorithm

LANGUAGE: yaml
CODE:
```
id: test-pattern-strictness
language: JavaScript
rule:
  pattern:
    context: $FOO($BAR)
    strictness: ast
```

----------------------------------------

TITLE: Match console.log Excluding Specific Content (yaml)
DESCRIPTION: This example demonstrates how to use the 'not' operator in conjunction with a 'pattern' to match all 'console.log' calls except for those specifically logging 'Hello World'. This is useful for filtering out specific log messages.

SOURCE: https://ast-grep.github.io/guide/rule-config/composite-rule

LANGUAGE: yaml
CODE:
```
rule:
  pattern: console.log($GREETING)
  not:
    pattern: console.log('Hello World')
```

----------------------------------------

TITLE: Parse HTML from StdIn with ast-grep and jq
DESCRIPTION: Demonstrates parsing HTML content from standard input using `curl` and `ast-grep`, then processing the JSON output with `jq` to extract specific data, such as author names from a conference schedule.

SOURCE: https://ast-grep.github.io/guide/tooling-overview

LANGUAGE: bash
CODE:
```
curl -s https://schedule2021.scipy.org/2022/conference/  |
  ast-grep -p '<div $$$> $$$ <i>$AUTHORS</i> </div>' --lang html --json --stdin |
  jq \
    '.[] \
    | .metaVariables \
    | .single.AUTHORS.text'
```

LANGUAGE: json
CODE:
```
"Ben Blaiszik"
"Qiming Sun"
"Max Jones"
"Thomas J. Fan"
"Sebastian Bichelmaier"
"Cliff Kerr"
...
```

----------------------------------------

TITLE: Ignore Linting Errors (JavaScript)
DESCRIPTION: Provides examples of using inline comments in JavaScript to suppress ast-grep errors on specific lines or for particular rule IDs. This is useful for temporarily or selectively ignoring issues.

SOURCE: https://ast-grep.github.io/guide/project/severity

LANGUAGE: javascript
CODE:
```
console.log('hello')  // match
// ast-grep-ignore
console.log('suppressed') // suppressed
// ast-grep-ignore: no-console
console.log('suppressed') // suppressed
// ast-grep-ignore: other-rule
console.log('world') // match

// Same line suppression
console.log('suppressed') // ast-grep-ignore
console.log('suppressed') // ast-grep-ignore: no-console
```

----------------------------------------

TITLE: Rewrite Function Definition and Calls (Python)
DESCRIPTION: This snippet shows a YAML rule file to rename a Python function 'foo' to 'baz' and update its calls. It uses meta variables like '$X' and '$$$S' to match function parameters and body, respectively. The example includes the YAML rule definition and the command to scan the file.

SOURCE: https://ast-grep.github.io/guide/rewrite-code

LANGUAGE: yaml
CODE:
```
id: change_def
language: Python
rule:
  pattern: |
    def foo($X):
      $$$S
fix: |-
  def baz($X):
    $$$S

---

id: change_param
rule:
  pattern: foo($X)
fix: baz($X)
```

LANGUAGE: bash
CODE:
```
ast-grep scan -r change_func.yml test.py
```

LANGUAGE: python
CODE:
```
def foo(x):
    return x + 1

y = foo(2)
print(y)
```

LANGUAGE: python
CODE:
```
def foo(x): 
def baz(x):
    return x + 1

y = foo(2) 
y = baz(2) 
print(y)
```

----------------------------------------

TITLE: TypeScript Example of Imports without Extension
DESCRIPTION: This TypeScript code snippet demonstrates various import statements, including static and dynamic imports, some of which are missing file extensions. It also includes unrelated string literals that should not be matched by the rule.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-file-without-extension

LANGUAGE: typescript
CODE:
```
import a, {b, c, d} from "./file";
import e from "./other_file.js";
import "./folder/";
import {x} from "package";
import {y} from "package/with/path";

import("./dynamic1");
import("./dynamic2.js");

my_func("./unrelated_path_string")
```

----------------------------------------

TITLE: Configure Rule Directories with sgconfig.yml
DESCRIPTION: This YAML snippet defines the root configuration file for ast-grep, specifying the directories where linting rules can be found. It instructs ast-grep to recursively scan the 'rules' directory for all rule files.

SOURCE: https://ast-grep.github.io/guide/project/project-config

LANGUAGE: yaml
CODE:
```
ruleDirs:
  - rules
```

----------------------------------------

TITLE: ast-grep DSL: Distinct Syntax for Similar Patterns
DESCRIPTION: Illustrates how similar basic patterns in the ast-grep DSL can have distinct syntax appearances, requiring users to learn different syntaxes for concepts like 'pattern', 'kind', and 'regex'.

SOURCE: https://ast-grep.github.io/blog/yaml-vs-dsl

LANGUAGE: JavaScript
CODE:
```
`console.log($foo)` // pattern
augmented_assignment_expression(operator = $op, left = $x, right = $v) // syntax node
r"Hello, (.*)"($name)  // regex
```

----------------------------------------

TITLE: Swap Assignment Sides with Meta Variables (Python)
DESCRIPTION: This YAML rule demonstrates swapping the left-hand side and right-hand side of assignment statements in Python using meta variables. It defines a rule to match '$X = $Y' and rewrite it as '$Y = $X'. The example includes the rule and sample Python code before and after the transformation.

SOURCE: https://ast-grep.github.io/guide/rewrite-code

LANGUAGE: yaml
CODE:
```
id: swap
language: Python
rule:
  pattern: $X = $Y
fix: $Y = $X
```

LANGUAGE: python
CODE:
```
a = b
c = d + e
f = g * h
```

LANGUAGE: python
CODE:
```
b = a
d + e = c
g * h = f
```

----------------------------------------

TITLE: Refactor: Remove unnecessary useState type annotation for boolean
DESCRIPTION: This example shows how to use ast-grep to refactor `useState<boolean>(...)` to `useState(...)`, simplifying boolean state declarations in TypeScript.

SOURCE: https://ast-grep.github.io/catalog/tsx/redundant-usestate-type

LANGUAGE: bash
CODE:
```
ast-grep -p 'useState<boolean>($A)' -r 'useState($A)'
```

----------------------------------------

TITLE: Run ast-grep with Selector and Strictness
DESCRIPTION: The `sg run` command now supports `--selector` and `--strictness` flags for fine-grained control over pattern matching. This allows users to precisely define how patterns are applied during code analysis.

SOURCE: https://ast-grep.github.io/blog/stars-8000

LANGUAGE: bash
CODE:
```
sg run --selector <your-selector> --strictness <your-strictness>
```

----------------------------------------

TITLE: Python Type Hint Transformation Example
DESCRIPTION: This Python code snippet demonstrates the input and output of the recursive rewrite type transformation. It shows how `Optional[Union[List[Union[str, dict]], str]]` is transformed.

SOURCE: https://ast-grep.github.io/catalog/python/recursive-rewrite-type

LANGUAGE: python
CODE:
```
results:  Optional[Union[List[Union[str, dict]], str]]

```

----------------------------------------

TITLE: NAPI Support for Linux x64 musl
DESCRIPTION: NAPI (Node API) support has been extended to include Linux x64 musl, enhancing compatibility and performance for users on this platform.

SOURCE: https://ast-grep.github.io/blog/stars-6000

LANGUAGE: plaintext
CODE:
```
# NAPI build configuration might specify target platform
```

----------------------------------------

TITLE: Find Functions Without Return Type (TypeScript)
DESCRIPTION: This snippet demonstrates how to identify arrow functions in TypeScript that lack a specified return type. It serves as a starting point for creating more complex AST-grep rules.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: typescript
CODE:
```
const foo = () => {
	return 1;
}
```

----------------------------------------

TITLE: ast-grep Contextual Output
DESCRIPTION: Demonstrates how to configure ast-grep to print matches with surrounding context lines, similar to the behavior of `grep -A -B -C`.

SOURCE: https://ast-grep.github.io/blog/stars-3000

LANGUAGE: bash
CODE:
```
ast-grep --context
```

----------------------------------------

TITLE: Scan with a Single ast-grep Rule
DESCRIPTION: Scans a codebase using a single, specified ast-grep rule file. This allows for isolated testing and application of specific rule sets.

SOURCE: https://ast-grep.github.io/guide/tooling-overview

LANGUAGE: bash
CODE:
```
ast-grep scan -r path/to/your/rule.yml
```

----------------------------------------

TITLE: Match Second Number in JavaScript Array using nthChild
DESCRIPTION: This example shows a JavaScript array `[ 1, 2, 3, ]` and a corresponding ast-grep rule that uses `kind: number` and `nthChild: 2` to specifically match the second number (`2`) in the array.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: yaml
CODE:
```
rule:
  kind: number
  nthChild: 2
```

----------------------------------------

TITLE: Interactive Snapshot Update (Bash)
DESCRIPTION: Initiates an interactive session to review and accept changes to existing snapshots, highlighting differences in red and green.

SOURCE: https://ast-grep.github.io/guide/test-rule

LANGUAGE: bash
CODE:
```
ast-grep test --interactive

```

----------------------------------------

TITLE: ast-grep Playground: Pattern Matching and Rewriting
DESCRIPTION: The playground allows users to input source code and define patterns or rewrite rules to match and modify that code. The 'Pattern' tab in the Matcher Editor is used for this purpose, emulating the behavior of `ast-grep run`.

SOURCE: https://ast-grep.github.io/reference/playground

LANGUAGE: yaml
CODE:
```
id: example-rule
message: This is an example rule.
severity: warning
language: python
rule:
  pattern: "print($A)"
rewrite:
  code: "print($A)"
```

----------------------------------------

TITLE: Example of Missing Component Decorator (TypeScript)
DESCRIPTION: This TypeScript code demonstrates the 'missing-component-decorator' rule. The `NotComponent` class uses the `ngOnInit` lifecycle method without the `@Component()` decorator, which would be flagged by the rule. The `Klass` class correctly uses both the decorator and the lifecycle method.

SOURCE: https://ast-grep.github.io/catalog/typescript/missing-component-decorator

LANGUAGE: typescript
CODE:
```
class NotComponent {
    ngOnInit() {}
}

@Component()
class Klass {
    ngOnInit() {}
}
```

----------------------------------------

TITLE: Example: Diff after Adding Type Hints to Pytest Fixtures (Python)
DESCRIPTION: This Python code provides the difference (diff) after applying type hints to pytest fixtures. It pinpoints the lines where type hints (e.g., `: int`) were added to the fixture 'foo' and its subsequent uses in function parameters and test function arguments.

SOURCE: https://ast-grep.github.io/catalog/python/refactor-pytest-fixtures

LANGUAGE: python
CODE:
```
@pytest.fixture
def foo() -> int:
    return 5

@pytest.fixture(scope="function")
def some_fixture(foo) -> str:
def some_fixture(foo: int) -> str:
    return str(foo)

def regular_function(foo) -> None:
    ...

def test_code(foo) -> None:
def test_code(foo: int) -> None:
    assert foo == 5

```

----------------------------------------

TITLE: Demonstrate Vulnerable JSON Unmarshaling in Go
DESCRIPTION: This code demonstrates how a JSON tag starting with `-,` can be exploited to unmarshal a field that was intended to be omitted. It showcases the vulnerability where an attacker can set the `IsAdmin` field by providing the `-` key in the JSON input.

SOURCE: https://ast-grep.github.io/catalog/go/unmarshal-tag-is-dash

LANGUAGE: go
CODE:
```
type User struct {
    Username string `json:"username,omitempty"`
    Password string `json:"password,omitempty"`
    IsAdmin  bool   `json:"-,omitempty"`  // Intended to prevent marshaling
}

// This still works and sets IsAdmin to true!
json.Unmarshal([]byte(`{"-": true}`), &user)
// Result: main.User{Username:"", Password:"", IsAdmin:true}
```

----------------------------------------

TITLE: JavaScript code demonstrating follows rule context
DESCRIPTION: This JavaScript snippet shows two 'console.log(\'hello\');' statements, one of which is preceded by 'console.log(\'world\');'. This context is designed to illustrate how the 'follows' relational rule in ast-grep would selectively match the second 'hello' log.

SOURCE: https://ast-grep.github.io/guide/rule-config/relational-rule

LANGUAGE: javascript
CODE:
```
console.log('hello'); // does not match
console.log('world');
console.log('hello'); // matches!!
```

----------------------------------------

TITLE: TypeScript Lint Rule Example: No Await in Loop
DESCRIPTION: This TypeScript lint rule, 'no-await-in-loop', identifies and flags the use of 'await' within 'for-in' or 'while' loops. It's configured in a YAML file and includes fields for the rule's ID, language, pattern, severity, and a descriptive message.

SOURCE: https://ast-grep.github.io/guide/project/lint-rule

LANGUAGE: yaml
CODE:
```
id: no-await-in-loop
language: TypeScript
rule:
  pattern: await $_ 
  inside:
    any:
    - kind: for_in_statement
    - kind: while_statement

# Other linting related fields
message: Don't use await inside of loops
severity: warning
note: |
  Performing an await as part of each operation is an indication that
  the program is not taking full advantage of the parallelization benefits of async/await.

```

----------------------------------------

TITLE: Provide Rule Message
DESCRIPTION: A concise, single-line message explaining why a rule fired, potentially referencing meta-variables.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
message: "console.log should not be used in production code"
```

----------------------------------------

TITLE: SgRoot Class Signature and Usage
DESCRIPTION: Shows the constructor signature for the SgRoot class, which takes source code and language as input, and the method to retrieve the root node of the parsed syntax tree.

SOURCE: https://ast-grep.github.io/guide/api-usage/py-api

LANGUAGE: python
CODE:
```
class SgRoot:
    def __init__(self, src: str, language: str) -> None: ...
    def root(self) -> SgNode: ...

root = SgRoot("print('hello world')", "python") # 1. parse
node = root.root()                              # 2. get root
```

----------------------------------------

TITLE: Simplify Rule with Combined Fields: 'this.foo' in Class Body
DESCRIPTION: This example shows a simplified ast-grep rule by combining fields into a single rule object. It matches 'this.foo' when it's inside a 'class_body', demonstrating an equivalent but more readable alternative to using the 'all' composite rule.

SOURCE: https://ast-grep.github.io/guide/rule-config/composite-rule

LANGUAGE: yaml
CODE:
```
pattern: this.foo
inside:
  kind: class_body
```

----------------------------------------

TITLE: Handle Ambiguous JavaScript Patterns with Context
DESCRIPTION: Explains how to resolve ambiguity in ast-grep patterns, using the example of JavaScript code `a: 123`, which can be an object key-value pair or a labeled statement. It shows that ast-grep defaults to parsing it as a labeled statement and provides a solution using a pattern object with a `context` to specify matching an object key-value pair.

SOURCE: https://ast-grep.github.io/advanced/pattern-parse

LANGUAGE: javascript
CODE:
```
a: 123
```

LANGUAGE: yaml
CODE:
```
pattern:
  context: '{ a: 123 }'
  selector: pair
```

----------------------------------------

TITLE: Use Selector for Specific AST Kind
DESCRIPTION: Demonstrates the use of the `--selector` option to match a specific sub-syntax node kind within the pattern.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
ast-grep run -p 'variable' --selector variable
```

----------------------------------------

TITLE: Configure CSS in JS with Static Injection
DESCRIPTION: This configuration demonstrates how to support styled-components in JavaScript files using a static 'css' injection. It specifies the host language as 'js' and uses a pattern to identify the content to be injected.

SOURCE: https://ast-grep.github.io/reference/sgconfig

LANGUAGE: yaml
CODE:
```
languageInjections:
- hostLanguage: js
  rule:
    pattern: styled.$TAG`$CONTENT`
  injected: css
```

----------------------------------------

TITLE: Generate Dynamic Library via tree-sitter test
DESCRIPTION: Generates a dynamic library by setting the TREE_SITTER_LIBDIR environment variable and running `tree-sitter test` within the parser's directory.

SOURCE: https://ast-grep.github.io/advanced/custom-language

LANGUAGE: bash
CODE:
```
cd path/to/mojo/parser
export TREE_SITTER_LIBDIR=path/to/your/dir
tree-sitter test
```

----------------------------------------

TITLE: Debug Query Pattern
DESCRIPTION: Explains how to use the `--debug-query` option to print the tree-sitter AST of the query pattern. This requires the language to be explicitly set.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
ast-grep run -p 'foo()' --lang javascript --debug-query ast
```

----------------------------------------

TITLE: Match Nth Child using An+B Formula in YAML
DESCRIPTION: This YAML rule employs the `An+B` style string for `nthChild` to match nodes based on a formula (`2n+1`). This allows for more complex positional selections, such as matching every other node starting from the first.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: yaml
CODE:
```
# An+B style string to match position based on formula
nthChild: 2n+1
```

----------------------------------------

TITLE: ast-grep Help Command Usage
DESCRIPTION: Prints help messages for the ast-grep command or its subcommands.

SOURCE: https://ast-grep.github.io/reference/cli

LANGUAGE: shell
CODE:
```
ast-grep help
```

----------------------------------------

TITLE: Define Pytest Fixture and Test Function Utilities
DESCRIPTION: Defines utility rules for ast-grep to identify pytest fixture functions (using the @pytest.fixture decorator) and test functions (conventionally named starting with 'test_'). These utilities are foundational for more complex refactoring tasks related to pytest.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: yaml
CODE:
```
utils:
  is-fixture-function:
    kind: function_definition
    follows:
      kind: decorator
      has:
        kind: identifier
        regex: ^fixture$
        stopBy: end
  is-test-function:
    kind: function_definition
    has:
      field: name
      regex: ^test_

```

----------------------------------------

TITLE: Example: Renaming Pytest Fixtures (Python)
DESCRIPTION: This Python code demonstrates the effect of renaming a pytest fixture named 'foo' to 'five'. It shows the original code with the fixture and its usage, followed by the refactored code where 'foo' has been replaced by 'five' in the fixture definition, function arguments, and test calls.

SOURCE: https://ast-grep.github.io/catalog/python/refactor-pytest-fixtures

LANGUAGE: python
CODE:
```
@pytest.fixture
def foo() -> int:
    return 5

@pytest.fixture(scope="function")
def some_fixture(foo: int) -> str:
    return str(foo)

def regular_function(foo) -> None:
    ...

def test_code(foo: int) -> None:
    assert foo == 5

```

----------------------------------------

TITLE: Run ast-grep in Interactive Mode
DESCRIPTION: Enables an interactive mode for ast-grep, allowing users to review and select rewrite operations one by one. This mode is useful for refining queries and avoiding unintended changes, inspired by tools like fast-mod.

SOURCE: https://ast-grep.github.io/guide/tooling-overview

LANGUAGE: bash
CODE:
```
ast-grep scan --interactive
```

----------------------------------------

TITLE: JS: Replace debug with release using regex capture groups
DESCRIPTION: This JavaScript example demonstrates replacing 'debug' with 'release' in function names using ast-grep's `replace` transformation with regex capture groups. It captures the part of the function name following 'debug' and reuses it after 'release'.

SOURCE: https://ast-grep.github.io/guide/rewrite/transform

LANGUAGE: yaml
CODE:
```
id: debug-to-release
language: js
rule: {pattern: $OLD_FN($$$ARGS)}   # Capture OLD_FN
constraints: {OLD_FN: {regex: ^debug}}  # Only match if it starts with 'debug'
transform:
  NEW_FN:
    replace:
      source: $OLD_FN
      replace: debug(?<REG>.*)      # Capture everything following 'debug' as REG
      by: release$REG               # Refer to REG just like a meta-variable
fix: $NEW_FN($$$ARGS)
```

LANGUAGE: js
CODE:
```
debugFoo(arg1, arg2)  
releaseFoo(arg1, arg2)  
```

----------------------------------------

TITLE: Search Cargo.lock for Bevy Version
DESCRIPTION: This snippet demonstrates how to search within the Cargo.lock file for specific Bevy versions to identify potential dependency conflicts.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: Shell
CODE:
```
grep "bevy 0.9" Cargo.lock
```

----------------------------------------

TITLE: Example of Yoda Condition Refactoring (C)
DESCRIPTION: These C code snippets demonstrate the effect of the ast-grep rule for Yoda conditions. The first snippet shows the original code where a variable is compared to a number. The second snippet shows the refactored code where the number is compared to the variable.

SOURCE: https://ast-grep.github.io/catalog/c/yoda-condition

LANGUAGE: c
CODE:
```
if (myNumber == 42) { /* ... */ }
if (notMatch == another) { /* ... */ }
if (notMatch) { /* ... */ }
```

LANGUAGE: c
CODE:
```
if (myNumber == 42) { /* ... */ }
if (42 == myNumber) { /* ... */ }
if (notMatch == another) { /* ... */ }
if (notMatch) { /* ... */ }
```

----------------------------------------

TITLE: ast-grep CLI and Library Usage
DESCRIPTION: ast-grep can be utilized as a standalone command-line interface (CLI) tool for quick code analysis and transformations, or as a library within other applications for more integrated functionality. Its design prioritizes a user-friendly interface for the CLI and exposes core capabilities for programmatic access.

SOURCE: https://ast-grep.github.io/advanced/tool-comparison

LANGUAGE: bash
CODE:
```
sg find ...
sg rewrite ...
```

LANGUAGE: javascript
CODE:
```
import astGrep from "ast-grep";
astGrep.scan(...);
```

----------------------------------------

TITLE: ast-grep Meta Variable Matching Named Nodes
DESCRIPTION: This JavaScript example shows how ast-grep's default meta-variable matching (`$VAR`) targets only named nodes. It illustrates that `return $A` matches a statement with a named 'number' literal but not one ending with an unnamed semicolon.

SOURCE: https://ast-grep.github.io/advanced/core-concepts

LANGUAGE: js
CODE:
```
return 123 // `123` is named `number` and matched.
return;    // `;` is unnamed and not matched.
```

----------------------------------------

TITLE: Check Code and Update Lock File
DESCRIPTION: Runs 'cargo check' to verify the code for errors and warnings, and to generate an updated 'Cargo.lock' file reflecting the new dependency versions. This command ensures the project's integrity after dependency changes.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: bash
CODE:
```
cargo check
```

----------------------------------------

TITLE: Include Unnamed Nodes with $$VAR in ast-grep
DESCRIPTION: This JavaScript example demonstrates using ast-grep's double dollar meta-variable (`$$VAR`) to include unnamed nodes in pattern matching. `return $$A` successfully matches both statements containing a named number and an unnamed semicolon.

SOURCE: https://ast-grep.github.io/advanced/core-concepts

LANGUAGE: js
CODE:
```
return $$A
```

----------------------------------------

TITLE: Example: Diff after Renaming Pytest Fixtures (Python)
DESCRIPTION: This Python code presents the difference (diff) after renaming a pytest fixture 'foo' to 'five'. It highlights the specific lines that were changed, showing the removal of the old name and the addition of the new name in fixture definitions, function parameters, and test assertions.

SOURCE: https://ast-grep.github.io/catalog/python/refactor-pytest-fixtures

LANGUAGE: python
CODE:
```
@pytest.fixture
def foo() -> int:
def five() -> int:
    return 5

@pytest.fixture(scope="function")
def some_fixture(foo: int) -> str:
def some_fixture(five: int) -> str:
    return str(foo)

def regular_function(foo) -> None:
    ...

def test_code(foo: int) -> None:
def test_code(five: int) -> None:
    assert foo == 5
    assert five == 5

```

----------------------------------------

TITLE: Diff showing replacement of inefficient to efficient digit count (Rust)
DESCRIPTION: This Rust code snippet shows the difference between the inefficient method of calculating digit count (using `to_string().chars().count()`) and the efficient method (using `checked_ilog10().unwrap_or(0) + 1`).

SOURCE: https://ast-grep.github.io/catalog/rust/get-digit-count-in-usize

LANGUAGE: rust
CODE:
```
let width = (lines + num).to_string().chars().count(); 
let width = (lines + num).checked_ilog10().unwrap_or(0) + 1;
```

----------------------------------------

TITLE: Example of Unused Java Variables (Java)
DESCRIPTION: This Java code snippet demonstrates a scenario where a variable is declared but not used. The `unused` variable is assigned a value but never referenced, while the `used` variable is printed to the console. This is the type of pattern the ast-grep rule aims to identify.

SOURCE: https://ast-grep.github.io/catalog/java/no-unused-vars

LANGUAGE: java
CODE:
```
String unused = "unused"; 
String used = "used";
System.out.println(used);

```

----------------------------------------

TITLE: Rust: Example of iterating with chars().enumerate()
DESCRIPTION: Illustrates a common but potentially incorrect way to iterate over a Rust string using `chars().enumerate()`. This method yields character indices, which can lead to unexpected behavior when dealing with multi-byte UTF-8 characters, as it does not reflect the actual byte positions.

SOURCE: https://ast-grep.github.io/catalog/rust/boshen-footgun

LANGUAGE: rs
CODE:
```
for (i, char) in source.chars().enumerate() {
    println!("Boshen is angry :)");
}
```

----------------------------------------

TITLE: Link to Rule Documentation
DESCRIPTION: Provides a URL to the external documentation for the specific rule.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
url: 'https://doc.link/'
```

----------------------------------------

TITLE: Do Not Match JavaScript Object Property When Field is Not Key
DESCRIPTION: This snippet illustrates a case where a node contains the target text ('prototype') but does not match the rule because it is not in the 'key' field. The example shows a JavaScript object where 'prototype' is a value, not a key, and thus is correctly excluded by the ast-grep rule.

SOURCE: https://ast-grep.github.io/guide/rule-config/relational-rule

LANGUAGE: javascript
CODE:
```
var a = {
  normalKey: prototype
}
```

----------------------------------------

TITLE: Define YAML Rule to Detect Vulnerable JSON Tags
DESCRIPTION: This YAML code defines a rule to detect struct fields that have JSON tags starting with `-,` followed by a comma. This pattern indicates a potential vulnerability where the field can be unexpectedly unmarshaled using the `-` key.

SOURCE: https://ast-grep.github.io/catalog/go/unmarshal-tag-is-dash

LANGUAGE: yaml
CODE:
```
id: unmarshal-tag-is-dash
severity: error
message: Struct field can be decoded with the `-` key because the JSON tag
  starts with a `-` but is followed by a comma.
rule:
  pattern: '`$TAG`'
  inside:
    kind: field_declaration
constraints:
  TAG:
    regex: json:"-,.*"
```

----------------------------------------

TITLE: Define Pytest Fixture and Test Function Utilities (YAML)
DESCRIPTION: This YAML snippet defines utility rules for ast-grep to identify pytest fixture definitions and test functions. `is-fixture-function` matches function definitions preceded by a `@pytest.fixture` decorator, while `is-test-function` matches functions whose names start with `test_`.

SOURCE: https://ast-grep.github.io/catalog/python/refactor-pytest-fixtures

LANGUAGE: yaml
CODE:
```
utils:
  is-fixture-function:
    kind: function_definition
    follows:
      kind: decorator
      has:
        kind: identifier
        regex: ^fixture$
        stopBy: end
  is-test-function:
    kind: function_definition
    has:
      field: name
      regex: ^test_

```

----------------------------------------

TITLE: Replace inefficient digit count with efficient method (ast-grep)
DESCRIPTION: This shell command uses `ast-grep` to find occurrences of the inefficient method for counting digits (`$NUM.to_string().chars().count()`) in Rust files and replaces them with the efficient method (`$NUM.checked_ilog10().unwrap_or(0) + 1`).

SOURCE: https://ast-grep.github.io/catalog/rust/get-digit-count-in-usize

LANGUAGE: shell
CODE:
```
ast-grep -p '$NUM.to_string().chars().count()' \
   -r '$NUM.checked_ilog10().unwrap_or(0) + 1' \
   -l rs
```

----------------------------------------

TITLE: Test Multiple Rules in ast-grep Playground
DESCRIPTION: Demonstrates how to test multiple ast-grep rules concurrently by separating them with '---' in the YAML editor. This simulates real-world scenarios where several rules are applied to a codebase.

SOURCE: https://ast-grep.github.io/reference/playground

LANGUAGE: yaml
CODE:
```
rule:
  pattern: console.log($A)
fix:
  logger.log($A)
---
rule:
  pattern: function $A() { $$$BODY }
fix: 'const $A = () => { $$$BODY }'
```

----------------------------------------

TITLE: Debug ast-grep Query
DESCRIPTION: Executes a single ast-grep query with the `--debug-query` option to output the corresponding tree-sitter AST. This is useful for understanding and refining complex query patterns.

SOURCE: https://ast-grep.github.io/guide/tooling-overview

LANGUAGE: bash
CODE:
```
ast-grep run -p 'YOUR_PATTERN' --debug-query
```

----------------------------------------

TITLE: Match node inside a function named 'test' (ast-grep YAML)
DESCRIPTION: This example uses a custom rule for 'stopBy' within an 'inside' relational rule. It searches for a node within a function definition, stopping the search for the surrounding function context only when a node of 'kind: function' is encountered. The target is a function named 'test'.

SOURCE: https://ast-grep.github.io/guide/rule-config/relational-rule

LANGUAGE: yaml
CODE:
```
inside:
  stopBy:
    kind: function
  pattern: function test($$$) { $$$ }
```

----------------------------------------

TITLE: YAML: Define Rule for Unnecessary React Hook
DESCRIPTION: This YAML configuration defines an ast-grep rule to identify potentially unnecessary React hooks. It targets function calls that start with 'use' but do not match a specific hook pattern, aiming to flag functions that might be incorrectly identified as hooks.

SOURCE: https://ast-grep.github.io/catalog/tsx

LANGUAGE: yaml
CODE:
```
id: unnecessary-react-hook
language: Tsx
utils:
  hook_call:
    has:
      kind: call_expression
      regex: ^use
      stopBy: end
rule:
  any:
  - pattern: function $FUNC($$$) { $$$ }
  - pattern: let $FUNC = ($$$) => $$$ 
  - pattern: const $FUNC = ($$$) => $$$ 
  has:
    pattern: $BODY
    kind: statement_block
    stopBy: end
constraints:
  FUNC: {regex: ^use }
  BODY: { not: { matches: hook_call } }
```

----------------------------------------

TITLE: Match a node within a specific character range
DESCRIPTION: The `range` rule matches an AST node that falls within a specified character range defined by `start` (inclusive) and `end` (exclusive) coordinates (line and column, 0-based). This is useful for matching specific segments of code.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yml
CODE:
```
range:
  start:
    line: 0
    column: 0
  end:
    line: 0
    column: 3
```

----------------------------------------

TITLE: Rule Config in SgNode Match Methods
DESCRIPTION: Allows passing rule configurations directly to SgNode match methods such as `matches`, `has`, `inside`, `follows`, and `precedes`. This enables dynamic rule configuration within the code for greater flexibility.

SOURCE: https://ast-grep.github.io/blog/stars-8000

LANGUAGE: typescript
CODE:
```
import { sg, SgNode } from "@ast-grep/napi";

const ruleConfig = {
  pattern: "console.log($A)",
};

const node: SgNode = sg.parse("console.log('hello')");

if (node.matches(ruleConfig)) {
  console.log("Node matches the rule.");
}
```

----------------------------------------

TITLE: Neovim grug-far.nvim Integration
DESCRIPTION: Demonstrates how to configure `grug-far.nvim` to use ast-grep as its search engine, allowing for live searching and replacing within Neovim.

SOURCE: https://ast-grep.github.io/guide/tools/editors

LANGUAGE: vim
CODE:
```
:lua require('grug-far').grug_far({ engine = 'astgrep' })
```

----------------------------------------

TITLE: Match Node by Source Code Range in YAML
DESCRIPTION: This YAML rule uses the `range` property to match an AST node that falls within specific source code boundaries. It defines `start` and `end` points with `line` and `column` numbers, useful for integrating with external tools that provide code location information.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: yaml
CODE:
```
rule:
  range:
    start:
      line: 0
      column: 0
    end:
      line: 1
      column: 5
```

----------------------------------------

TITLE: Provide Full Context for C Function Matching in YAML
DESCRIPTION: Illustrates how to use the `context` field in a YAML rule to provide a complete, parsable code snippet for matching specific AST nodes, such as a function. This ensures the pattern is valid for tree-sitter.

SOURCE: https://ast-grep.github.io/advanced/faq

LANGUAGE: yaml
CODE:
```
rule:
  pattern:
    context: 'int main() { return 0; }'
    selector: function
```

----------------------------------------

TITLE: Compile Parser with tree-sitter build
DESCRIPTION: Compiles a Tree-sitter parser into a dynamic library (e.g., mojo.so) using the `tree-sitter build` command.

SOURCE: https://ast-grep.github.io/advanced/custom-language

LANGUAGE: sh
CODE:
```
tree-sitter build --output mojo.so
```

----------------------------------------

TITLE: Python: Add conditional comma using regex replace
DESCRIPTION: This Python example demonstrates how to conditionally add a comma before a new argument in a function call using ast-grep's `replace` transformation. The comma is added only if existing arguments are present, preventing trailing commas in calls with no prior arguments.

SOURCE: https://ast-grep.github.io/guide/rewrite/transform

LANGUAGE: yaml
CODE:
```
id: add-leading-argument
language: python
rule:
  pattern: $FUNC($$$ARGS)
transform:
  MAYBE_COMMA:
    replace:
      source: $$$ARGS
      replace: '^.+'
      by: ', '
fix:
  $FUNC(new_argument$MAYBE_COMMA$$$ARGS)
```

----------------------------------------

TITLE: Format Code After Refactoring
DESCRIPTION: This command demonstrates the importance of formatting code after automated refactoring. Running `cargo fmt` ensures that the rewritten code is clean, readable, and adheres to Rust's standard formatting conventions.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: Shell
CODE:
```
cargo fmt
```

----------------------------------------

TITLE: Configure CSS in JS with Dynamic Injection
DESCRIPTION: This configuration shows how to support CSS within JavaScript style using a dynamic injection. It allows for multiple candidate languages (css, scss, less) to be matched against the '$LANG' meta-variable captured in the rule.

SOURCE: https://ast-grep.github.io/reference/sgconfig

LANGUAGE: yaml
CODE:
```
languageInjections:
- hostLanguage: js
  rule:
    pattern: styled.$LANG`$CONTENT`
  injected: [css, scss, less]
```

----------------------------------------

TITLE: Fix `&&` short circuit in JSX (TSX Example)
DESCRIPTION: This TSX code snippet demonstrates the problematic usage of the `&&` operator for conditional rendering in React JSX. It shows a common scenario where a list's length is checked, and if not empty, the list is mapped to JSX elements. The issue arises if `list.length` evaluates to `0`, which React renders instead of the intended JSX.

SOURCE: https://ast-grep.github.io/catalog/tsx/avoid-jsx-short-circuit

LANGUAGE: tsx
CODE:
```
<div>{ list.length && list.map(i => <p/>) }</div>
```

----------------------------------------

TITLE: Configure Labels for Highlighting
DESCRIPTION: Defines labels to customize highlighting in editor extensions. Labels are mapped to meta-variable names and can have a style (primary/secondary) and an optional message.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
labels:
  ARG:
    style: primary
    message: "This is the argument"
  FUNC:
    style: secondary
    message: "This is the function"
```

----------------------------------------

TITLE: ast-grep Test Command Usage
DESCRIPTION: Executes tests for ast-grep rules, allowing configuration of test directories, snapshot behavior, and filtering.

SOURCE: https://ast-grep.github.io/reference/cli

LANGUAGE: shell
CODE:
```
ast-grep test [OPTIONS]
ast-grep test -c CONFIG
ast-grep test --config CONFIG
ast-grep test -t TEST_DIR
ast-grep test --test-dir TEST_DIR
ast-grep test --snapshot-dir SNAPSHOT_DIR
ast-grep test --skip-snapshot-tests
ast-grep test -U
ast-grep test --update-all
ast-grep test -f
ast-grep test --filter
ast-grep test --include-off
ast-grep test -i
ast-grep test --interactive
ast-grep test -h
ast-grep test --help
```

----------------------------------------

TITLE: Match 'this.foo' in a Class Getter using Nested Rules
DESCRIPTION: This example demonstrates a deeply nested ast-grep rule to find the usage of 'this.foo' within a class getter. It utilizes 'all' and 'inside' rules to specify the context and structure of the target code, including 'stopBy' to prevent matching within nested objects or class bodies.

SOURCE: https://ast-grep.github.io/guide/rule-config/composite-rule

LANGUAGE: yaml
CODE:
```
rule:
  all:
    - pattern: this.foo
    - inside:
        all:
          - pattern:
              context: class A { get $_() { $$$ } }
              selector: method_definition
          - inside:
              kind: class_body
        stopBy:
          any:
            - kind: object
            - kind: class_body
```

----------------------------------------

TITLE: Match Golang Function Call with Contextual Pattern
DESCRIPTION: This snippet demonstrates how to match function calls in Golang using ast-grep's contextual patterns and selectors. It addresses the ambiguity between function calls and type conversions by specifying a pattern within a function context and using the `call_expression` selector.

SOURCE: https://ast-grep.github.io/catalog/go/match-function-call

LANGUAGE: yaml
CODE:
```
id: match-function-call
language: go
rule:
  pattern:
    context: 'func t() { fmt.Println($A) }'
    selector: call_expression
```

LANGUAGE: go
CODE:
```
func main() {
    fmt.Println("OK")
}
```

----------------------------------------

TITLE: NapiConfig Interface for Matching Rules
DESCRIPTION: Defines the `NapiConfig` interface, used for specifying matching rules in `find` or `findAll` operations. It allows configuration of rules, constraints, language, transformations, and utility functions.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: typescript
CODE:
```
interface NapiConfig {
  rule: object
  constraints?: object
  language?: FrontEndLanguage
  transform?: object
  utils?: object
}

```

----------------------------------------

TITLE: Find Host/Port and Show Message (YAML)
DESCRIPTION: This YAML rule uses ast-grep to find specific host and port configurations. It checks for patterns like 'port: $PORT' or 'host: $HOST' and displays a custom error message indicating the detected host and port, suggesting a change to port 8000.

SOURCE: https://ast-grep.github.io/catalog/yaml/find-key-value

LANGUAGE: yaml
CODE:
```
id: detect-host-port
message: You are using $HOST on Port $PORT, please change it to 8000
severity: error
rule:
  any:
    - pattern: |
        port: $PORT
    - pattern: |
        host: $HOST
```

----------------------------------------

TITLE: ast-grep Language Configuration
DESCRIPTION: Demonstrates how to use language aliases with ast-grep commands and in YAML rule definitions. It also explains how file extensions are used to identify languages.

SOURCE: https://ast-grep.github.io/reference/languages

LANGUAGE: Shell
CODE:
```
ast-grep run --lang bash

language: bash
```

----------------------------------------

TITLE: Migrate OpenAI SDK
DESCRIPTION: This rule helps migrate code that uses older versions of the OpenAI SDK to newer versions, applying necessary pattern changes.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Python
CODE:
```
kind: "import"
pattern: "from openai import OpenAI"
transform: "from openai import AsyncOpenAI"
```

----------------------------------------

TITLE: Run ast-grep Search/Rewrite
DESCRIPTION: Executes a search or rewrite operation using ast-grep. This command can take a pattern, optional selector, rewrite string, language specification, and file paths as input. It supports various options for controlling the search behavior, output format, and interaction.

SOURCE: https://ast-grep.github.io/reference/cli

LANGUAGE: shell
CODE:
```
ast-grep run [OPTIONS] --pattern <PATTERN> [PATHS]...
```

----------------------------------------

TITLE: Configure Rule Test Directory in sgconfig.yml
DESCRIPTION: Specifies the directory for storing rule test cases in the `sgconfig.yml` file. This configuration is essential for ast-grep to locate and execute rule tests.

SOURCE: https://ast-grep.github.io/guide/test-rule

LANGUAGE: yaml
CODE:
```
ruleDirs:
  - rules
# testConfigs contains a list of test directories for rules.
testConfigs:
  - testDir: rule-tests
```

----------------------------------------

TITLE: Scan with a Rule File using Bash
DESCRIPTION: This bash command demonstrates how to use the `ast-grep scan` subcommand to run a predefined rule stored in a YAML file against a specific TypeScript file. It requires the rule definition to be saved to disk.

SOURCE: https://ast-grep.github.io/guide/rule-config

LANGUAGE: Bash
CODE:
```
ast-grep scan --rule no-await-in-promise-all.yml test.ts
```

----------------------------------------

TITLE: Parse JavaScript Code with ast-grep API
DESCRIPTION: Demonstrates parsing a JavaScript source string into an AST using the ast-grep JavaScript API. It shows how to import necessary components and use the parse function.

SOURCE: https://ast-grep.github.io/guide/api-usage/js-api

LANGUAGE: JavaScript
CODE:
```
import { parse, Lang } from '@ast-grep/napi';

let source = `console.log("hello world")`
const ast = parse(Lang.JavaScript, source)  // 1. parse the source
const root = ast.root()                     // 2. get the root
const node = root.find('console.log($A)')   // 3. find the node
node.getMatch('A').text()                   // 4. collect the info
// "hello world"
```

LANGUAGE: JavaScript
CODE:
```
import { Lang, parse } from '@ast-grep/napi';

const source = `console.log("hello world")`
const ast = parse(Lang.JavaScript, source)
```

LANGUAGE: JavaScript
CODE:
```
const root = ast.root() // root is an instance of SgNode
```

LANGUAGE: JavaScript
CODE:
```
const log = root.find('console.log($A)') // search node
const arg = log.getMatch('A') // get matched variable
arg.text() // "hello world"
```

----------------------------------------

TITLE: Using 'all' rule for rule order in ast-grep
DESCRIPTION: Demonstrates how to use the 'all' rule in ast-grep to enforce a specific order of rule application, particularly when meta-variables are used across multiple rules. This is useful for managing dependencies between rules.

SOURCE: https://ast-grep.github.io/advanced/faq

LANGUAGE: yaml
CODE:
```
rule:
  all:
    - pattern: "$A"
    - pattern: "$A = 1"

```

----------------------------------------

TITLE: Utilize Reusable Utility Rules
DESCRIPTION: Defines a dictionary of reusable utility rules that can be referenced in 'matches' to modularize rule definitions.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
utils:
  is-react:
    kind: function_declaration
    has: { kind: jsx_element }
```

----------------------------------------

TITLE: ast-grep Completions Command Usage
DESCRIPTION: Generates shell completion scripts for various shells.

SOURCE: https://ast-grep.github.io/reference/cli

LANGUAGE: shell
CODE:
```
ast-grep completions [SHELL]
```

----------------------------------------

TITLE: Add Detailed Linting Note
DESCRIPTION: Includes a more detailed explanation of the rule, supporting Markdown formatting.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
note:
  Use a _logger_ instead of `console`
```

----------------------------------------

TITLE: Define global utility rule
DESCRIPTION: Defines reusable rule logic in separate YAML files within global 'utilsDirs', making them accessible project-wide.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
# In utils/my-global-check.yml
id: my-global-check
language: javascript
rule:
  kind: variable_declarator
  has:
    kind: number_literal
```

----------------------------------------

TITLE: TypeScript Default and Namespace Imports
DESCRIPTION: Illustrates importing the default export from a module and importing all exports as a namespace.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: TypeScript
CODE:
```
// Default import
import hello from 'hello_world1';

// Namespace import
import * as something from 'hello_world2';
```

----------------------------------------

TITLE: ast-grep scan: Config Option
DESCRIPTION: Specifies the path to the ast-grep root configuration file, which defaults to `sgconfig.yml`.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan -c, --config <CONFIG_FILE>
```

----------------------------------------

TITLE: Process Multiple Files in Parallel with findInFiles
DESCRIPTION: Introduces `findInFiles` as a highly performant method for parsing and searching across multiple files. It bypasses Rust-JS communication overhead and utilizes parallel Rust threads, making it significantly faster than processing files individually in JavaScript.

SOURCE: https://ast-grep.github.io/guide/api-usage/performance-tip

LANGUAGE: typescript
CODE:
```
export function findInFiles(
  /** specify the file path and matcher */
  config: FindConfig,
  /** callback function for found nodes in a file */
  callback: (err: null | Error, result: SgNode[]) => void
): Promise<number>
```

----------------------------------------

TITLE: ast-grep Scan Options
DESCRIPTION: Configures scanning behavior, including rule files, filters, output formats, and parallel processing.

SOURCE: https://ast-grep.github.io/reference/cli

LANGUAGE: shell
CODE:
```
ast-grep scan -c CONFIG_FILE
ast-grep scan --config CONFIG_FILE
ast-grep scan -r RULE_FILE
ast-grep scan --rule RULE_FILE
ast-grep scan --inline-rules RULE_TEXT
ast-grep scan --filter REGEX
ast-grep scan --include-metadata
ast-grep scan -j NUM
ast-grep scan --threads NUM
ast-grep scan -i
ast-grep scan --interactive
ast-grep scan --color WHEN
ast-grep scan --report-style REPORT_STYLE
ast-grep scan --follow
ast-grep scan --json[=STYLE]
ast-grep scan --format FORMAT
ast-grep scan -U
ast-grep scan --update-all
ast-grep scan --no-ignore NO_IGNORE
ast-grep scan --stdin
ast-grep scan --globs GLOBS
ast-grep scan --inspect GRANULARITY
ast-grep scan --error[=RULE_ID...]
ast-grep scan --warning[=RULE_ID...]
ast-grep scan --info[=RULE_ID...]
ast-grep scan --hint[=RULE_ID...]
ast-grep scan --off[=RULE_ID...]
ast-grep scan --after NUM
ast-grep scan --before NUM
ast-grep scan --context NUM
ast-grep scan -A NUM
ast-grep scan -B NUM
ast-grep scan -C NUM
ast-grep scan -h
ast-grep scan --help
```

----------------------------------------

TITLE: Basic Pattern Matching in YAML
DESCRIPTION: Demonstrates a simple ast-grep rule using a string pattern to match a console log statement with a variable greeting. This rule targets a specific syntax structure.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: yaml
CODE:
```
rule:
  pattern: console.log($GREETING)
```

----------------------------------------

TITLE: Opt-in Type Refinement with ast-grep NAPI
DESCRIPTION: Demonstrates how to opt into type information for improved type checking and autocompletion using the ast-grep NAPI. It shows the difference between parsing untyped and typed ASTs.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
import { parse } from '@ast-grep/napi'
import TS from '@ast-grep/napi/lang/TypeScript' // import this can be slow
const untyped = parse(Lang.TypeScript, code)
const typed = parse<TS>(Lang.TypeScript, code)
```

----------------------------------------

TITLE: Find Nodes Efficiently with findAll
DESCRIPTION: Compares manual node traversal with the `findAll` method for finding nodes matching a specific rule. Manual traversal incurs significant Foreign Function Interface (FFI) calls per node, whereas `findAll` makes a single FFI call for the entire operation, resulting in much better performance.

SOURCE: https://ast-grep.github.io/guide/api-usage/performance-tip

LANGUAGE: typescript
CODE:
```
const root = sgroot.root()
function findMemberExpression(node: SgNode): SgNode[] {
  let ret: SgNode[] = []
  // `node.kind()` is a FFI call
  if (node.kind() === 'member_expression') {
    ret.push(node)
  }
  // `node.children()` is a FFI call
  for (let child of node.children()) {
    // recursion makes more FFI calls
    ret = ret.concat(findMemberExpression(child))
  }
  return ret
}
const nodes = findMemberExpression(root)
```

LANGUAGE: typescript
CODE:
```
const root = sgroot.root()
// only call FFI `findAll` once
const nodes = root.findAll({kind: 'member_expression'})
```

----------------------------------------

TITLE: Define Utility Rules
DESCRIPTION: Provides a dictionary of utility rules that can be used locally within 'matches'. The key is the utility rule ID, and the value is the rule object.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
utils:
  match-function:
    any:
      - kind: function
      - kind: function_declaration
      - kind: arrow_function
```

----------------------------------------

TITLE: Define Custom Languages with `customLanguages`
DESCRIPTION: Configure custom languages by specifying the path to their tree-sitter dynamic library, file extensions, and optional expando character or language symbol.

SOURCE: https://ast-grep.github.io/reference/sgconfig

LANGUAGE: yaml
CODE:
```
customLanguages:
  mojo:
      libraryPath: mojo.so     # path to dynamic library
      extensions: [mojo, 🔥]   # file extensions for this language
      expandoChar: _           # optional char to replace $ in your pattern
```

LANGUAGE: yaml
CODE:
```
customLanguages:
  mojo:
      libraryPath:
        aarch64-apple-darwin: lang-parser-mac.so
        x86_64-unknown-linux-gnu: lang-parser-linux.so
```

----------------------------------------

TITLE: Run ast-grep Scan (After Optimization)
DESCRIPTION: This command shows the ast-grep scan operation after performance optimizations have been applied. The output is redirected to /dev/null. The metrics indicate a significant reduction in execution time compared to the pre-optimized version.

SOURCE: https://ast-grep.github.io/blog/optimize-ast-grep

LANGUAGE: bash
CODE:
```
ast-grep scan -c eslint/sgconfig.yml TypeScript/src --json > /dev/null
2.82s user, 0.12s system, 301% cpu, 0.975 total
```

----------------------------------------

TITLE: Build WASM File (Bash)
DESCRIPTION: This command sequence shows how to generate and build a WebAssembly (WASM) file for a Tree-sitter parser, a necessary step for integrating new languages into the web playground.

SOURCE: https://ast-grep.github.io/contributing/add-lang

LANGUAGE: bash
CODE:
```
tree-sitter generate # if grammar is not generated before
tree-sitter build --wasm
```

----------------------------------------

TITLE: Show Lines After Match in ast-grep
DESCRIPTION: This option displays a specified number of lines following each match found by ast-grep. It conflicts with the --context flag. The default value is 0.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: bash
CODE:
```
-A, --after <NUM>
```

----------------------------------------

TITLE: Search for 'print' in Mojo files using ast-grep
DESCRIPTION: Demonstrates how to use the ast-grep command-line tool to search for a specific pattern ('print') within files of a custom language ('mojo'). This requires specifying the pattern and the language using the -p and -l flags respectively.

SOURCE: https://ast-grep.github.io/advanced/custom-language

LANGUAGE: bash
CODE:
```
ast-grep -p "print" -l mojo
```

----------------------------------------

TITLE: Code Property Graph (Joern) for Finding Exec Calls in Scala
DESCRIPTION: Illustrates using the Code Property Graph (CPG) with Scala and Joern's language to find all calls to the 'exec' function and print their locations within a codebase.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: scala
CODE:
```
import io.shiftleft.codepropertygraph.Cpg
import io.shiftleft.semanticcpg.language._

object FindExecCalls {
  def main(args: Array[String]): Unit = {
    // Load the C codebase
    val cpg: Cpg = Cpg.apply("path/to/your/codebase")

    // Find all `exec` function calls and print their locations
    cpg.call("exec").location.l.foreach(println)
  }
}
```

----------------------------------------

TITLE: Run Tests and Skip Snapshots (Bash)
DESCRIPTION: Executes the test suite for ast-grep rules, skipping the snapshot testing process. This is useful during initial rule development.

SOURCE: https://ast-grep.github.io/guide/test-rule

LANGUAGE: bash
CODE:
```
$ ast-grep test --skip-snapshot-tests

Running 1 tests
PASS no-await-in-loop  .........................
test result: ok. 1 passed; 0 failed;

```

----------------------------------------

TITLE: Matching AST nodes with 'kind' and 'pattern' in ast-grep
DESCRIPTION: Illustrates the correct way to match specific AST node types like 'field_definition' in JavaScript using ast-grep. It contrasts an incorrect approach using separate 'kind' and 'pattern' rules with the correct method of using a 'pattern' object with 'context' and 'selector'.

SOURCE: https://ast-grep.github.io/advanced/faq

LANGUAGE: yaml
CODE:
```
# Incorrect: two separate rules
pattern: a = 123
kind: field_definition
```

LANGUAGE: yaml
CODE:
```
# Correct: single pattern rule with context
pattern:
  context: 'class A { a = 123 }'
  selector: field_definition
```

----------------------------------------

TITLE: Include/Exclude Files with Globs
DESCRIPTION: Demonstrates using the `--globs` flag to include or exclude files and directories based on glob patterns, overriding other ignore logic.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
ast-grep run --globs '*.js' --globs '!*.test.js'
```

----------------------------------------

TITLE: Match Function Call in C
DESCRIPTION: This rule demonstrates how to match function calls in C code using ast-grep's contextual patterns and selectors. It addresses the ambiguity in C parsing where simple patterns might not correctly identify function calls, by using `context` and `selector` to precisely target `call_expression`.

SOURCE: https://ast-grep.github.io/catalog/c

LANGUAGE: yaml
CODE:
```
id: match-function-call
language: c
rule:
  pattern:
    context: $M($$$);
    selector: call_expression
```

LANGUAGE: c
CODE:
```
#define test(x) (2*x)
int a = test(2);
int main(){
    int b = test(2);
}
```

----------------------------------------

TITLE: Scan and Rewrite Code with ast-grep
DESCRIPTION: Scans and rewrites code based on provided configurations. This command takes file paths as arguments and can be further controlled by various options to manage the scanning and rewriting process.

SOURCE: https://ast-grep.github.io/reference/cli

LANGUAGE: shell
CODE:
```
ast-grep scan [OPTIONS] [PATHS]...
```

----------------------------------------

TITLE: TypeScript Dynamic Imports
DESCRIPTION: Demonstrates dynamic imports for loading modules asynchronously, including aliased and awaited imports.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: TypeScript
CODE:
```
// Dynamic imports
const dynamicModule = import('./dynamic1');
const {testing, testing123} = import('./dynamic2');
const asyncDynamicModule = await import('./async_dynamic1').then(module => module.default);
// Aliased dynamic import
const { originalIdentifier: aliasedDynamicImport} = await import('./async_dynamic2');
```

----------------------------------------

TITLE: Using ast-grep for Custom Rules in JavaScript/TypeScript
DESCRIPTION: This snippet recommends ast-grep for JavaScript/TypeScript projects that require simple custom linting rules. It highlights ast-grep as a native tooling option within this ecosystem.

SOURCE: https://ast-grep.github.io/blog/yaml-vs-dsl

LANGUAGE: bash
CODE:
```
If you are going to use native tooling in your JavaScript/TypeScript project, I recommend you to use oxlint and, if you need simple custom rules, ast-grep.
```

----------------------------------------

TITLE: Scan Code with Context using Before/After Flags
DESCRIPTION: Enhance CLI scan results by including surrounding code context with the `context`, `before`, and `after` flags. This allows users to see the bigger picture around code matches.

SOURCE: https://ast-grep.github.io/blog/stars-8000

LANGUAGE: bash
CODE:
```
sg scan --context <number> --before <number> --after <number>
```

----------------------------------------

TITLE: Haskell Language Support via tree-sitter
DESCRIPTION: ast-grep now includes support for Haskell, leveraging the `tree-sitter-haskell` parser. This expands the tool's language coverage.

SOURCE: https://ast-grep.github.io/blog/stars-6000

LANGUAGE: plaintext
CODE:
```
# Configuration or usage might involve specifying Haskell parser
```

----------------------------------------

TITLE: Debug ast-grep Query with Shell Command
DESCRIPTION: Shows how to use the `--debug-query` flag in the ast-grep CLI to inspect parsed AST nodes and metavariables. This helps in debugging patterns and understanding how ast-grep interprets the code.

SOURCE: https://ast-grep.github.io/advanced/faq

LANGUAGE: sh
CODE:
```
ast-grep run -p <PATTERN> --debug-query ast
```

----------------------------------------

TITLE: Rewrite Matched Code
DESCRIPTION: Illustrates how to use the `-r` or `--rewrite` flag to specify a string that will replace the AST nodes matched by the pattern.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
ast-grep run -p 'console.log($A)' -r 'console.warn($A)'
```

----------------------------------------

TITLE: ast-grep DSL: Pattern, Predicate, and Function Usage
DESCRIPTION: Explains the distinct usage of 'pattern', 'predicate', and 'function' concepts within the ast-grep DSL. 'Pattern' is used for matching, 'predicate' for conditions in 'where' clauses, and 'function' for assignments, insertions, or rewrites.

SOURCE: https://ast-grep.github.io/blog/yaml-vs-dsl

LANGUAGE: JavaScript
CODE:
```
`console.log` => `logger.info` where {
  $program <: contains_logger(), // pattern
  program_contains_logger(), // equivalent predicate
  $program => replace_logger(), // function
}
```

----------------------------------------

TITLE: Add Rule Note
DESCRIPTION: Provides additional notes or potential fixes for a rule. This field supports Markdown but cannot reference meta-variables.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
note: "Use a logger instead"
```

----------------------------------------

TITLE: SgNode Find and FindAll Method Overloads
DESCRIPTION: Defines the type signatures for the find and find_all methods on the SgNode class, showing support for both keyword argument rules and Config objects.

SOURCE: https://ast-grep.github.io/guide/api-usage/py-api

LANGUAGE: python
CODE:
```
# Search
class SgNode:
    @overload
    def find(self, **kwargs: Unpack[Rule]) -> Optional[SgNode]: ...
    @overload
    def find_all(self, **kwargs: Unpack[Rule]) -> List[SgNode]: ...
    @overload
    def find(self, config: Config) -> Optional[SgNode]: ...
    @overload
    def find_all(self, config: Config) -> List[SgNode]: ...
```

----------------------------------------

TITLE: JavaScript API: Parse Source Code
DESCRIPTION: Demonstrates how to use the deprecated `js.parse` function from the `@ast-grep/napi` package to parse a JavaScript source string into an Abstract Syntax Tree (AST) root.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: javascript
CODE:
```
import { js } from '@ast-grep/napi'

const source = `console.log("hello world")`
const ast = js.parse(source)
```

----------------------------------------

TITLE: Update All Rewrites Without Confirmation
DESCRIPTION: Explains the `-U` or `--update-all` flag, which applies all rewrite operations without requiring user confirmation.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
ast-grep run -p 'foo()' -r 'bar()' -U
```

----------------------------------------

TITLE: Set Pattern Strictness
DESCRIPTION: Shows how to control the strictness of the pattern matching algorithm using the `--strictness` flag, affecting how many nodes are matched.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
ast-grep run -p 'foo()' --strictness cst
```

----------------------------------------

TITLE: CSS Support in Playground
DESCRIPTION: The online playground now supports CSS code snippets, allowing users to test ast-grep rules directly on CSS code.

SOURCE: https://ast-grep.github.io/blog/stars-8000

LANGUAGE: css
CODE:
```
.container {
  display: flex;
  justify-content: center;
}
```

----------------------------------------

TITLE: ast-grep Python API Integration
DESCRIPTION: Highlights the planned Python API support for ast-grep, allowing users to write custom scripts and integrate ast-grep's capabilities into Python workflows.

SOURCE: https://ast-grep.github.io/blog/stars-3000

LANGUAGE: python
CODE:
```
import ast_grep

# Example usage (conceptual)
results = ast_grep.search(pattern='...', path='.')
ast_grep.rewrite(results, '...')

```

----------------------------------------

TITLE: Python API: SgRoot Class
DESCRIPTION: Defines the `SgRoot` class in the Python API, which serves as the entry point for ast-grep. It allows parsing a source string into a syntax tree and accessing the root node.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: python
CODE:
```
class SgRoot:
    def __init__(self, src: str, language: str) -> None: ...
    def root(self) -> SgNode: ...
```

----------------------------------------

TITLE: Complete ast-grep Rule for Barrel to Single Imports
DESCRIPTION: The final ast-grep rule combining pattern matching, rewriters with case conversion, and transformation to refactor JavaScript barrel imports into individual imports.

SOURCE: https://ast-grep.github.io/reference/yaml/rewriter

LANGUAGE: YAML
CODE:
```
id: barrel-to-single
language: JavaScript
rule:
  pattern: import {$$$IDENTS} from './module'
rewriters:
- id: rewrite-identifer
  rule:
    pattern: $IDENT
    kind: identifier
  transform:
    LIB: { convert: { source: $IDENT, toCase: lowerCase } }
  fix: import $IDENT from './module/$LIB'
transform:
  IMPORTS:
    rewrite:
      rewriters: [rewrite-identifer]
      source: $$$IDENTS
      joinBy: "\n"
fix: $IMPORTS
```

----------------------------------------

TITLE: ast-grep scan: Inline Rules Option
DESCRIPTION: Scans the codebase with rules provided directly as text. This is useful for testing rules without creating separate files. Multiple rules can be provided, separated by `---`. This option is incompatible with `--rule`.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan --inline-rules <RULE_TEXT>
```

----------------------------------------

TITLE: ast-grep Playground: Advanced Rule Definition (YAML)
DESCRIPTION: For advanced usage, the playground's 'YAML' tab allows defining comprehensive scan rules. This includes specifying rule objects, IDs, messages, severity, and other metadata, mirroring the functionality of `ast-grep scan`.

SOURCE: https://ast-grep.github.io/reference/playground

LANGUAGE: yaml
CODE:
```
id: complex-rule
message: Detects complex patterns.
severity: error
language: javascript
rule:
  pattern: "async function $FUNC($ARGS) { ... }"
  inside:
    pattern: "$BODY"
rewrite:
  code: "async function $FUNC($ARGS) {
    // Rewritten body
    $BODY
  }"
```

----------------------------------------

TITLE: ast-grep: ESQuery Style Kind for Rules
DESCRIPTION: Demonstrates how to use ESQuery style selectors for the `kind` field in ast-grep rules, offering a more concise way to define AST queries compared to relational rules.

SOURCE: https://ast-grep.github.io/blog/new-ver-39

LANGUAGE: yaml
CODE:
```
kind: call_expression > identifier
```

LANGUAGE: yaml
CODE:
```
kind: identifier
inside:
  kind: call_expression
```

LANGUAGE: yaml
CODE:
```
kind: call_expression identifier
# is equivalent to
kind: identifier
inside:
  kind: call_expression
  stopBy: end  # note the stopBy
```

LANGUAGE: yaml
CODE:
```
kind: decorator + method_definition
# is equivalent to
kind: method_definition
follows:
  kind: decorator
```

LANGUAGE: yaml
CODE:
```
kind: decorator ~ method_definition
# is equivalent to
kind: method_definition
follows:
  kind: decorator
  stopBy: end  # note the stopBy
```

----------------------------------------

TITLE: Comby Pattern Matching and Rewriting
DESCRIPTION: Comby is a tool for matching and rewriting code across different languages and file formats using structural patterns. It is designed to be generic and robust, handling various syntactic variations without relying on language-specific parsers.

SOURCE: https://ast-grep.github.io/advanced/tool-comparison

LANGUAGE: comby
CODE:
```
::
  [find]
  "console.log(:[arg])"
::
  [rewrite]
  "logger.info(:[arg])"
```

----------------------------------------

TITLE: Asynchronous Code Parsing with napi parseAsync
DESCRIPTION: Leverage the `parseAsync` function in ast-grep's Node.js API (napi) to utilize multiple cores for faster code parsing, significantly improving performance in Node.js environments.

SOURCE: https://ast-grep.github.io/blog/stars-5000

LANGUAGE: javascript
CODE:
```
import { parseAsync } from "@ast-grep/napi";

const code = "const a = 1;";
const ast = await parseAsync(code, { language: "javascript" });
```

----------------------------------------

TITLE: Specify Language for Pattern
DESCRIPTION: Shows how to specify the programming language for the AST pattern using the `-l` or `--lang` flag. This is crucial for accurate parsing and matching.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
ast-grep run -p 'foo()' -l javascript
```

----------------------------------------

TITLE: Define Pattern to Find Code
DESCRIPTION: Specifies the core Abstract Syntax Tree (AST) pattern to search for within the code.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
rule:
  pattern: 'console.log($$$ARGS)'
```

----------------------------------------

TITLE: Inline Rule Scan using Bash
DESCRIPTION: This bash command shows how to execute an ast-grep rule directly from the command line without saving it to a file, using the `--inline-rules` option. This is useful for quick checks or programmatic usage.

SOURCE: https://ast-grep.github.io/guide/rule-config

LANGUAGE: Bash
CODE:
```
ast-grep scan --inline-rules '
id: no-await-in-promise-all
language: TypeScript
rule:
  pattern: Promise.all($A)
  has:
    pattern: await $_
    stopBy: end
' test.ts
```

----------------------------------------

TITLE: Show Context Lines Around Match in ast-grep
DESCRIPTION: This option displays a specified number of lines both before and after each match found by ast-grep. It is equivalent to using both -A and -B with the same value and conflicts with both flags. The default value is 0.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: bash
CODE:
```
-C, --context <NUM>
```

----------------------------------------

TITLE: JavaScript Function Matching (Smart)
DESCRIPTION: Demonstrates how ast-grep's default 'smart' matching skips unnamed nodes like 'async' keywords, allowing patterns to match both plain and async functions.

SOURCE: https://ast-grep.github.io/advanced/match-algorithm

LANGUAGE: javascript
CODE:
```
// function $A() {}
function foo() {}    // matched
async function bar() {} // matched
```

----------------------------------------

TITLE: ast-grep YAML Rule Transformation
DESCRIPTION: Illustrates the use of the 'conversion' rule within ast-grep's YAML configuration for transforming code matches to different cases (e.g., upper, lower, camelcase).

SOURCE: https://ast-grep.github.io/blog/stars-3000

LANGUAGE: yaml
CODE:
```
rule:
  kind: conversion
  ০০০: upper
```

----------------------------------------

TITLE: Match JSON Key-Value Pair with Context in YAML
DESCRIPTION: Demonstrates how to match a key-value pair in JSON using ast-grep by providing context and a selector. This is useful when a direct pattern of a code fragment is not valid.

SOURCE: https://ast-grep.github.io/advanced/faq

LANGUAGE: yaml
CODE:
```
rule:
  pattern:
    context: '{"key": "$VAL"}'
    selector: pair
```

----------------------------------------

TITLE: Scan Code as a Linter with ast-grep
DESCRIPTION: Utilize ast-grep to lint code using Abstract Syntax Tree (AST) patterns. This command initiates a scan for linting purposes.

SOURCE: https://ast-grep.github.io/index

LANGUAGE: shell
CODE:
```
ast-grep scan
```

----------------------------------------

TITLE: Rewrite JavaScript var to let
DESCRIPTION: This command demonstrates how to use ast-grep to rewrite JavaScript code. It replaces all 'var' statements with 'let' by specifying a pattern and a rewrite rule.

SOURCE: https://ast-grep.github.io/guide/introduction

LANGUAGE: bash
CODE:
```
ast-grep --pattern 'var code = $PAT' --rewrite 'let code = $PAT' --lang js
```

----------------------------------------

TITLE: GenAI Script Wrapper for Ast-grep AST Manipulation
DESCRIPTION: Microsoft's GenAI Script integrates LLMs into scripting with a JavaScript-like syntax. It provides a wrapper around ast-grep to search and transform a script's Abstract Syntax Tree (AST), enabling efficient source code modification.

SOURCE: https://ast-grep.github.io/blog/more-llm-support

LANGUAGE: JavaScript
CODE:
```
GenAIScript is a scripting language that integrates LLMs into the scripting process using a simplified JavaScript syntax. Supported by our VS Code GenAIScript extension, it allows users to create, debug, and automate LLM-based scripts.
Notably, GenAIScript provides a wrapper around `ast-grep` to search for patterns within a script's AST and transform that AST. This enables the creation of highly efficient scripts that modify source code by precisely targeting specific code elements.
```

----------------------------------------

TITLE: Show Lines Before Match in ast-grep
DESCRIPTION: This option displays a specified number of lines preceding each match found by ast-grep. It conflicts with the --context flag. The default value is 0.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: bash
CODE:
```
-B, --before <NUM>
```

----------------------------------------

TITLE: Search Nodes Using Config Object
DESCRIPTION: Demonstrates how to use a Config object with the find method, including the use of 'constraints' to further filter search results based on specific criteria like regular expressions.

SOURCE: https://ast-grep.github.io/guide/api-usage/py-api

LANGUAGE: python
CODE:
```
# will find a string node with text 'hello world'
root.root().find({
  "rule": {
    "pattern": "print($A)",
  },
  "constraints": {
    "A": { "regex": "hello" }
  }
})
# will return None because constraints are not satisfied
root.root().find({
  "rule": {
    "pattern": "print($A)",
  },
  "constraints": {
    "A": { "regex": "no match" }
  }
})
```

----------------------------------------

TITLE: Define Rewriter Rules
DESCRIPTION: A list of rewriter rules, similar to ordinary YAML rules but containing only finding and patching fields, plus an ID. Used in 'rewrite' transformation.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
rewriters:
- id: stringify
  rule: { pattern: "'' + $A" }
  fix: "String($A)"
```

----------------------------------------

TITLE: Configure Strictness with CLI Flag
DESCRIPTION: This snippet demonstrates how to set the strictness level to 'ast' using the `--strictness` flag with the `ast-grep run` command. This is a direct way to control the matching behavior for a specific run.

SOURCE: https://ast-grep.github.io/advanced/match-algorithm

LANGUAGE: bash
CODE:
```
ast-grep run -p '$FOO($BAR)' --strictness ast
```

----------------------------------------

TITLE: GritQL Query Language
DESCRIPTION: GritQL is an embedded query language for Grit, designed for searching and transforming source code. It incorporates features from logic programming and imperative programming languages, offering powerful capabilities for code manipulation.

SOURCE: https://ast-grep.github.io/advanced/tool-comparison

LANGUAGE: gritql
CODE:
```
SELECT function
WHERE function.name = "myFunction"
REWRITE function AS "newFunction"
```

----------------------------------------

TITLE: Configure Rule Directories with `ruleDirs`
DESCRIPTION: Specify directories where ast-grep should discover YAML rules. Paths are resolved relative to the `sgconfig.yml` location.

SOURCE: https://ast-grep.github.io/reference/sgconfig

LANGUAGE: yaml
CODE:
```
ruleDirs:
- rules
- anotherRuleDir
```

----------------------------------------

TITLE: Define local utility rule
DESCRIPTION: Defines reusable rule logic within the 'utils' field of the current configuration file, accessible only locally.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
rules:
  - id: find-my-pattern
    rule:
      matches: my-local-check
utils:
  my-local-check:
    kind: identifier
    regex: '^my'
```

----------------------------------------

TITLE: Search Files with Language Globs in napi
DESCRIPTION: The Node.js API (napi) now supports language globs in `findInFiles`, simplifying the process of searching code patterns across non-standard file types, such as finding HTML within `.vue` files.

SOURCE: https://ast-grep.github.io/blog/stars-5000

LANGUAGE: javascript
CODE:
```
import { findInFiles } from "@ast-grep/napi";

const results = await findInFiles("*.vue", {
  language: "html",
  pattern: "<div class='...'>"
});
```

----------------------------------------

TITLE: Enable ast-grep shell completion in zsh
DESCRIPTION: This command adds the necessary line to the `.zshrc` file to enable ast-grep shell autocompletion for zsh users. It evaluates the generated completion script.

SOURCE: https://ast-grep.github.io/guide/tooling-overview

LANGUAGE: shell
CODE:
```
eval "$(ast-grep completions)"
```

----------------------------------------

TITLE: ast-grep Core: Parsing and Matching
DESCRIPTION: ast-grep's core functionality relies on Tree-Sitter for parsing code into Abstract Syntax Trees (AST) and then matching these AST nodes against user queries. This process is implemented in Rust for high performance.

SOURCE: https://ast-grep.github.io/advanced/how-ast-grep-works

LANGUAGE: Rust
CODE:
```
/*
  ast-grep's core functionality is divided into two main components: parsing and matching.
  1. Parsing with Tree-Sitter: The core of ast-grep's functionality relies on Tree-Sitter Parsers. TreeSitter is a powerful parsing library that converts source code into an Abstract Syntax Tree (AST). This tree structure represents the syntactic structure of the code, making it easier to analyze and manipulate.
  2. Tree Matching: Once the code is parsed into an AST, the ast-grep core takes over and finds the matching AST nodes based on the input queries. Written in Rust, ast-grep ensures efficient performance by utilizing full CPU cores. This means it can handle large codebases and perform complex searches and transformations quickly.
*/

```

----------------------------------------

TITLE: Match Binary Expressions with Operator in YAML
DESCRIPTION: This YAML rule demonstrates how to match binary expressions in source code, specifically capturing the operator using the `$$OP` meta-variable. It utilizes the `kind` and `has` fields to target binary expressions and their operators.

SOURCE: https://ast-grep.github.io/advanced/pattern-parse

LANGUAGE: yaml
CODE:
```
rule:
  kind: binary_expression
  has:
    field: operator
    pattern: $$OP
```

----------------------------------------

TITLE: Include Files for Rule Application
DESCRIPTION: Specifies glob patterns for files that should be included when applying the rule.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
files: ['src/**/*.js']
```

----------------------------------------

TITLE: Control ast-grep JSON Output Format
DESCRIPTION: This option allows users to specify how ast-grep's output matches are formatted in JSON. Options include 'pretty' for human-readable indented JSON, 'stream' for one JSON object per line, and 'compact' for a single-line, whitespace-minimized JSON array. The default is 'pretty'.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: bash
CODE:
```
--json[=<STYLE>]
```

----------------------------------------

TITLE: TypeScript Require Patterns
DESCRIPTION: Shows how to use the `require` function to import modules in a CommonJS style, including destructured and aliased requires.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: TypeScript
CODE:
```
// Require patterns
const mod = require('some-module');
require('polyfill');

// Destructured require
const { test122, test2 } = require('./destructured1');
// Aliased require
const { test122: test123, test2: test23, test3: test33 } = require('./destructured2');
```

----------------------------------------

TITLE: Match greeting following another greeting (ast-grep YAML)
DESCRIPTION: This ast-grep rule uses the 'follows' relational rule to find a 'console.log(\'hello\');' statement that appears after a 'console.log(\'world\');' statement. It demonstrates how 'follows' can be used to establish order between code elements.

SOURCE: https://ast-grep.github.io/guide/rule-config/relational-rule

LANGUAGE: yaml
CODE:
```
pattern: console.log('hello');
follows:
  pattern: console.log('world');
```

----------------------------------------

TITLE: Match node using utility rule
DESCRIPTION: Applies a predefined utility rule to match the target node, enabling modularity in rule definitions.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
matches: is-function-call
```

----------------------------------------

TITLE: Parse Code Asynchronously with parseAsync
DESCRIPTION: Demonstrates the use of `parseAsync` for potentially faster code parsing compared to the synchronous `parse` method. `parseAsync` leverages Node.js's libuv thread pool for parallel processing, which is beneficial when handling large amounts of code or when the main thread is already busy.

SOURCE: https://ast-grep.github.io/guide/api-usage/performance-tip

LANGUAGE: typescript
CODE:
```
import { js } from '@ast-grep/napi';
// only one thread parsing
const root = js.parse('console.log("hello world")')
// better, can use multiple threads
const root = await js.parseAsync('console.log("hello world")')
```

----------------------------------------

TITLE: Full Rule Object Structure in YAML
DESCRIPTION: This YAML snippet illustrates the comprehensive structure of an ast-grep rule object, including atomic, relational, and composite rule types. It shows various fields like `pattern`, `kind`, `regex`, `inside`, `has`, `all`, `any`, and `not` for defining complex matching criteria.

SOURCE: https://ast-grep.github.io/guide/rule-config

LANGUAGE: YAML
CODE:
```
rule:
  # atomic rule
  pattern: 'search.pattern'
  kind: 'tree_sitter_node_kind'
  regex: 'rust|regex'
  # relational rule
  inside: { pattern: 'sub.rule' }
  has: { kind: 'sub_rule' }
  follows: { regex: 'can|use|any' }
  precedes: { kind: 'multi_keys', pattern: 'in.sub' }
  # composite rule
  all: [ {pattern: 'match.all'}, {kind: 'match_all'} ]
  any: [ {pattern: 'match.any'}, {kind: 'match_any'} ]
  not: { pattern: 'not.this' }
  matches: 'utility-rule'
```

----------------------------------------

TITLE: Migrate XState v4 to v5 (JavaScript)
DESCRIPTION: This set of rules automates the migration of XState applications from version 4 to version 5. It addresses changes in creating machines, providing configurations, and interpreting actors, leveraging ast-grep's transformation and multi-rule capabilities.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: migrate-import-name
utils:
  FROM_XS: {kind: import_statement, has: {kind: string, regex: xstate}}
  XS_EXPORT:
    kind: identifier
    inside: { has: { matches: FROM_XS }, stopBy: end }
rule: { regex: ^Machine|interpret$, pattern: $IMPT, matches: XS_EXPORT }
transform:
  STEP1:
    replace: {by: create$1, replace: (Machine), source: $IMPT }
  FINAL:
    replace: { by: createActor, replace: interpret, source: $STEP1 }
fix: $FINAL

---

id: migrate-to-provide
rule: { pattern: $MACHINE.withConfig }
fix: $MACHINE.provide

---

id: migrate-to-actors
rule:
  kind: property_identifier
  regex: ^services$
  inside: { pattern:  $M.withConfig($$$ARGS), stopBy: end }
fix: actors
```

----------------------------------------

TITLE: Control Context Lines with -A, -B, -C
DESCRIPTION: Flags `-A` (`--after`), `-B` (`--before`), and `-C` (`--context`) control the number of lines displayed around each match. `-A` shows lines after, `-B` shows lines before, and `-C` shows lines both before and after. `-C` conflicts with both `-A` and `-B`.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: bash
CODE:
```
sg -A 5
sg --after 5
sg -B 3
sg --before 3
sg -C 4
sg --context 4
```

----------------------------------------

TITLE: Rust API for ast-grep
DESCRIPTION: Use ast-grep's Rust API for the most efficient code manipulation. This API provides direct access to the core functionalities for advanced users familiar with Rust.

SOURCE: https://ast-grep.github.io/guide/api-usage

LANGUAGE: rust
CODE:
```
use ast_grep_core::Language;
use ast_grep_core::matcher::Matcher;
use ast_grep_core::sg_node::SgNode;

fn main() {
    let code = "fn add(a: i32, b: i32) -> i32 {
    return a + b;
}";
    let lang = Language::from_code("rust").unwrap();
    let mut matcher = SgNode::new(code, lang).get_matcher("$.fn").unwrap();
    let matches = matcher.find_all().unwrap();
    for m in matches {
        println!("{}", m.text());
    }
}
```

----------------------------------------

TITLE: Define Linting Message
DESCRIPTION: Provides a concise message explaining the rule, which can include matched variables.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
message: "Avoid using $MATCH in production."
```

----------------------------------------

TITLE: Scan StdIn Code with a Single Rule in ast-grep
DESCRIPTION: When scanning standard input code (`--stdin`) with ast-grep, only a single rule can be applied, specified via the `--rule` or `-r` flag. This rule must match the language of the provided standard input code.

SOURCE: https://ast-grep.github.io/guide/tooling-overview

LANGUAGE: bash
CODE:
```
echo "print('Hello world')" | ast-grep scan --rule "python-rule.yml"
```

----------------------------------------

TITLE: Perform Complex Transformations with Rewriters
DESCRIPTION: Uses a list of rewriters for complex code transformations, defining rules and fixes for each rewriter.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
rewriters:
- id: remove-quotes
  rule: { pattern: "'$A'" }
  fix: "$A"
```

----------------------------------------

TITLE: Apply Auto Fixes
DESCRIPTION: Specifies a pattern or FixConfig object for automatically fixing issues. It can reference meta-variables from the rule.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
fix: logger.log($$$ARGS)
```

LANGUAGE: yaml
CODE:
```
fix: ""
```

----------------------------------------

TITLE: Match package import in Golang
DESCRIPTION: This rule finds package import statements in Go code, using `kind` and `has` to identify specific import patterns.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Go
CODE:
```
kind: "import"
pattern: "import $A"
has: "$A"
```

----------------------------------------

TITLE: Scan Code and Report Errors
DESCRIPTION: Illustrates the output of the `ast-grep scan` command when run against code containing a violation of the defined rule (e.g., using `eval`). It shows the error message, location, and a summary of findings.

SOURCE: https://ast-grep.github.io/guide/scan-project

LANGUAGE: bash
CODE:
```
error[no-eval]: Add your rule message here....
  ┌─ test.js:1:1
  │
1 │ eval('hello')
  │ ^^^^^^^^^^^^^

Error: 1 error(s) found in code.
Help: Scan succeeded and found error level diagnostics in the codebase.
```

----------------------------------------

TITLE: Traverse AST with SgNode in Python
DESCRIPTION: Details methods for navigating the abstract syntax tree (AST) using SgNode, including accessing the root, fields, parent, children, and siblings.

SOURCE: https://ast-grep.github.io/guide/api-usage/py-api

LANGUAGE: python
CODE:
```
# Tree Traversal
class SgNode:
    def get_root(self) -> SgRoot: ...
    def field(self, name: str) -> Optional[SgNode]: ...
    def parent(self) -> Optional[SgNode]: ...
    def child(self, nth: int) -> Optional[SgNode]: ...
    def children(self) -> List[SgNode]: ...
    def ancestors(self) -> List[SgNode]: ...
    def next(self) -> Optional[SgNode]: ...
    def next_all(self) -> List[SgNode]: ...
    def prev(self) -> Optional[SgNode]: ...
    def prev_all(self) -> List[SgNode]: ...
```

----------------------------------------

TITLE: TypeScript Multiline Imports
DESCRIPTION: Illustrates how to import multiple named exports from a module using a multiline import statement.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: TypeScript
CODE:
```
// Multiline imports
import {
    longImport1,
    longImport2 as alias2,
    longImport3
} from './multiline';
```

----------------------------------------

TITLE: YAML: Define String Transformations
DESCRIPTION: Demonstrates the YAML syntax for defining string transformations using `replace` and `substring` operations on meta-variables.

SOURCE: https://ast-grep.github.io/guide/rewrite/transform

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR:
    replace:
      source: $VAR_NAME
      replace: regex
      by: replacement
  ANOTHER_NEW_VAR:
    substring:
      source: $NEW_VAR
      startChar: 1
      endChar: -1
```

LANGUAGE: yaml
CODE:
```
transfrom:
  NEW_VAR: replace($VAR_NAME, replace=regex, by=replacement)
  ANOTHER_NEW_VAR: substring($NEW_VAR, startChar=1, endChar=-1)
```

----------------------------------------

TITLE: YAML Rule with Constraints: Identifier Kind
DESCRIPTION: This YAML configuration demonstrates how to use constraints in ast-grep rules. It targets 'console.log' calls and specifically constrains the matched meta-variable '$GREET' to be an 'identifier' kind, excluding string literals.

SOURCE: https://ast-grep.github.io/guide/project/lint-rule

LANGUAGE: yaml
CODE:
```
rule:
  pattern: console.log($GREET)
constraints:
  GREET:
    kind: identifier

```

----------------------------------------

TITLE: Generate Snapshots (Bash)
DESCRIPTION: Command to generate or update snapshot files for ast-grep rules, capturing the expected output of rule violations.

SOURCE: https://ast-grep.github.io/guide/test-rule

LANGUAGE: bash
CODE:
```
my-awesome-rules/
  |- rules/
  | |- no-await-in-loop.yml               # test file
  |- rule-tests/
  | |- no-await-in-loop-test.yml          # rule file
  | |- __snapshots__/                     # snapshots folder
  | |  |- no-await-in-loop-snapshot.yml   # generated snapshot file!
  |- sgconfig.yml

```

----------------------------------------

TITLE: Inspect ast-grep File/Rule Scanning
DESCRIPTION: The --inspect flag provides insights into ast-grep's internal file and rule filtering process. It outputs information about scanned and skipped files/rules to stderr without affecting the search results. Possible values are 'nothing' (default), 'summary', and 'entity'.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: bash
CODE:
```
--inspect <GRANULARITY>
```

----------------------------------------

TITLE: Configure Mojo Custom Language in sgconfig.yml
DESCRIPTION: Defines a custom language named 'mojo' in ast-grep's configuration. It specifies the path to the dynamic library, the file extensions associated with the language, and an optional character for meta-variable expansion.

SOURCE: https://ast-grep.github.io/advanced/custom-language

LANGUAGE: yaml
CODE:
```
ruleDirs: ["./rules"]
customLanguages:
  mojo:
      libraryPath: mojo.so     # path to dynamic library
      extensions: [mojo, 🔥]   # file extensions for this language
      expandoChar: _           # optional char to replace $ in your pattern
```

----------------------------------------

TITLE: Complete Rule for Refactoring Barrel Imports
DESCRIPTION: This is the complete ast-grep rule that refactors barrel imports. It combines the pattern matching, the rewriter definition for individual imports, and the transformation to generate new import statements, finally using the transformed output in the `fix` field.

SOURCE: https://ast-grep.github.io/advanced/find-n-patch

LANGUAGE: yaml
CODE:
```
rule:
  pattern: import {$$$IDENTS} from './barrel'
rewriters:
- id: rewrite-identifer
  rule:
    pattern: $IDENT
    kind: identifier
  fix: import $IDENT from './barrel/$IDENT'
transform:
  IMPORTS:
    rewrite:
      rewriters: [rewrite-identifer]
      source: $$$IDENTS
      joinBy: "\n"
fix: $IMPORTS
```

----------------------------------------

TITLE: ast-grep scan: Stdin Option
DESCRIPTION: Enables reading code from standard input, allowing for code streaming into the scan process.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan --stdin
```

----------------------------------------

TITLE: Configurable Fixes in ast-grep Rule YAML
DESCRIPTION: Shows how to define multiple interactive fixes within a rule's YAML configuration in ast-grep. Each fix has a title and a template for code transformation.

SOURCE: https://ast-grep.github.io/blog/interactive-demo

LANGUAGE: YAML
CODE:
```
rules:
  - id: example-rule
    message: Example message
    severity: warning
    language: typescript
    pattern:
      file: src/app/**/*.ts
      source:
        - "@Input() {{ name }}: {{ type }};"
    fix:
      - title: Add undefined to Type
        template: "@Input() {{ name }}: {{ type }} | undefined;"
      - title: Make Input Required
        template: "@Input({ required: true })
{{ name }}: {{ type }};"
```

----------------------------------------

TITLE: Apply Constraints to Meta-variables
DESCRIPTION: Adds additional rules to filter meta-variable matches found by the pattern.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
constraints:
  ARG: { kind: 'string' } }
```

----------------------------------------

TITLE: ast-grep scan: Follow Symlinks Option
DESCRIPTION: Instructs ast-grep to follow symbolic links during directory traversal. This is disabled by default and includes checks for symbolic link loops and broken links.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan --follow
```

----------------------------------------

TITLE: Enforce Clean Architecture Domain Imports (Kotlin)
DESCRIPTION: This rule ensures the 'domain' package in a Clean Architecture project does not import classes from 'data' or 'presentation' packages. It uses a YAML configuration to define the pattern, constraints on captured paths, and applies the rule specifically to Kotlin files within the domain package.

SOURCE: https://ast-grep.github.io/catalog/kotlin

LANGUAGE: yaml
CODE:
```
id: import-dependency-violation
message: Import Dependency Violation
notes: Ensures that imports comply with architectural rules.
severity: error
rule:
  pattern: import $PATH  # capture the import statement
constraints:
  PATH: # find specific package imports
    any:
    - regex: com\.example(\.\w+)*\.data
    - regex: com\.example(\.\w+)*\.presentation
files:  # apply only to domain package
- com/example/domain/**/*.kt
```

LANGUAGE: kotlin
CODE:
```
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelScope
import com.example.customlintexample.data.models.UserDto
import com.example.customlintexample.domain.usecases.GetUserUseCase
import com.example.customlintexample.presentation.states.MainState
import dagger.hilt.android.lifecycle.HiltViewModel
```

----------------------------------------

TITLE: Debug ast-grep Queries with --debug-query
DESCRIPTION: The `--debug-query` flag significantly improves debugging by providing prettified pattern output, AST/CST visualization, and colorized output. This makes troubleshooting and refining rules a smoother, more visual experience.

SOURCE: https://ast-grep.github.io/blog/stars-8000

LANGUAGE: bash
CODE:
```
sg <command> --debug-query
```

----------------------------------------

TITLE: ast-grep: Convert string case with underscore separator
DESCRIPTION: Demonstrates converting a string's case using the kebab-case format and joining words with an underscore. This transformation takes a source meta-variable, converts its case, and joins the resulting words.

SOURCE: https://ast-grep.github.io/reference/yaml/transformation

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR:
    convert:
      toCase: kebabCase
      separatedBy: [underscore]
      source: $VAR
```

LANGUAGE: yaml
CODE:
```
# string style for ast-grep 0.38.3+
transform:
  NEW_VAR: convert($VAR, toCase=kebabCase, separatedBy=[underscore])
```

----------------------------------------

TITLE: Add Tree-sitter Dependency (TOML)
DESCRIPTION: Adds the Tree-sitter crate for a specific language as an optional dependency in the `language` crate's Cargo.toml file.

SOURCE: https://ast-grep.github.io/contributing/add-lang

LANGUAGE: toml
CODE:
```
# Cargo.toml
[dependencies]
...
tree-sitter-ruby = {version = "0.20.0", optional = true }
...
```

----------------------------------------

TITLE: ast-grep scan: JSON Output Option
DESCRIPTION: Outputs scan matches in structured JSON format. An optional style (`pretty`, `stream`, `compact`) can be specified using `--json=<STYLE>`. The default is `pretty`-printing. This option conflicts with `--interactive`.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan --json[=<STYLE>]
```

----------------------------------------

TITLE: Match console.log with argument
DESCRIPTION: This rule matches a console.log call that has a single argument represented by the placeholder $ARG.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
pattern: console.log($ARG)
```

----------------------------------------

TITLE: ast-grep scan: Update All Option
DESCRIPTION: Applies all rewrite operations without requiring confirmation.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan -U, --update-all
```

----------------------------------------

TITLE: Match C Function Call with Contextual Pattern
DESCRIPTION: This snippet demonstrates how to match C function calls using ast-grep's contextual patterns and selectors. It addresses the parsing differences in tree-sitter-c, where `test($A)` might be misinterpreted. By using `context: $M($$$);` and `selector: call_expression`, it ensures only function calls are matched.

SOURCE: https://ast-grep.github.io/catalog/c/match-function-call

LANGUAGE: yaml
CODE:
```
id: match-function-call
language: c
rule:
  pattern:
    context: $M($$$);
    selector: call_expression
```

LANGUAGE: c
CODE:
```
#define test(x) (2*x)
int a = test(2);
int main(){
    int b = test(2);
}
```

----------------------------------------

TITLE: Match Package Import Rule in YAML
DESCRIPTION: This YAML snippet defines an ast-grep rule to match package imports in Go code. It uses a regex pattern to identify specific packages, which can be customized for various auditing and management tasks.

SOURCE: https://ast-grep.github.io/catalog/go/match-package-import

LANGUAGE: yaml
CODE:
```
id: match-package-import
language: go
rule:
  kind: import_spec
  has:
    regex: PACKAGE_PATTERN_HERE
```

----------------------------------------

TITLE: Python Lambda to Def Conversion with Indentation Preservation
DESCRIPTION: Demonstrates converting a Python lambda function to a def function using ast-grep. The rewrite preserves the indentation of the replacement code relative to the original source code structure.

SOURCE: https://ast-grep.github.io/guide/rewrite-code

LANGUAGE: YAML
CODE:
```
id: lambda-to-def
language: Python
rule:
  pattern: '$B = lambda: $R'
fix: |-
  def $B():
    return $R
```

LANGUAGE: Python
CODE:
```
b = lambda: 123
```

LANGUAGE: Python
CODE:
```
def b():
  return 123
```

LANGUAGE: Python
CODE:
```
if True:
    c = lambda: 456
    def c():     
      return 456
```

----------------------------------------

TITLE: Inspect ast-grep File/Rule Scanning with --inspect
DESCRIPTION: The `--inspect` flag provides insights into ast-grep's internal file and rule filtering process. It outputs how many files and rules are scanned or skipped, and the reasons why, to stderr without affecting the search results. The output format is `sg: <GRANULARITY>|<ENTITY_TYPE>|<ENTITY_IDENTIFIERS_SEPARATED_BY_COMMA>: KEY=VAL`.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: bash
CODE:
```
sg --inspect=summary
sg --inspect=entity
```

----------------------------------------

TITLE: Semgrep: Match Sequences with Ellipses and Metavariables
DESCRIPTION: This YAML-formatted Semgrep pattern demonstrates the use of ellipsis metavariables to match sequences of AST nodes. It's designed to find function calls with a specific structure, like `foo(ARGS, 3, ARGS)`.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: YAML
CODE:
```
# combine ellipses and metavariables to match a sequence of ASTs
# note the ellipsis is not valid programming language syntax
pattern: foo($...ARGS, 3, $...ARGS)
# this pattern will match foo(1, 2, 3, 4, 5)
```

----------------------------------------

TITLE: Python API for ast-grep
DESCRIPTION: Leverage ast-grep's Python API, built with PyO3, to interact with syntax trees and generate text patches. This API is suitable for complex code transformations and logic.

SOURCE: https://ast-grep.github.io/guide/api-usage

LANGUAGE: python
CODE:
```
from ast_grep_py import AstGrep

def example():
    code = "def add(a, b):
    return a + b"
    grep = AstGrep(code, lang='python')
    result = grep.print('$.function')
    print(result)

example()
```

----------------------------------------

TITLE: TypeScript: Create a Counted Promise for File Processing
DESCRIPTION: This TypeScript function `countedPromise` wraps a callback-style asynchronous function to ensure all file processing is completed before the promise resolves. It handles the scenario where the initial function might return before all callbacks are invoked by introducing a mechanism to wait for all callbacks to signal completion.

SOURCE: https://ast-grep.github.io/guide/api-usage/performance-tip

LANGUAGE: TypeScript
CODE:
```
type Callback = (t: any, cb: any) => Promise<number>
function countedPromise<F extends Callback>(func: F) {
  type P = Parameters<F>
  return async (t: P[0], cb: P[1]) => {
    let i = 0
    let fileCount: number | undefined = undefined
    // resolve will be called after all files are processed
    let resolve = () => {}
    function wrapped(...args: any[]) {
      let ret = cb(...args)
      if (++i === fileCount) resolve()
      return ret
    }
    fileCount = await func(t, wrapped as P[1])
    // not all files are processed, await `resolve` to be called
    if (fileCount > i) {
      await new Promise<void>(r => resolve = r)
    }
    return fileCount
  }
}
```

----------------------------------------

TITLE: Configurable Threads for Performance Tuning
DESCRIPTION: Allows users to fine-tune ast-grep's performance by configuring the number of threads it uses. This helps optimize the tool for specific hardware and project needs.

SOURCE: https://ast-grep.github.io/blog/stars-8000

LANGUAGE: bash
CODE:
```
export ASTGREP_THREADS=4
ast-grep scan src/
```

----------------------------------------

TITLE: Java Code Search with Metavariable (Hole)
DESCRIPTION: Illustrates searching for Java code patterns using a placeholder (metavariable) for a specific code block. This technique allows for more flexible structural matching, as exemplified by ast-grep.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: Java
CODE:
```
public void actionClose (JButton a, JFrame f) {
 $$$BODY
}
```

----------------------------------------

TITLE: Update Bevy Dependencies in Cargo.toml
DESCRIPTION: Modifies the 'Cargo.toml' file to update the Bevy dependency version from '0.9.0' to '0.10.0' for both default and development dependencies. This is a key step in the Bevy version upgrade process.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: diff
CODE:
```
diff --git a/Cargo.toml b/Cargo.toml
index c495381..9e99a3b 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -14,11 +14,11 @@
 homepage = "https://github.com/zkat/big-brain"
 
 [workspace]
-
 [dependencies]
-bevy = { version = "0.9.0", default-features = false }
+bevy = { version = "0.10.0", default-features = false }
 big-brain-derive = { version = "=0.16.0", path = "./derive" }
 
 [dev-dependencies]
-bevy = { version = "0.9.0", default-features = true }
+bevy = { version = "0.10.0", default-features = true }
 rand = { version = "0.8.5", features = ["small_rng"] }
 
 [features]

```

----------------------------------------

TITLE: Set Report Style with --report-style
DESCRIPTION: The `--report-style` flag determines the formatting of diagnostic output. Options include 'rich' for detailed previews, 'medium' for condensed messages with line numbers, and 'short' for minimal output.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: bash
CODE:
```
sg --report-style=rich
sg --report-style=medium
sg --report-style=short
```

----------------------------------------

TITLE: Programmatic Usage with Node.js Binding
DESCRIPTION: Integrate ast-grep into your Node.js projects using its native bindings. This allows programmatic access to syntax trees with jQuery-like utility methods and optional type safety.

SOURCE: https://ast-grep.github.io/index

LANGUAGE: javascript
CODE:
```
npm install @ast-grep/napi
```

----------------------------------------

TITLE: CodeQL: Find Redundant If Statements
DESCRIPTION: This SQL-like CodeQL query identifies redundant if statements in Python code where the first statement within the if block is a 'pass' statement. It demonstrates logic-based querying for code analysis.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: SQL
CODE:
```
from If ifstmt, Stmt pass
where pass = ifstmt.getStmt(0) and
  pass instanceof Pass
select ifstmt, "This 'if' statement is redundant."
```

----------------------------------------

TITLE: Customize Labels for Code Highlighting
DESCRIPTION: Applies customized labels to specific parts of the matched code for highlighting purposes.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
labels:
  ARG:
    style: 'primary'
    message: 'The argument to log'
```

----------------------------------------

TITLE: Apply Constraints to Meta-variables
DESCRIPTION: Filters matches by applying additional meta-variable patterns. Constraints apply to single meta-variables like '$ARG' and are processed after the main rule.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
rule:
  pattern: console.log($ARG)
constraints:
  ARG:
    kind: number
```

----------------------------------------

TITLE: TypeScript Named and Aliased Imports
DESCRIPTION: Shows how to import specific exports from a module using named imports and how to rename them using aliases.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: TypeScript
CODE:
```
//@ts-nocheck
// Named import
import { testing } from './tests';

// Aliased import
import { testing as test } from './tests2';
```

----------------------------------------

TITLE: Find key/value and Show Message
DESCRIPTION: This rule is designed to find key/value pairs and display associated messages in YAML files. It uses a general pattern matching approach.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: YAML
CODE:
```
kind: "mapping"
pattern: "$A: $B"
```

----------------------------------------

TITLE: Set Number of Threads
DESCRIPTION: Illustrates how to set the approximate number of threads to use for the operation with the `-j` or `--threads` flag. A value of 0 uses heuristics.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
ast-grep run -j 4
```

----------------------------------------

TITLE: Add Custom Metadata to Rules
DESCRIPTION: Allows adding extra information to rules, such as CVE or OWASP data, for external programs. This metadata can be included in JSON output when the `--include-metadata` flag is used.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
metadata:
  extraField: 'Extra information for other usages'
  complexData:
    key: value
```

----------------------------------------

TITLE: Match console.log in JavaScript using ast-grep
DESCRIPTION: This bash command illustrates the simplicity of matching 'console.log' with ast-grep. It uses a straightforward pattern to find the target code.

SOURCE: https://ast-grep.github.io/guide/introduction

LANGUAGE: bash
CODE:
```
ast-grep -p "console.log"
```

----------------------------------------

TITLE: FindConfig Interface for File Searching
DESCRIPTION: Defines the `FindConfig` interface, used in the `findInFiles` method. It specifies the paths to search and the matching criteria using `NapiConfig`.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: typescript
CODE:
```
interface FindConfig {
  // You can search multiple paths
  // ast-grep will recursively find all files under the paths.
  paths: Array<string>
  // Specify what nodes will be matched
  matcher: NapiConfig
}

```

----------------------------------------

TITLE: ast-grep API: SgNode Search Methods
DESCRIPTION: Illustrates the usage of `find` and `findAll` methods on an `SgNode` object for searching within the AST. It covers different matcher types (string, number, config) and return values.

SOURCE: https://ast-grep.github.io/guide/api-usage/js-api

LANGUAGE: TypeScript
CODE:
```
// search
class SgNode {
  find(matcher: string): SgNode | null
  find(matcher: number): SgNode | null
  find(matcher: NapiConfig): SgNode | null
  findAll(matcher: string): Array<SgNode>
  findAll(matcher: number): Array<SgNode>
  findAll(matcher: NapiConfig): Array<SgNode>
}
```

LANGUAGE: TypeScript
CODE:
```
// basic find example
root.find('console.log($A)')    // returns SgNode of call_expression
let l = Lang.JavaScript         // calling kind function requires Lang
const kind = kind(l, 'string')  // convert kind name to kind id number
root.find(kind)                 // returns SgNode of string
root.find('notExist')           // returns null if not found

// basic find all example
const nodes = root.findAll('function $A($$$) {$$$}')
Array.isArray(nodes)     // true, findAll returns SgNode
nodes.map(n => n.text()) // string array of function source
const empty = root.findAll('not exist') // returns []
empty.length === 0 // true

// find i.e. `console.log("hello world")` using a NapiConfig
const node = root.find({
  rule: {
    pattern: "console.log($A)"
  },
  constraints: {
    A: { regex: "hello" }
  }
})
```

----------------------------------------

TITLE: Disable Ignore Files
DESCRIPTION: Explains how to use the `--no-ignore` flag to disable respecting hidden files, dot files, or version control ignore files.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: shell
CODE:
```
ast-grep run --no-ignore hidden --no-ignore dot
```

----------------------------------------

TITLE: Inspect Parser Output with tree-sitter-cli
DESCRIPTION: Provides the command to inspect the Concrete Syntax Tree (CST) of a file using the tree-sitter-cli tool. This is useful for debugging and understanding how a file is parsed by the underlying Tree-sitter parser.

SOURCE: https://ast-grep.github.io/advanced/custom-language

LANGUAGE: bash
CODE:
```
tree-sitter parse [file_path]
```

----------------------------------------

TITLE: Generate ast-grep shell completion script
DESCRIPTION: This command generates shell completion scripts for ast-grep. The `<SHELL>` argument specifies the shell type (e.g., bash, zsh). If omitted, ast-grep infers the shell from the environment. The generated script enables tab completion for ast-grep commands.

SOURCE: https://ast-grep.github.io/guide/tooling-overview

LANGUAGE: shell
CODE:
```
ast-grep completions <SHELL>
```

----------------------------------------

TITLE: ast-grep Scan with Update All
DESCRIPTION: ast-grep now optimizes input stream usage when updating all rules. This allows for the use of `ast-grep scan --update-all` without unnecessary stream operations.

SOURCE: https://ast-grep.github.io/blog/stars-6000

LANGUAGE: bash
CODE:
```
ast-grep scan --update-all
```

----------------------------------------

TITLE: Define Custom GraphQL Language in ast-grep
DESCRIPTION: This YAML configuration registers 'graphql' as a custom language for ast-grep. It specifies the path to the Tree-sitter parser library, the file extensions associated with GraphQL, and an expando character for pattern matching.

SOURCE: https://ast-grep.github.io/advanced/language-injection

LANGUAGE: yaml
CODE:
```
customLanguages:
  graphql:
    libraryPath: graphql.so # the graphql tree-sitter parser dynamic library
    extensions: [graphql]   # graphql file extension
    expandoChar: $
```

----------------------------------------

TITLE: Replace CoreStage with CoreSet in Rust Imports
DESCRIPTION: This snippet shows how to use ast-grep to replace an outdated import statement from `CoreStage` to `CoreSet` in Rust code. It utilizes a simple pattern matching and rewrite rule.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: shell
CODE:
```
ast-grep -p 'CoreStage' -r CoreSet -i
```

LANGUAGE: diff
CODE:
```
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -223,7 +223,7 @@ pub struct BigBrainPlugin;

 impl Plugin for BigBrainPlugin {
     fn build(&self, app: &mut App) {
-        use CoreStage::*;
+        use CoreSet::*;

```

----------------------------------------

TITLE: Specify Target Language
DESCRIPTION: Defines the programming language for parsing and the file extension to include in matching. This is a required string field with a predefined list of valid values.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
language: JavaScript
```

----------------------------------------

TITLE: Compile Parser Manually with GCC
DESCRIPTION: Manually compiles a Tree-sitter parser into a dynamic library using GCC, specifying paths for headers, output, scanner, and parser files.

SOURCE: https://ast-grep.github.io/advanced/custom-language

LANGUAGE: shell
CODE:
```
gcc -shared -fPIC -fno-exceptions -g -I {header_path} -o {lib_path} -O2 {scanner_path} -xc {parser_path} {other_flags}
```

----------------------------------------

TITLE: Match Binary Expressions with Meta-variables
DESCRIPTION: Demonstrates how to correctly match binary expressions using meta-variables in ast-grep patterns. It highlights that meta-variables are typically parsed as identifiers and shows an incorrect pattern that fails due to consecutive identifiers, suggesting the use of atomic rules like `kind: binary_expression` as a valid alternative.

SOURCE: https://ast-grep.github.io/advanced/pattern-parse

LANGUAGE: ast-grep
CODE:
```
$LEFT $OP $RIGHT
```

----------------------------------------

TITLE: Apply Auto-fix (String Template)
DESCRIPTION: Provides a string template to automatically fix the matched code.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
fix: "logger.log($$$ARGS)"
```

----------------------------------------

TITLE: Format String Vulnerability Diff (JavaScript)
DESCRIPTION: This JavaScript code snippet shows a diff illustrating the fix for format string vulnerabilities. It highlights the difference between vulnerable code (passing variables directly) and fixed code (using `"%s"` as an explicit format specifier) for `fprintf` and `sprintf` calls.

SOURCE: https://ast-grep.github.io/catalog/cpp/fix-format-vuln

LANGUAGE: javascript
CODE:
```
// Error
fprintf(stderr, out);
fprintf(stderr, "%s", out);
sprintf(&buffer[2], obj->Text);
sprintf(&buffer[2], "%s", obj->Text);
sprintf(buf1, Text_String(TXT_WAITING_FOR_CONNECTIONS));
sprintf(buf1, "%s", Text_String(TXT_WAITING_FOR_CONNECTIONS));
// OK
fprintf(stderr, "%s", out);
sprintf(&buffer[2], "%s", obj->Text);
sprintf(buf1, "%s", Text_String(TXT_WAITING_FOR_CONNECTIONS));
```

----------------------------------------

TITLE: Migrate XState Import Names and Function Calls
DESCRIPTION: This rule migrates XState's `Machine` and `interpret` imports and usage to `createMachine` and `createActor`. It utilizes utility rules for identifying XState imports and applies transformations to rename functions.

SOURCE: https://ast-grep.github.io/catalog/typescript/migrate-xstate-v5

LANGUAGE: yaml
CODE:
```
id: migrate-import-name
utils:
  FROM_XS: {kind: import_statement, has: {kind: string, regex: xstate}}
  XS_EXPORT:
    kind: identifier
    inside: { has: { matches: FROM_XS }, stopBy: end }
rule: { regex: ^Machine|interpret$, pattern: $IMPT, matches: XS_EXPORT }
transform:
  STEP1:
    replace: {by: create$1, replace: (Machine), source: $IMPT }
  FINAL:
    replace: { by: createActor, replace: interpret, source: $STEP1 }
fix: $FINAL
```

----------------------------------------

TITLE: Replace Code Snippets using SgNode in Python
DESCRIPTION: Explains how to modify code by creating an Edit object using the replace method on an SgNode and then applying these edits to generate new source code.

SOURCE: https://ast-grep.github.io/guide/api-usage/py-api

LANGUAGE: python
CODE:
```
class Edit:
    # The start position of the edit
    start_pos: int
    # The end position of the edit
    end_pos: int
    # The text to be inserted
    inserted_text: str

class SgNode:
    # Edit
    def replace(self, new_text: str) -> Edit: ...
    def commit_edits(self, edits: List[Edit]) -> str: ...
```

LANGUAGE: python
CODE:
```
root = SgRoot("print('hello world')", "python").root()
node = root.find(pattern="print($A)")
edit = node.replace("logger.log('bye world')")
new_src = node.commit_edits([edit])
# "logger.log('bye world')"
```

----------------------------------------

TITLE: TypeScript Side-effect and Type Imports
DESCRIPTION: Demonstrates importing modules solely for their side effects and importing types for type checking.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: TypeScript
CODE:
```
// Side-effect import
import '@fastify/static';

// Type import
import {type hello1243 as testing} from 'hello';
```

----------------------------------------

TITLE: Rewrite Method to Function Call in C
DESCRIPTION: This snippet shows how to refactor C code that simulates object-oriented programming using structs and function pointers. It transforms calls like `some_struct->field.method()` into a more standard function call format `method(&some_struct->field)`, improving code clarity and potentially performance.

SOURCE: https://ast-grep.github.io/catalog/c

LANGUAGE: yaml
CODE:
```
id: method_receiver
language: c
rule:
  pattern: $R.$METHOD($$$ARGS)
transform:
  MAYBE_COMMA:
    replace:
      source: $$$ARGS
      replace: '^.+'
      by: ', '
fix:
  $METHOD(&$R$MAYBE_COMMA$$$ARGS)
```

LANGUAGE: c
CODE:
```
void test_func() {
    some_struct->field.method();
    some_struct->field.other_method(1, 2, 3);
}
```

LANGUAGE: c
CODE:
```
void test_func() {
    some_struct->field.method();
    method(&some_struct->field);
    some_struct->field.other_method(1, 2, 3);
    other_method(&some_struct->field, 1, 2, 3);
}
```

----------------------------------------

TITLE: TypeScript Multiple Import Lines
DESCRIPTION: Demonstrates importing multiple named exports from the same module across different import statements.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: TypeScript
CODE:
```
// Multiple import lines from the same file
import { one, two as alias, three } from './multiple';
import { never, gonna, give, you, up } from './multiple';
```

----------------------------------------

TITLE: TypeScript Imports with Comments
DESCRIPTION: Shows how comments can be included within import statements, including block comments and end-of-line comments.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: TypeScript
CODE:
```
// Comments in imports
import /* test */ {
    // Comment in import
    commentedImport
} from './commented'; // End of line comment
```

----------------------------------------

TITLE: Use stdin with ast-grep CLI
DESCRIPTION: The `--stdin` flag in the ast-grep CLI enables interactive code matching by continuously waiting for input from the terminal. This is useful for testing patterns against code snippets directly.

SOURCE: https://ast-grep.github.io/blog/stars-5000

LANGUAGE: bash
CODE:
```
echo "const foo = 1;" | sg --stdin --pattern "$foo"
```

----------------------------------------

TITLE: Output ast-grep Results in JSON Format
DESCRIPTION: Outputs ast-grep results in JSON format, facilitating integration with other command-line tools like `jq` and `jless` for data processing and visualization. The JSON output is an array of match objects, each containing details like text, range, file, replacement, and language.

SOURCE: https://ast-grep.github.io/guide/tooling-overview

LANGUAGE: bash
CODE:
```
ast-grep run -p 'Some($A)' -r 'None' --json | jq '.[].replacement' | jless
```

LANGUAGE: json
CODE:
```
[
  {
    "text": "import",
    "range": {
      "byteOffset": {
        "start": 66,
        "end": 72
      },
      "start": {
        "line": 3,
        "column": 2
      },
      "end": {
        "line": 3,
        "column": 8
      }
    },
    "file": "website/src/vite-env.d.ts",
    "replacement": "require",
    "language": "TypeScript"
  }
]
```

----------------------------------------

TITLE: ast-grep NAPI for JavaScript Parsing and Finding Nodes
DESCRIPTION: Demonstrates how to use ast-grep's NAPI in TypeScript to parse JavaScript code, find specific nodes using a pattern, and extract information from matched elements.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: typescript
CODE:
```
import { parse, Lang } from '@ast-grep/napi'

let source = `console.log("hello world")`
const ast = parse(Lang.JavaScript, source)  // 1. parse the source
const root = ast.root()                     // 2. get the root
const node = root.find('console.log($A)')   // 3. find the node
node.getMatch('A').text()                   // 4. collect the info
// "hello world"
```

----------------------------------------

TITLE: Detect Host and Port in YAML
DESCRIPTION: This YAML rule helps detect specific host and port configurations in your code. It checks if the port is set to something other than 8000 or if a particular host is used, providing an error message to prompt configuration updates.

SOURCE: https://ast-grep.github.io/catalog/yaml

LANGUAGE: yaml
CODE:
```
id: detect-host-port
message: You are using $HOST on Port $PORT, please change it to 8000
severity: error
rule:
  any:
    - pattern: |
        port: $PORT
    - pattern: |
        host: $HOST
```

----------------------------------------

TITLE: Execute Language Method Macro (Rust)
DESCRIPTION: This snippet demonstrates how to extend the `execute_lang_method` macro to handle the new 'Ruby' language variant, mapping it to the corresponding Rust implementation.

SOURCE: https://ast-grep.github.io/contributing/add-lang

LANGUAGE: rust
CODE:
```
// lib.rs
macro_rules! execute_lang_method {
  ($me: path, $method: ident, $($pname:tt),*) => {
    use SupportLang as S;
    match $me {
      ...
      S::Ruby => Ruby.$method($($pname,)*), 
    }
  }
}
```

----------------------------------------

TITLE: TypeScript Default and Namespace Imports
DESCRIPTION: Illustrates importing the default export from a module and importing all exports as a namespace.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: TypeScript
CODE:
```
// Default import
import hello from 'hello_world1';

// Namespace import
import * as something from 'hello_world2';
```

----------------------------------------

TITLE: ast-grep YAML Rule for C Code
DESCRIPTION: Defines a rule for ast-grep using YAML to match function calls in C code. It specifies a pattern and a selector for identifying specific AST nodes.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: yaml
CODE:
```
id: match-function-call
language: c
rule:
  pattern:
    context: $M($$$);
    selector: call_expression
```

----------------------------------------

TITLE: Customizing Language Extensions with languageGlobs
DESCRIPTION: Provides a pro tip on how to customize the file extensions associated with languages in ast-grep using the `languageGlobs` configuration option.

SOURCE: https://ast-grep.github.io/reference/languages

LANGUAGE: Shell
CODE:
```
languageGlobs:
  javascript: "*.js,*.mjs,*.cjs"
  typescript: "*.ts,*.mts,*.cts"
```

----------------------------------------

TITLE: YAML Rule for Console Log Pattern
DESCRIPTION: This snippet demonstrates how to define a pattern in a YAML rule to find 'console.log' calls with a captured argument within function declarations.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: yaml
CODE:
```
rule:
  pattern: console.log($A)
  inside:
    kind: function_declaration
```

----------------------------------------

TITLE: ast-grep Rewriting Multiple Rules
DESCRIPTION: Shows how ast-grep's rewriting functionality can fix multiple rules simultaneously, a feature useful for batch code modifications.

SOURCE: https://ast-grep.github.io/blog/stars-3000

LANGUAGE: bash
CODE:
```
ast-grep rewrite --rule1 ruleA --rule2 ruleB
```

----------------------------------------

TITLE: SgNode Class for AST Traversal and Manipulation
DESCRIPTION: Details the `SgNode` class, the primary interface for navigating and interacting with the AST. It includes methods for reading node information, checking node properties, traversing the tree, finding nodes, and performing edits.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: typescript
CODE:
```
class SgNode {
  // Read node's information
  range(): Range
  isLeaf(): boolean
  isNamed(): boolean
  isNamedLeaf(): boolean
  kind(): string
  // check if node has kind
  is(kind: string): boolean
  // for TypeScript type narrow
  kindToRefine: string
  text(): string
  // Check if node meets certain patterns
  matches(m: string): boolean
  inside(m: string): boolean
  has(m: string): boolean
  precedes(m: string): boolean
  follows(m: string): boolean
  // Get nodes' matched meta variables
  getMatch(m: string): SgNode | null
  getMultipleMatches(m: string): Array<SgNode>
  // Get node's SgRoot
  getRoot(): SgRoot
  // Traverse node tree
  children(): Array<SgNode>
  find(matcher: string | number | NapiConfig): SgNode | null
  findAll(matcher: string | number | NapiConfig): Array<SgNode>
  field(name: string): SgNode | null
  parent(): SgNode | null
  child(nth: number): SgNode | null
  ancestors(): Array<SgNode>
  next(): SgNode | null
  nextAll(): Array<SgNode>
  prev(): SgNode | null
  prevAll(): Array<SgNode>
  // Edit
  replace(text: string): Edit
  commitEdits(edits: Edit[]): string
}

```

----------------------------------------

TITLE: Ant Design Vue Upgrade Diff (HTML)
DESCRIPTION: This HTML snippet shows the difference (diff) after applying the ast-grep rule to upgrade Ant Design Vue components. It highlights the changes where the `visible` attribute has been successfully replaced with `open` for `a-modal` and `a-tooltip`, while the `a-tag` component remains unchanged.

SOURCE: https://ast-grep.github.io/catalog/html/upgrade-ant-design-vue

LANGUAGE: html
CODE:
```
<template>
  <a-modal :visible="visible">content</a-modal> // [!code --] 
  <a-modal :open="visible">content</a-modal> // [!code ++]
  <a-tooltip :visible="visible" /> // [!code --]
  <a-tooltip :open="visible" /> // [!code ++]
  <a-tag :visible="visible">tag</a-tag>
</template>
```

----------------------------------------

TITLE: Define Rule Pattern
DESCRIPTION: Specifies the method to find matching AST nodes using a pattern. This is a required 'Rule' object.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
rule:
  pattern: console.log($$$ARGS)
```

----------------------------------------

TITLE: Python API: SgNode Class Methods
DESCRIPTION: Details the methods available in the `SgNode` class of the Python API for inspecting, refining, searching, traversing, and editing syntax tree nodes.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: python
CODE:
```
class SgNode:
    # Node Inspection
    def range(self) -> Range: ...
    def is_leaf(self) -> bool: ...
    def is_named(self) -> bool: ...
    def is_named_leaf(self) -> bool: ...
    def kind(self) -> str: ...
    def text(self) -> str: ...

    # Refinement
    def matches(self, **rule: Unpack[Rule]) -> bool: ...
    def inside(self, **rule: Unpack[Rule]) -> bool: ...
    def has(self, **rule: Unpack[Rule]) -> bool: ...
    def precedes(self, **rule: Unpack[Rule]) -> bool: ...
    def follows(self, **rule: Unpack[Rule]) -> bool: ...
    def get_match(self, meta_var: str) -> Optional[SgNode]: ...
    def get_multiple_matches(self, meta_var: str) -> List[SgNode]: ...
    def get_transformed(self, meta_var: str) -> Optional[str]: ...
    def __getitem__(self, meta_var: str) -> SgNode: ...

    # Search
    @overload
    def find(self, config: Config) -> Optional[SgNode]: ...
    @overload
    def find(self, **kwargs: Unpack[Rule]) -> Optional[SgNode]: ...
    @overload
    def find_all(self, config: Config) -> List[SgNode]: ...
    @overload
    def find_all(self, **kwargs: Unpack[Rule]) -> List[SgNode]: ...

    # Tree Traversal
    def get_root(self) -> SgRoot: ...
    def field(self, name: str) -> Optional[SgNode]: ...
    def parent(self) -> Optional[SgNode]: ...
    def child(self, nth: int) -> Optional[SgNode]: ...
    def children(self) -> List[SgNode]: ...
    def ancestors(self) -> List[SgNode]: ...
    def next(self) -> Optional[SgNode]: ...
    def next_all(self) -> List[SgNode]: ...
    def prev(self) -> Optional[SgNode]: ...
    def prev_all(self) -> List[SgNode]: ...

    # Edit
    def replace(self, new_text: str) -> Edit: ...
    def commit_edits(self, edits: List[Edit]) -> str: ...
```

----------------------------------------

TITLE: Search GraphQL in JavaScript using ast-grep
DESCRIPTION: This command demonstrates how to search for GraphQL fragments within JavaScript files using ast-grep's `--inline-rules` option. It specifies a rule to find fragments with the kind 'fragment_spread' within the 'graphql' language.

SOURCE: https://ast-grep.github.io/advanced/language-injection

LANGUAGE: sh
CODE:
```
ast-grep scan --inline-rules="{id: test, language: graphql, rule: {kind: fragment_spread}}"
```

----------------------------------------

TITLE: Migrate *_filter to *_action in Ruby on Rails
DESCRIPTION: This rule migrates `before_filter`, `after_filter`, and `around_filter` to their `_action` equivalents in Ruby on Rails controllers. It's useful for updating code to comply with Rails 5.0+ deprecation notices. The rule identifies filter patterns and replaces the `_filter` suffix with `_action`.

SOURCE: https://ast-grep.github.io/catalog/ruby

LANGUAGE: yaml
CODE:
```
id: migration-action-filter
language: ruby
rule:
  any:
    - pattern: before_filter $$$ACTION
    - pattern: around_filter $$$ACTION
    - pattern: after_filter $$$ACTION
  has:
    pattern: $FILTER
    field: method
fix:
  $NEW_ACTION $$$ACTION
transform:
  NEW_ACTION:
    replace:
      source: $FILTER
      replace: _filter
      by: _action
```

LANGUAGE: ruby
CODE:
```
class TodosController < ApplicationController
  before_filter :authenticate
  around_filter :wrap_in_transaction, only: :show
  after_filter do |controller|
    flash[:error] = "You must be logged in"
  end

  def index
    @todos = Todo.all
  end
end
```

LANGUAGE: ruby
CODE:
```
class TodosController < ApplicationController
  before_action :authenticate
  before_filter :authenticate
  around_action :wrap_in_transaction, only: :show
  around_filter :wrap_in_transaction, only: :show
  after_action do |controller|
     flash[:error] = "You must be logged in"
  end
  after_filter do |
    flash[:error] = "You must be logged in"
  end

  def index
    @todos = Todo.all
  end
end
```

----------------------------------------

TITLE: fieldChildren Method in NAPI and PyO3
DESCRIPTION: Provides the `fieldChildren` method in NAPI and PyO3 for easier access to named children nodes. This simplifies AST traversal and manipulation in API integrations.

SOURCE: https://ast-grep.github.io/blog/stars-8000

LANGUAGE: typescript
CODE:
```
import { sg, SgNode } from "@ast-grep/napi";

const node: SgNode = sg.parse("const a = 1;");
const identifierNode = node.fieldChildren("declarator")[0].fieldChildren("id")[0];
console.log(identifierNode.text()); // Output: "a"
```

LANGUAGE: python
CODE:
```
from ast_grep_py import SgRoot

root = SgRoot.new_from_text("const a = 1;")
node = root.root().field_children("declarator")[0].field_children("id")[0]
print(node.text())
# Output: "a"
```

----------------------------------------

TITLE: Chai `should` to `expect` Assertion Diff
DESCRIPTION: Provides a side-by-side comparison (diff) of JavaScript code before and after migrating Chai assertions from the `should` style to the `expect` style. This highlights the changes made by the conversion rules.

SOURCE: https://ast-grep.github.io/catalog/typescript/switch-from-should-to-expect

LANGUAGE: javascript
CODE:
```
it('should produce an instance of chokidar.FSWatcher', () => {
  watcher.should.be.an.instanceof(chokidar.FSWatcher); 
  expect(watcher).instanceOf(chokidar.FSWatcher);
});
it('should expose public API methods', () => {
  watcher.on.should.be.a('function');   
  watcher.emit.should.be.a('function'); 
  watcher.add.should.be.a('function');  
  watcher.close.should.be.a('function'); 
  watcher.getWatched.should.be.a('function'); 
  expect(watcher.on).to.be.a('function'); 
  expect(watcher.emit).to.be.a('function'); 
  expect(watcher.add).to.be.a('function'); 
  expect(watcher.close).to.be.a('function'); 
  expect(watcher.getWatched).to.be.a('function'); 
});
```

----------------------------------------

TITLE: Run Rules Inline with ast-grep CLI
DESCRIPTION: Execute ast-grep rules directly from the command line without creating separate files. This feature allows passing patterns, rules, and input as strings, making it ideal for scripting and quick operations.

SOURCE: https://ast-grep.github.io/blog/stars-5000

LANGUAGE: bash
CODE:
```
sg --inline-rules --pattern "<a href={...}>" --input "<a href=\"https://example.com\">"
```

----------------------------------------

TITLE: Match console.log with variable extraction
DESCRIPTION: This YAML rule demonstrates how to match a `console.log` statement and extract a meta-variable ($GREET) from its argument. The pattern `console.log($GREET)` targets the function call and captures the argument within the parentheses.

SOURCE: https://ast-grep.github.io/guide/rule-config

LANGUAGE: yaml
CODE:
```
rule:
  pattern: console.log($GREET)
```

----------------------------------------

TITLE: Interactive Mode Scan in ast-grep
DESCRIPTION: Activates ast-grep's interactive mode for code analysis, allowing users to see diff views and contextual notes when a rule matches a pattern.

SOURCE: https://ast-grep.github.io/blog/interactive-demo

LANGUAGE: Shell
CODE:
```
ast-grep scan --interactive
```

----------------------------------------

TITLE: Improved Pattern Matching with Expando Character
DESCRIPTION: Expando character replacement has been enhanced to improve pattern parsing. This allows for more permissive patterns, such as matching `$METAVAR` with different syntax kinds.

SOURCE: https://ast-grep.github.io/blog/stars-6000

LANGUAGE: plaintext
CODE:
```
# Example of a permissive pattern
$METAVAR
```

----------------------------------------

TITLE: Migrate XState to v5 from v4
DESCRIPTION: This rule facilitates the migration from XState v4 to v5, applying regex transformations and utility functions to update the code.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TypeScript
CODE:
```
kind: "call"
pattern: "createMachine($A)"
regex: "/\s*\{\s*initial:\s*'[^']*'[^}]*\}/"
utils: "$A"
transform: "createMachine($A)"
+4
```

----------------------------------------

TITLE: ast-grep scan: Include Metadata Option
DESCRIPTION: Includes rule metadata in the JSON output. This option requires the `--json` mode and is false by default.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan --include-metadata
```

----------------------------------------

TITLE: Ensure Clean Architecture
DESCRIPTION: This rule enforces principles of Clean Architecture by checking for specific patterns and constraints in Kotlin code.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Kotlin
CODE:
```
kind: "class"
pattern: "class $A {...}"
constraints: "$A"
```

----------------------------------------

TITLE: Match console.log with ast-grep
DESCRIPTION: This snippet demonstrates how to use ast-grep to find all `console.log()` calls in JavaScript code. The pattern `console.log($MATCH)` uses a wildcard `$MATCH` to capture any argument passed to `console.log`.

SOURCE: https://ast-grep.github.io/playground

LANGUAGE: JavaScript
CODE:
```
// console.log() will be matched by pattern!
// click diff tab to see rewrite.
function tryAstGrep() {
console.log('matched in metavar!')
}
const multiLineExpression =
console
.log('Also matched!')
if (true) {
const notThis = 'console.log("not me")'
} else {
console.debug('matched by YAML')
}
```

LANGUAGE: JavaScript
CODE:
```
console.log($MATCH)
```

----------------------------------------

TITLE: Migrate Chai `should.be.an.instanceof` to `expect().instanceOf`
DESCRIPTION: This rule converts Chai's `should.be.an.instanceof(TYPE)` assertions to `expect().instanceOf(TYPE)`. It is written in TypeScript and uses ast-grep's pattern matching.

SOURCE: https://ast-grep.github.io/catalog/typescript/switch-from-should-to-expect

LANGUAGE: yaml
CODE:
```
id: should_to_expect_instanceof
language: TypeScript
rule:
  any:
  - pattern: $NAME.should.be.an.instanceof($TYPE)
  - pattern: $NAME.should.be.an.instanceOf($TYPE)
fix: |-
  expect($NAME).instanceOf($TYPE)
```

----------------------------------------

TITLE: Set Rule Severity with --error, --warning, --info, --hint, --off
DESCRIPTION: These flags allow you to set the severity level for specific rules or all rules. You can use `--error`, `--warning`, `--info`, `--hint`, or `--off`, optionally followed by rule IDs separated by `=`. If no rule IDs are provided, the setting applies to all rules.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: bash
CODE:
```
sg --error=RULE_ID_1 --error=RULE_ID_2
sg --warning
sg --info=RULE_ID_3
sg --hint
sg --off=RULE_ID_4
sg --off
```

----------------------------------------

TITLE: Refine SgNode Matches in Python
DESCRIPTION: Explains how to filter SgNodes after an initial match using refinement methods like matches, inside, has, precedes, and follows, which accept rule definitions.

SOURCE: https://ast-grep.github.io/guide/api-usage/py-api

LANGUAGE: python
CODE:
```
# Search Refinement
class SgNode:
    def matches(self, **rule: Unpack[Rule]) -> bool: ...
    def inside(self, **rule: Unpack[Rule]) -> bool: ...
    def has(self, **rule: Unpack[Rule]) -> bool: ...
    def precedes(self, **rule: Unpack[Rule]) -> bool: ...
    def follows(self, **rule: Unpack[Rule]) -> bool: ...
```

LANGUAGE: python
CODE:
```
node = root.find(pattern="print($A)")
if node["A"].matches(kind="string"):
  print("A is a string")
```

----------------------------------------

TITLE: ast-grep Rewriter Rule Fields Explained
DESCRIPTION: This section details the specific fields within an ast-grep rewriter rule. It clarifies the type and requirement for each field, including 'id' for identification, 'rule' for matching nodes, 'fix' for auto-fixing, 'constraints' for filtering, 'transform' for meta-variable manipulation, and 'utils' for local utility rules.

SOURCE: https://ast-grep.github.io/reference/yaml/rewriter

LANGUAGE: markdown
CODE:
```
## `id` 
  * type: `String`
  * required: true

## `rule` 
  * type: `Rule`
  * required: true

## `fix` 
  * type: `String` or `FixConfig`
  * required: true

## `constraints` 
  * type: `HashMap<String, Rule>`
  * required: false

## `transform` 
  * type: `HashMap<String, Transformation>`
  * required: false

## `utils` 
  * type: `HashMap<String, Rule>`
  * required: false
```

----------------------------------------

TITLE: Customize Code Highlighting with Labels in ast-grep
DESCRIPTION: Customize code highlighting for linting issues by defining 'labels' in the rule configuration. Labels can specify a 'style' (primary/secondary) and an optional 'message'. Meta-variables used in labels must be defined in 'rule' or 'constraints'.

SOURCE: https://ast-grep.github.io/guide/project/lint-rule

LANGUAGE: yaml
CODE:
```
rule:
  pattern:
    context: 'class H { $METHOD() { $$$ } }'
    selector: method_definition
  inside:
    pattern: class $CLASS { $$$ }
    stopBy: end
```

LANGUAGE: yaml
CODE:
```
labels:
  METHOD:
    style: primary
    message: the method name
  CLASS:
    style: secondary
    message: The class name
```

----------------------------------------

TITLE: Migrate Chai `should.be.PROP` to `expect().to.be.PROP`
DESCRIPTION: This rule transforms Chai's `should.be.PROP` assertions into `expect().to.be.PROP`. It is implemented in TypeScript and leverages ast-grep for pattern matching.

SOURCE: https://ast-grep.github.io/catalog/typescript/switch-from-should-to-expect

LANGUAGE: yaml
CODE:
```
id: should_to_expect_genericShouldBe
language: TypeScript
rule:
  pattern: $NAME.should.be.$PROP
fix: |-
  expect($NAME).to.be.$PROP
```

----------------------------------------

TITLE: Apply Auto-fix (FixConfig Object)
DESCRIPTION: Applies auto-fixing using a more detailed FixConfig object, allowing for advanced transformations.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
fix:
  template: "logger.log($$$ARGS)"
  expandEnd: rule
```

----------------------------------------

TITLE: Define Rewriter for Individual Imports
DESCRIPTION: This YAML snippet defines a rewriter rule named `rewrite-identifier`. It targets individual identifier AST nodes (`kind: identifier`) and rewrites each one into a separate import statement, referencing the original identifier and the barrel path.

SOURCE: https://ast-grep.github.io/advanced/find-n-patch

LANGUAGE: yaml
CODE:
```
rewriters:
- id: rewrite-identifer
  rule:
    pattern: $IDENT
    kind: identifier
  fix: import $IDENT from './barrel/$IDENT'
```

----------------------------------------

TITLE: Set Rule Severity
DESCRIPTION: Specifies the severity level of a matched result, with options like 'hint', 'info', 'warning', 'error', or 'off'.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
severity: warning
```

----------------------------------------

TITLE: Specify Language for StdIn Code in ast-grep
DESCRIPTION: When using ast-grep with standard input (`--stdin`), the language of the code must be explicitly specified using the `--lang` or `-l` flag, as the file extension is unavailable for inference.

SOURCE: https://ast-grep.github.io/guide/tooling-overview

LANGUAGE: bash
CODE:
```
echo "print('Hello world')" | ast-grep run --lang python
```

----------------------------------------

TITLE: Map Languages to File Globs with `languageGlobs`
DESCRIPTION: Associate languages with glob patterns for files having non-standard extensions or syntaxes. This can override default parsers.

SOURCE: https://ast-grep.github.io/reference/sgconfig

LANGUAGE: yaml
CODE:
```
languageGlobs:
  html: ['*.vue', '*.svelte', '*.astro']
  json: ['.eslintrc']
  cpp: ['*.c'] # override the default parsers
  tsx: ['*.ts'] # useful for rule reuse
```

----------------------------------------

TITLE: Local Utility Rule Definition in YAML
DESCRIPTION: This YAML snippet illustrates the definition of a local utility rule 'is-literal' within the 'utils' field of a configuration file. It demonstrates how to reference this utility in the main 'rule' using the 'matches' keyword.

SOURCE: https://ast-grep.github.io/guide/rule-config/utility-rule

LANGUAGE: yaml
CODE:
```
utils:
  is-literal:
    any:
      - kind: 'false'
      - kind: undefined
      - kind: 'null'
      - kind: 'true'
      - kind: regex
      - kind: number
      - kind: string
rule:
  matches: is-literal
```

----------------------------------------

TITLE: Define a custom ast-grep rule for Mojo
DESCRIPTION: Shows how to define a custom rule in YAML format for ast-grep. This rule targets the 'print' pattern specifically within the 'mojo' language, assigning it a severity level of 'hint'.

SOURCE: https://ast-grep.github.io/advanced/custom-language

LANGUAGE: yaml
CODE:
```
id: my-first-mojo-rule
language: mojo  # the name we register before!
severity: hint
rule:
  pattern: print
```

----------------------------------------

TITLE: Inspect ast-grep CLI with --inspect
DESCRIPTION: The `--inspect` flag provides semi-structured tracing output for the ast-grep CLI. This feature is designed for advanced users to gain deeper insights for debugging and customization purposes.

SOURCE: https://ast-grep.github.io/blog/stars-8000

LANGUAGE: bash
CODE:
```
sg <command> --inspect
```

----------------------------------------

TITLE: Apply Rewriter to Transform Identifiers
DESCRIPTION: This YAML snippet demonstrates the `rewrite` transformation. It applies the `rewrite-identifier` rewriter to the `$$$IDENTS` metavariable captured from the import statement. The rewritten import statements are then joined by newline characters.

SOURCE: https://ast-grep.github.io/advanced/find-n-patch

LANGUAGE: yaml
CODE:
```
transform:
  IMPORTS:
    rewrite:
      rewriters: [rewrite-identifer]
      source: $$$IDENTS
      joinBy: "\n"
```

----------------------------------------

TITLE: Add Rule Metadata
DESCRIPTION: Includes a dictionary for custom data related to the rule, such as author information.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
metadata: { author: 'John Doe' }
```

----------------------------------------

TITLE: Upgrade Ant Design Vue
DESCRIPTION: This rule helps upgrade Ant Design Vue components, applying utility functions and constraints to ensure compatibility and proper usage.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: HTML
CODE:
```
kind: "component"
pattern: "<a-button type='primary'>..."
regex: "/antd-vue@3/"
utils: "$A"
constraints: "$A"
+2
```

----------------------------------------

TITLE: Speed up Barrel Import
DESCRIPTION: This rule optimizes barrel imports for faster build times, applying transformations and utility functions in TypeScript.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TypeScript
CODE:
```
kind: "import"
pattern: "import { $A } from './$B';"
transform: "import * as $C from './$B';"
rewriters: "$A"
+1
```

----------------------------------------

TITLE: JavaScript API for ast-grep
DESCRIPTION: Utilize ast-grep's JavaScript API, powered by napi.rs, for robust and reliable code manipulation. This binding allows for complex rule crafting and arbitrary AST manipulation.

SOURCE: https://ast-grep.github.io/guide/api-usage

LANGUAGE: javascript
CODE:
```
import astGrep from "@ast-grep/ast-grep";

async function example() {
  const grep = astGrep.handle(
    "function add(a, b) {\n  return a + b;\n}",
    { lang: "javascript" }
  );
  const result = await grep.print("$.function");
  console.log(result);
}

example();
```

----------------------------------------

TITLE: Rewrite String Iteration: Char Offset vs. Byte Offset in Rust
DESCRIPTION: Addresses the pitfall of character offset vs. byte offset when iterating over Rust strings due to UTF-8 encoding. It demonstrates how to use `char_indices()` for byte offsets instead of `chars().enumerate()` for character offsets.

SOURCE: https://ast-grep.github.io/catalog/rust

LANGUAGE: shell
CODE:
```
ast-grep -p '$A.chars().enumerate()'
   -r '$A.char_indices()'
   -l rs
```

LANGUAGE: rust
CODE:
```
let yes = "y̆es";
let mut char_indices = yes.char_indices();
assert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')
assert_eq!(Some((1, '\u{0306}')), char_indices.next());
// note the 3 here - the last character took up two bytes
assert_eq!(Some((3, 'e')), char_indices.next());
assert_eq!(Some((4, 's')), char_indices.next());
```

LANGUAGE: rust
CODE:
```
for (i, char) in source.chars().enumerate() {
    println!("Boshen is angry :)");
}

for (i, char) in source.char_indices() {
    println!("Boshen is angry :)");
}
```

----------------------------------------

TITLE: Inspect SgNode Properties
DESCRIPTION: Explains how to inspect properties of an `SgNode`, including its text content, whether it's a leaf node, its kind, and its range in the source code.

SOURCE: https://ast-grep.github.io/guide/api-usage/js-api

LANGUAGE: TypeScript
CODE:
```
// node inspection
export class SgNode {
  range(): Range
  isLeaf(): boolean
  kind(): string
  text(): string
}
```

LANGUAGE: JavaScript
CODE:
```
const ast = parse(Lang.JavaScript, "console.log('hello world')")
root = ast.root()
root.text() // will return "console.log('hello world')"
```

LANGUAGE: JavaScript
CODE:
```
const rng = node.range()
const pos = rng.start // or rng.end, both are `Pos` objects
pos.line // 0, line starts with 0
pos.column // 0, column starts with 0
rng.end.index // 17, index starts with 0
```

----------------------------------------

TITLE: Configure Playground Parser Paths and Display Names (TypeScript)
DESCRIPTION: This TypeScript code demonstrates how to add a new language ('Swift') to the ast-grep web playground by specifying its WASM parser path and its display name.

SOURCE: https://ast-grep.github.io/contributing/add-lang

LANGUAGE: typescript
CODE:
```
// Add language parserPaths
const parserPaths = {
  // ...
  swift: 'tree-sitter-swift.wasm', 
}

// Add language display name
export const languageDisplayNames: Record<SupportedLang, string> = {
  // ...
  swift: 'Swift',
}
```

----------------------------------------

TITLE: Transforming barrel imports to single imports
DESCRIPTION: This snippet illustrates a complex code transformation scenario: rewriting barrel imports to individual imports. It highlights the limitations of the basic Find & Patch workflow when dealing with multiple nodes or lists of nodes, such as replacing an entire import statement with multiple identifiers.

SOURCE: https://ast-grep.github.io/advanced/find-n-patch

LANGUAGE: js
CODE:
```
import {a, b, c} from './barrel';
```

LANGUAGE: js
CODE:
```
import a from './barrel/a';
import b from './barrel/b';
import c from './barrel/c';
```

LANGUAGE: javascript
CODE:
```
// we cannot rewrite the whole import statements
// because we don't know how to rewrite a, b, c as a list
import ??? from './barrel';
// we cannot rewrite each identifier
// because the replaced text is inside the import statement
import { ??, ??, ?? } from './barrel';
```

----------------------------------------

TITLE: ast-grep scan: Filter Option
DESCRIPTION: Scans the codebase with rules whose IDs match a given regular expression. This is useful for targeting specific rules within a larger set and conflicts with `--rule`.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan --filter <REGEX>
```

----------------------------------------

TITLE: Find Go function declarations by name pattern using regex
DESCRIPTION: This snippet demonstrates how to use a YAML rule with ast-grep to find Go function declarations whose names match a specific regular expression pattern. It utilizes the `regex` atomic rule to overcome limitations of meta-variable patterns for prefix matching.

SOURCE: https://ast-grep.github.io/catalog/go/find-func-declaration-with-prefix

LANGUAGE: yaml
CODE:
```
id: test-functions
language: go
rule:
  kind: function_declaration
  has:
    field: name
    regex: Test.*
```

LANGUAGE: go
CODE:
```
package abs
import "testing"
func TestAbs(t *testing.T) {
    got := Abs(-1)
    if got != 1 {
        t.Errorf("Abs(-1) = %d; want 1", got)
    }
}
```

----------------------------------------

TITLE: React Component After Reverse Compilation (TSX Diff)
DESCRIPTION: This TSX code snippet shows the difference (diff) in a React component after applying the Reverse React Compiler. It highlights how `useCallback` and `useMemo` have been removed, potentially degrading performance.

SOURCE: https://ast-grep.github.io/catalog/tsx/reverse-react-compiler

LANGUAGE: tsx
CODE:
```
const Component = () => {
  const [count, setCount] = useState(0)
  const increment = useCallback(() => {
    setCount((prevCount) => prevCount + 1)
  }, [])
  const increment = () => {         
    setCount((prevCount) => prevCount + 1)
  } 
  const expensiveCalculation = useMemo(() => {
    // mock Expensive calculation
    return count * 2
  }, [count])                             
  const expensiveCalculation = (() => { 
    // mock Expensive calculation
    return count * 2
  })()
  return (
    <>
      <p>Expensive Result: {expensiveCalculation}</p>
      <button onClick={increment}>{count}</button>
    </>
  )
}
```

----------------------------------------

TITLE: Configure Rule Severity (YAML)
DESCRIPTION: Demonstrates how to set the severity level for a rule within a YAML configuration file. This is a fundamental step in defining how ast-grep reports issues.

SOURCE: https://ast-grep.github.io/guide/project/severity

LANGUAGE: yaml
CODE:
```
id: rule-id
severity: error
# ... more fields
```

----------------------------------------

TITLE: User-Defined Selector for Expression Statement
DESCRIPTION: Shows how to use a 'selector' in the pattern object to explicitly match an 'expression_statement' instead of the default 'call_expression' for JavaScript code.

SOURCE: https://ast-grep.github.io/advanced/pattern-parse

LANGUAGE: javascript
CODE:
```
console.log("Hello")
console.log("World");
```

LANGUAGE: yaml
CODE:
```
pattern:
  context: console.log($$$)
  selector: expression_statement
```

----------------------------------------

TITLE: Prefer Symbol over Proc in Ruby
DESCRIPTION: This rule simplifies Ruby code by replacing Procs with the more concise `&:` symbol shorthand for method invocation. It targets patterns where a list is iterated over, and a block is used to call a method on each element. The rule transforms `{|v| v.method}` into `(&:method)`.

SOURCE: https://ast-grep.github.io/catalog/ruby

LANGUAGE: yaml
CODE:
```
id: prefer-symbol-over-proc
language: ruby
rule:
  pattern: $LIST.$ITER { |$V| $V.$METHOD }
constraints:
  ITER:
    regex: 'map|select|each'
fix: '$LIST.$ITER(&:$METHOD)'
```

LANGUAGE: ruby
CODE:
```
[1, 2, 3].select { |v| v.even? }
(1..100).each { |i| i.to_s }
not_list.no_match { |v| v.even? }
```

LANGUAGE: ruby
CODE:
```
[1, 2, 3].select { |v| v.even? } 
[1, 2, 3].select(&:even?) 
(1..100).each { |i| i.to_s } 
(1..100).each(&:to_s)

not_list.no_match { |v| v.even? }
```

----------------------------------------

TITLE: Transform Meta-variables for Patching (String Form)
DESCRIPTION: Transforms meta-variables before they are used in the 'fix' operation, using a string configuration.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR: substring($V, endChar=1)
```

----------------------------------------

TITLE: Detect defer anti-pattern with ast-grep
DESCRIPTION: This pattern uses ast-grep to find defer statements in Go code where function calls with arguments might be evaluated immediately. It targets defer statements with a specific structure involving method calls and parameters.

SOURCE: https://ast-grep.github.io/catalog/go/defer-func-call-antipattern

LANGUAGE: shell
CODE:
```
ast-grep \
  --lang go \
  --pattern '{ defer $A.$B(t, failpoint.$M($$$)) }' \
  --selector defer_statement
```

----------------------------------------

TITLE: Enable Tree-sitter Dependency via Features (TOML)
DESCRIPTION: Enables the Tree-sitter language dependency within the `builtin-parser` feature list in Cargo.toml, typically for CLI tool usage.

SOURCE: https://ast-grep.github.io/contributing/add-lang

LANGUAGE: toml
CODE:
```
# Cargo.toml
[features]
builtin-parser = [
  ...
  "tree-sitter-ruby",  // [!code ++]
  ...
]
```

----------------------------------------

TITLE: YAML: Rewrite Rules for useCallback, memo, and useMemo
DESCRIPTION: This YAML configuration defines two ast-grep rules for rewriting React code. The first rule targets `useCallback` and `memo`, replacing them with their function argument. The second rule targets `useMemo`, replacing it with an immediately invoked function expression (IIFE) of its argument.

SOURCE: https://ast-grep.github.io/catalog/tsx

LANGUAGE: yaml
CODE:
```
id: rewrite-cache
language: tsx
rule:
  any:
  - pattern: useCallback($FN, $$$)
  - pattern: memo($FN, $$$)
fix: $FN
---
id: rewrite-use-memo
language: tsx
rule: { pattern: 'useMemo($FN, $$$)' }
fix: ($FN)()   # need IIFE to wrap memo function
```

----------------------------------------

TITLE: YAML Rule for Import Dependency Violation
DESCRIPTION: This YAML configuration defines an ast-grep rule to detect import dependency violations in a Clean Architecture project. It specifically targets imports within the domain package that reference the data or presentation packages, flagging them as errors.

SOURCE: https://ast-grep.github.io/catalog/kotlin/ensure-clean-architecture

LANGUAGE: yaml
CODE:
```
id: import-dependency-violation
message: Import Dependency Violation
notes: Ensures that imports comply with architectural rules.
severity: error
rule:
  pattern: import $PATH  # capture the import statement
constraints:
  PATH: # find specific package imports
    any:
    - regex: com\.example(\.\w+)*\.data
    - regex: com\.example(\.\w+)*\.presentation
files:  # apply only to domain package
- com/example/domain/**/*.kt

```

----------------------------------------

TITLE: Incorrect Ordered Rule Matching for Recursive Function Detection in JavaScript
DESCRIPTION: Demonstrates an incorrect rule order in ast-grep for finding recursive functions, where matching fails because the rule order is reversed, leading to incorrect meta-variable capture.

SOURCE: https://ast-grep.github.io/advanced/faq

LANGUAGE: yaml
CODE:
```
id: recursive-call
language: JavaScript
rule:
  all:
  - has:  # N.B. has is the first rule
      pattern: $F()
      stopBy: end
  - pattern: function $F() { $$$ }
```

----------------------------------------

TITLE: Go fix for defer statement anti-pattern
DESCRIPTION: Provides the correct way to defer a function call with parameters in Go. It involves wrapping the function call within an anonymous function, ensuring the arguments are evaluated at the time of execution, not when the defer statement is encountered.

SOURCE: https://ast-grep.github.io/catalog/go/defer-func-call-antipattern

LANGUAGE: go
CODE:
```
defer func() {
    require.NoError(t, failpoint.Disable("some/path"))
}()
```

----------------------------------------

TITLE: ast-grep Rule Types and Features
DESCRIPTION: Demonstrates the categorization of ast-grep rules into atomic, relational, and composite types, along with key features like rewriters, transforms, constraints, utils, and labels. This provides a foundational understanding of how to structure and utilize ast-grep rules for code manipulation.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: ast-grep
CODE:
```
rule:
  pattern: "_"
  kind: "_"
  regex: "_"

rule:
  inside: "_"
  has: "_"
  follows: "_"
  precedes: "_"

rule:
  all: ["_"]
  any: ["_"]
  not: "_"
  matches: "_"

features:
  rewriters: "_"
  transform: "_"
  constraints: "_"
  utils: "_"
  labels: "_"
```

----------------------------------------

TITLE: Use pattern with strictness options for matching
DESCRIPTION: The `pattern` rule supports a `strictness` option to modify the matching algorithm. Options include `cst`, `smart`, `ast`, `relaxed`, and `signature`, allowing fine-grained control over how patterns are interpreted.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yml
CODE:
```
pattern:
  context: foo($BAR)
  strictness: relaxed
```

----------------------------------------

TITLE: Match a specific part of code using pattern with selector and context
DESCRIPTION: The `pattern` rule can accept an object to specify a `selector` for a particular AST node type and a `context` to define the surrounding code structure. This allows for more precise matching within larger code blocks, like finding class fields in JavaScript.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yml
CODE:
```
pattern:
  selector: field_definition
  context: class { $F }
```

----------------------------------------

TITLE: JavaScript Babel Plugin for Reverse React Compiler
DESCRIPTION: This JavaScript code defines a Babel plugin that targets `useMemo`, `useCallback`, and `memo` function calls. It replaces these calls with their first argument, effectively removing memoization.

SOURCE: https://ast-grep.github.io/catalog/tsx/reverse-react-compiler

LANGUAGE: js
CODE:
```
const ReverseReactCompiler = ({ types: t }) => ({
  visitor: {
    CallExpression(path) {
      const callee = path.node.callee;
      if (
        t.isIdentifier(callee, { name: "useMemo" }) ||
        t.isIdentifier(callee, { name: "useCallback" }) ||
        t.isIdentifier(callee, { name: "memo" })
      ) {
        path.replaceWith(args[0]);
      }
    },
  },
});
```

----------------------------------------

TITLE: Manual Type Narrowing with SgNode.is()
DESCRIPTION: Shows how to use the `is` method on an `SgNode` instance for manual, runtime type checking and narrowing. This allows TypeScript to correctly infer the specific kind of the node within a conditional block.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
class SgNode<M, K> {
  is<T extends K>(kind: T): this is SgNode<M, T>
}

if (sgNode.is("function_declaration")) {
  sgNode.kind // narrow to 'function_declaration'
}
```

----------------------------------------

TITLE: TypeScript Type Narrowing Comparison
DESCRIPTION: Demonstrates the difference in TypeScript's type narrowing behavior between assigning a union of kinds directly to a generic `SgNode` versus using a union of specific `SgNode` types. The latter allows for successful narrowing within conditional blocks.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
let single: SgNode<'expression' | 'type'>
if (single.kind === 'expression') {
  single // Remains SgNode<'expression' | 'type'> - not narrowed!
}

let union: SgNode<'expression'> | SgNode<'type'>
if (union.kind === 'expression') {
  union // Successfully narrowed to SgNode<'expression'>
}
```

----------------------------------------

TITLE: Extract i18n Keys Rule (YAML)
DESCRIPTION: This YAML configuration defines an ast-grep rule to extract static text from HTML. It identifies text nodes, skips patterns matching mustache syntax (dynamic text), and applies a fix to wrap the extracted text in a function call.

SOURCE: https://ast-grep.github.io/catalog/html/extract-i18n-key

LANGUAGE: yaml
CODE:
```
id: extract-i18n-key
language: html
rule:
  kind: text
  pattern: $T
  # skip dynamic text in mustache syntax
  not: { regex: '{\{.*\}\}' }
fix: "{{ $('$T') }}"
```

----------------------------------------

TITLE: TypeScript Dynamic Imports
DESCRIPTION: Demonstrates dynamic imports for loading modules asynchronously, including aliased and awaited imports.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: TypeScript
CODE:
```
// Dynamic imports
const dynamicModule = import('./dynamic1');
const {testing, testing123} = import('./dynamic2');
const asyncDynamicModule = await import('./async_dynamic1').then(module => module.default);
// Aliased dynamic import
const { originalIdentifier: aliasedDynamicImport} = await import('./async_dynamic2');
```

----------------------------------------

TITLE: Define ast-grep Rewriter Rule Structure
DESCRIPTION: This snippet outlines the essential fields required for an ast-grep rewriter rule: 'id', 'rule', and 'fix'. It also lists optional fields like 'constraints', 'transform', and 'utils', explaining their purpose in code manipulation and filtering.

SOURCE: https://ast-grep.github.io/reference/yaml/rewriter

LANGUAGE: yaml
CODE:
```
rewriter_rule:
  id: "string" # required
  rule: "Rule" # required
  fix: "String or FixConfig" # required
  constraints: "HashMap<String, Rule>" # optional
  transform: "HashMap<String, Transformation>" # optional
  utils: "HashMap<String, Rule>" # optional
```

----------------------------------------

TITLE: Transform Meta-variables for Patching (Object Form)
DESCRIPTION: Transforms meta-variables before they are used in the 'fix' operation, using an object configuration.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR:
    substring: {endChar: 1, source: $V}
```

----------------------------------------

TITLE: VSCode Extension Error Messaging
DESCRIPTION: The ast-grep VSCode extension provides improved error messages when rule file parsing fails, aiding in easier troubleshooting for users.

SOURCE: https://ast-grep.github.io/blog/stars-6000

LANGUAGE: plaintext
CODE:
```
# Example of an error message from VSCode extension
# Rule file parsing failed: [Error Details]
```

----------------------------------------

TITLE: Minimal TypeScript Rule for no-await-in-promise-all
DESCRIPTION: This YAML rule defines a check for TypeScript code to find `Promise.all` calls that contain an `await` expression within them. It uses a pattern to match `Promise.all($A)` and a `has` clause to ensure `await $_` is present, stopping the search at the end of the matched segment.

SOURCE: https://ast-grep.github.io/guide/rule-config

LANGUAGE: YAML
CODE:
```
id: no-await-in-promise-all
language: TypeScript
rule:
  pattern: Promise.all($A)
  has:
    pattern: await $_ 
    stopBy: end
```

----------------------------------------

TITLE: Python API: Config Type Definition
DESCRIPTION: Defines the `Config` type in the Python API, which mirrors the YAML rule configuration used in the CLI, including rules, constraints, utilities, and transformations.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: python
CODE:
```
class Config(TypedDict, total=False):
    rule: Rule
    constraints: Dict[str, Mapping]
    utils: Dict[str, Rule]
    transform: Dict[str, Mapping]
```

----------------------------------------

TITLE: Semgrep: Match Logger Calls with Typed Metavariables
DESCRIPTION: This Semgrep pattern uses typed metavariables to constrain matches to specific types, such as calls to the `log` method on `java.util.logging.Logger` objects. It shows how to specify type constraints for metavariables.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: YAML
CODE:
```
#  look for calls to the log method on Logger objects.
# A simple pattern like this will match `Math.log()` as well
pattern: $LOGGER.log(...)
# typed metavariable can put a type constraint on the metavariable
# but it is no longer valid Java code
pattern: (java.util.logging.Logger $LOGGER).log(...)
```

----------------------------------------

TITLE: Global Utility Rule Structure in YAML
DESCRIPTION: This YAML structure outlines the fields allowed in a global utility rule file. It includes 'id', 'language', 'rule', 'constraints', and nested 'utils', defining a reusable rule accessible across the project.

SOURCE: https://ast-grep.github.io/guide/rule-config/utility-rule

LANGUAGE: yaml
CODE:
```
id: "some-id"
language: "javascript"
rule: 
  pattern: "some-pattern"
constraints:
  - "some-constraint"
utils:
  nested-util: 
    rule: 
      pattern: "nested-pattern"
```

----------------------------------------

TITLE: JSCodeshift for Finding Variable Declarators
DESCRIPTION: Shows how to use JSCodeshift in JavaScript to parse code, find all VariableDeclarator nodes, and retrieve their types.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: javascript
CODE:
```
const j = require('jscodeshift');

const root = j(`const a = 1; const b = 2;`);

const types = root.find(j.VariableDeclarator).getTypes();
console.log(types); // Set { 'VariableDeclarator' }
```

----------------------------------------

TITLE: Comby: Match If Statements with Comparisons
DESCRIPTION: This Comby query identifies if statements where the condition involves a comparison. It uses special markers like `:[var]` and `:[rest]` to match code structures, but unlike AST-aware tools, it performs string-based matching.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: Comby
CODE:
```
if (:[var] <= :[rest])
```

----------------------------------------

TITLE: TypeScript Function Call Matching Across Strictness Levels
DESCRIPTION: Compares how the pattern 'foo(bar)' matches differently across various ast-grep strictness levels, considering trailing commas and comments.

SOURCE: https://ast-grep.github.io/advanced/match-algorithm

LANGUAGE: typescript
CODE:
```
// exact match in all levels
foo(bar)
// match in all levels except cst due to the trailing comma in code
foo(bar,)
// match in relaxed and signature because comment is skipped
foo(/* comment */ bar)
// match in signature because text content is ignored
bar(baz)
```

----------------------------------------

TITLE: Find function declarations with names of certain pattern
DESCRIPTION: This rule locates function declarations in Go code that match a specific naming pattern. It uses the `kind` and `has` attributes for matching.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Go
CODE:
```
kind: "function"
pattern: "func $A(...)"
has: "$A"
```

----------------------------------------

TITLE: ast-grep Rule Constraints Enhancement
DESCRIPTION: The `constraints` field in ast-grep rules has been expanded. Previously limited to `pattern`, `kind`, and `regex`, it now accepts a full rule, offering greater flexibility for defining rule conditions.

SOURCE: https://ast-grep.github.io/blog/stars-6000

LANGUAGE: yaml
CODE:
```
constraints:
  pattern: "some_pattern"
  kind: "some_kind"
  regex: "some_regex"
  # Now accepts a full rule here
```

----------------------------------------

TITLE: JavaScript Function Matching (Strict)
DESCRIPTION: Shows how including an 'async' keyword in the pattern enforces a match against async functions only, as unnamed nodes are no longer skipped when present in the pattern.

SOURCE: https://ast-grep.github.io/advanced/match-algorithm

LANGUAGE: javascript
CODE:
```
// async function $A() {}
function foo() {}    // not matched
async function bar() {} // matched
```

----------------------------------------

TITLE: SgRoot Class for AST Representation
DESCRIPTION: Defines the `SgRoot` class, which represents the parsed Abstract Syntax Tree (AST) of code. It provides methods to access the root `SgNode` and retrieve the filename associated with the parsed code.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: typescript
CODE:
```
/** Represents the parsed tree of code. */
class SgRoot {
  /** Returns the root SgNode of the ast-grep instance. */
  root(): SgNode
  /**
   * Returns the path of the file if it is discovered by ast-grep's `findInFiles`.
   * Returns `"anonymous"` if the instance is created by `parse(lang, source)`.
   */
  filename(): string
}

```

----------------------------------------

TITLE: Correct in_base_set to in_set for Bevy Stages
DESCRIPTION: This snippet addresses an error where a custom stage type was incorrectly used with `in_base_set`. It demonstrates how to change `in_base_set` to `in_set` when the stage is not a base system set, resolving a trait bound error.

SOURCE: https://ast-grep.github.io/blog/migrate-bevy

LANGUAGE: Rust
CODE:
```
-        .add_system(one_off_action_system.in_base_set(BigBrainStage::Actions))
+        .add_system(one_off_action_system.in_set(BigBrainStage::Actions))
```

----------------------------------------

TITLE: C: Rewrite Method to Function Call Rule
DESCRIPTION: Defines an ast-grep rule in YAML for C code. It targets patterns like `$R.$METHOD($$$ARGS)` and transforms them by replacing the method call with a function call, passing the struct pointer as the first argument. This aims to simplify C code that simulates object-oriented programming.

SOURCE: https://ast-grep.github.io/catalog/c/rewrite-method-to-function-call

LANGUAGE: yaml
CODE:
```
id: method_receiver
language: c
rule:
  pattern: $R.$METHOD($$$ARGS)
transform:
  MAYBE_COMMA:
    replace:
      source: $$$ARGS
      replace: '^.+'
      by: ', '
fix:
  $METHOD(&$R$MAYBE_COMMA$$$ARGS)
```

----------------------------------------

TITLE: Enhanced JSON Output with Metadata in ast-grep
DESCRIPTION: The `--json` output option in ast-grep can now include rule metadata when the `--include-metadata` flag is used. This is beneficial for integrating ast-grep results into other tools or for detailed programmatic analysis, such as with SonarQube.

SOURCE: https://ast-grep.github.io/blog/new-ver-38

LANGUAGE: bash
CODE:
```
sg --include-metadata --json path/to/your/code
```

----------------------------------------

TITLE: Match AST node by kind
DESCRIPTION: This rule targets an Abstract Syntax Tree (AST) node based on its specific 'kind' name, such as 'if_statement'.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
kind: if_statement
```

----------------------------------------

TITLE: Capture Import Identifiers with Pattern
DESCRIPTION: This YAML snippet defines a rule to capture all identifiers within a barrel import statement. The pattern `import {$$$IDENTS} from './barrel'` matches the import structure and captures the identifiers into the `$$$IDENTS` metavariable.

SOURCE: https://ast-grep.github.io/advanced/find-n-patch

LANGUAGE: yaml
CODE:
```
rule:
  pattern: import {$$$IDENTS} from './barrel'
```

----------------------------------------

TITLE: Specify Target Language
DESCRIPTION: Defines the programming language to which the rule applies.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
language: JavaScript
```

----------------------------------------

TITLE: Refactor pytest fixtures
DESCRIPTION: This rule assists in refactoring pytest fixtures in Python, utilizing utility functions to improve fixture management.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Python
CODE:
```
kind: "function"
pattern: "def $A(request):"
follows: "$A"
utils: "$A"
```

----------------------------------------

TITLE: ast-grep: Rewrite meta-variable with rewriter rules and joinBy
DESCRIPTION: Illustrates the experimental 'rewrite' transformation in ast-grep. This feature allows selective transformation of a meta-variable's descendant nodes using specified rewriter rules and optionally joining the results with a custom string.

SOURCE: https://ast-grep.github.io/reference/yaml/transformation

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR:
    rewrite:
      source: $VAR
      rewriters: [rule1, rule2]
      joinBy: "\n"
```

LANGUAGE: yaml
CODE:
```
# string style for ast-grep 0.38.3+
transform:
  NEW_VAR: rewrite($VAR, rewriters=[rule1, rule2], joinBy='\n')
```

----------------------------------------

TITLE: Match Expression Statement with Specific Content (yaml)
DESCRIPTION: This rule matches a code node that is specifically an expression statement and contains the exact content 'console.log(\'Hello World\');'. It demonstrates the use of the 'all' operator to ensure both conditions are met.

SOURCE: https://ast-grep.github.io/guide/rule-config/composite-rule

LANGUAGE: yaml
CODE:
```
rule:
  all:
    - pattern: console.log('Hello World');
    - kind: expression_statement
```

----------------------------------------

TITLE: Configure Files and Ignores in ast-grep
DESCRIPTION: Define which files ast-grep should include or exclude from linting using glob patterns. The 'ignores' patterns are checked before 'files' patterns.

SOURCE: https://ast-grep.github.io/guide/project/lint-rule

LANGUAGE: yaml
CODE:
```
files:
- "tests/**"
- "integration_tests/test.py"
```

LANGUAGE: yaml
CODE:
```
ignores:
- "tests/config/**"
```

----------------------------------------

TITLE: Audit Type Parameter Usage
DESCRIPTION: Use this command to audit the usage of type parameters, which bypass runtime checks. This helps in identifying potential misuse and maintaining type safety.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: bash
CODE:
```
ast-grep -p '$NODE.$METHOD<$K>($$$)'
```

----------------------------------------

TITLE: Match Binary Expression using 'kind' in ast-grep
DESCRIPTION: This YAML rule uses ast-grep's 'kind' to match a 'binary_expression' node, demonstrating how to target specific AST node types for code analysis.

SOURCE: https://ast-grep.github.io/advanced/core-concepts

LANGUAGE: yaml
CODE:
```
rule:
  kind: binary_expression
# matches `1 + 1`
```

----------------------------------------

TITLE: Define Rule ID
DESCRIPTION: Specifies a unique and descriptive identifier for the linter rule.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
id: no-console-log
```

----------------------------------------

TITLE: Speed Up Barrel Imports (TypeScript)
DESCRIPTION: This rule optimizes barrel imports by rewriting them to direct imports for each identifier. It reduces bundle size and improves build times by avoiding the indirection of barrel files. The rule uses rewriters to transform import statements.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: speed-up-barrel-import
language: typescript
# find the barrel import statement
rule:
  pattern: import {$$$IDENTS} from './barrel'
# rewrite imported identifiers to direct imports
rewriters:
- id: rewrite-identifer
  rule:
    pattern: $IDENT
    kind: identifier
  fix: import $IDENT from './barrel/$IDENT'
# apply the rewriter to the import statement
transform:
  IMPORTS:
    rewrite:
      rewriters: [rewrite-identifer]
      # $$$IDENTS contains imported identifiers
      source: $$$IDENTS
      # join the rewritten imports by newline
      joinBy: "\n"
fix: $IMPORTS
```

LANGUAGE: typescript
CODE:
```
import {a, b, c} from './barrel'
```

LANGUAGE: typescript
CODE:
```
import {a, b, c} from './barrel'
import a from './barrel/a'
import b from './barrel/b'
import c from './barrel/c'
```

----------------------------------------

TITLE: Overloading Signature for Typed and Untyped Nodes
DESCRIPTION: Demonstrates the overloading signature for specifying node types. The untyped version returns a general SgNode<M>, while the typed version returns a RefineNode<M, T>, allowing for specific node kinds.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
interface NodeMethod<M, K> {
  (): SgNode<M>                     // Untyped version
  <T extends K>(): RefineNode<M, T> // Typed version
}
```

----------------------------------------

TITLE: Python API: Rule Type Definitions
DESCRIPTION: Provides type definitions for `Pattern`, `Rule`, `StopBy`, and `Relation` used in the Python API for defining search rules and patterns.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: python
CODE:
```
class Pattern(TypedDict):
    selector: str
    context: str

class Rule(TypedDict, total=False):
    # atomic rule
    pattern: str | Pattern
    kind: str
    regex: str

    # relational rule
    inside: Relation
    has: Relation
    precedes: Relation
    follows: Relation

    # composite rule
    all: List[Rule]
    any: List[Rule]
    # pseudo code below for demo. 
    "not": Rule # Python does not allow "not" keyword as attribute
    matches: str

# Relational Rule Related
StopBy = Union[Literal["neighbor"], Literal["end"], Rule]
class Relation(Rule, total=False):
    stopBy: StopBy
    field: str
```

----------------------------------------

TITLE: Match Function Call in Golang
DESCRIPTION: This rule detects function calls in Go (Golang) code, matching the function name and its parameters.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Go
CODE:
```
kind: "call"
pattern: "$A($B)"
```

----------------------------------------

TITLE: Search CSS within JavaScript using ast-grep
DESCRIPTION: This command demonstrates how to search for a specific CSS pattern ('background: $COLOR') within JavaScript files that have CSS injections configured. The `-C 2` flag specifies the context lines for the match.

SOURCE: https://ast-grep.github.io/advanced/language-injection

LANGUAGE: sh
CODE:
```
ast-grep -p 'background: $COLOR' -C 2
```

----------------------------------------

TITLE: JavaScript Import Matching (Ast Strictness)
DESCRIPTION: Illustrates how 'ast' strictness ignores quotation marks in import statements, allowing matches regardless of whether single or double quotes are used in the code.

SOURCE: https://ast-grep.github.io/advanced/match-algorithm

LANGUAGE: javascript
CODE:
```
import $A from 'lib' // pattern
import A1 from 'lib' // match, quotation is ignored
import A2 from "lib" // match, quotation is ignored
import A3 from "not" // no match, string_fragment is checked
```

----------------------------------------

TITLE: ast-grep Rule for Rewriting MobX Component Style (YAML/TypeScript)
DESCRIPTION: Defines an ast-grep rule in YAML to automatically refactor MobX observer components. It targets the pattern 'export const $COMP = observer($FUNC)' and replaces it with a new structure where the component is defined as a base function and then observed.

SOURCE: https://ast-grep.github.io/catalog/tsx/rewrite-mobx-component

LANGUAGE: yaml
CODE:
```
id: rewrite-mobx-component
language: typescript
rule:
  pattern: export const $COMP = observer($FUNC)
fix: |-
  const Base$COMP = $FUNC
  export const $COMP = observer(Base$COMP)
```

----------------------------------------

TITLE: TypeScript Interface for Rule Object
DESCRIPTION: This TypeScript code defines the `RuleObject` interface, mirroring the structure of the YAML rule configuration. It outlines the types for atomic, relational, and composite rules, including properties like `pattern`, `kind`, `regex`, `inside`, `has`, `all`, `any`, `not`, and `matches`.

SOURCE: https://ast-grep.github.io/guide/rule-config

LANGUAGE: TypeScript
CODE:
```
interface RuleObject {
  // atomic rule
  pattern?: string | Pattern
  kind?: string
  regex?: string
  // relational rule
  inside?: RuleObject & Relation
  has?: RuleObject & Relation
  follows?: RuleObject & Relation
  precedes?: RuleObject & Relation
  // composite rule
  all?: RuleObject[]
  any?: RuleObject[]
  not?: RuleObject
  matches?: string
}

// See Atomic rule for explanation
interface Pattern {
  context: string
  selector: string
  strictness?: Strictness
}

// See https://ast-grep.github.io/advanced/match-algorithm.html
type Strictness =
  | 'cst'
  | 'smart'
  | 'ast'
  | 'relaxed'
  | 'signature'

// See Relation rule for explanation
interface Relation {
  stopBy?: 'neighbor' | 'end' | RuleObject
  field?: string
}
```

----------------------------------------

TITLE: Migrate XState services to actors
DESCRIPTION: This rule updates the `services` property within XState's configuration to `actors`, reflecting the changes in how actors are defined and managed in v5.

SOURCE: https://ast-grep.github.io/catalog/typescript/migrate-xstate-v5

LANGUAGE: yaml
CODE:
```
id: migrate-to-actors
rule:
  kind: property_identifier
  regex: ^services$
  inside: { pattern:  $M.withConfig($$$ARGS), stopBy: end }
fix: actors
```

----------------------------------------

TITLE: TypeScript Interface for Tree-sitter TypeMap
DESCRIPTION: Defines the structure of the TypeMap interface in TypeScript, which catalogs all possible node types in a language's syntax tree. It includes properties for node kind, whether it's named, and details about its fields, children, and subtypes.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
interface TypeMap {
  [kind: string]: {
    type: string
    named: boolean
    fields?: {
      [field: string]: {
        types: { type: string, named: boolean }[]
      }
    }
    children?: { name: string, type: string }[]
    subtypes?: { type: string, named: boolean }[]
  }
}
```

----------------------------------------

TITLE: Replace Text with Regex in YAML
DESCRIPTION: This snippet demonstrates how to use the 'replace' transformation in YAML format to substitute text within a meta-variable using a regular expression. It requires a 'replace' pattern, a 'by' string for replacement, and the 'source' meta-variable.

SOURCE: https://ast-grep.github.io/reference/yaml/transformation

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR:
    replace:
      replace: regex
      by: replacement
      source: $VAR
```

----------------------------------------

TITLE: Inspect SgNode Properties in Python
DESCRIPTION: Provides methods for inspecting SgNode properties such as its text content, whether it's a leaf or named node, its kind, and its character range within the source code.

SOURCE: https://ast-grep.github.io/guide/api-usage/py-api

LANGUAGE: python
CODE:
```
# Node Inspection
class SgNode:
    def range(self) -> Range: ...
    def is_leaf(self) -> bool: ...
    def is_named(self) -> bool: ...
    def is_named_leaf(self) -> bool: ...
    def kind(self) -> str: ...
    def text(self) -> str: ...
```

LANGUAGE: python
CODE:
```
root = SgRoot("print('hello world')", "python")
node = root.root()
node.text() # will return "print('hello world')"
```

LANGUAGE: python
CODE:
```
rng = node.range()
pos = rng.start # or rng.end, both are `Pos` objects
pos.line # 0, line starts with 0
pos.column # 0, column starts with 0
rng.end.index # 17, index starts with 0
```

----------------------------------------

TITLE: Convert String Case in YAML
DESCRIPTION: This YAML configuration demonstrates the 'convert' transformation to change the case of a meta-variable's string value. It requires specifying the target case ('toCase') and optionally allows defining custom separators.

SOURCE: https://ast-grep.github.io/reference/yaml/transformation

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR:
    convert:
      toCase: snakeCase
      source: $VAR
```

----------------------------------------

TITLE: Rewrite MobX Component Style for ESLint (TypeScript)
DESCRIPTION: Refactors MobX components using the `observer` HOC to comply with ESLint's hook rules. It separates the component logic into a base function and then applies the observer HOC, allowing ESLint to correctly analyze hooks within the component.

SOURCE: https://ast-grep.github.io/catalog/tsx

LANGUAGE: yaml
CODE:
```
id: rewrite-mobx-component
language: typescript
rule:
  pattern: export const $COMP = observer($FUNC)
fix: |-
  const Base$COMP = $FUNC
  export const $COMP = observer(Base$COMP)
```

LANGUAGE: js
CODE:
```
export const Example = observer(() => {
  return <div>Hello World</div>
})
```

LANGUAGE: js
CODE:
```
export const Example = observer(() => {
  return <div>Hello World</div>         
})
const BaseExample = () => {
  return <div>Hello World</div>         
}
export const Example = observer(BaseExample) 
```

----------------------------------------

TITLE: Define Rewriter in YAML Rule Root
DESCRIPTION: This snippet shows the basic structure for defining a rewriter in the root of a YAML rule file. It includes an ID for the rewriter, the rule to match, and the fix to apply.

SOURCE: https://ast-grep.github.io/guide/rewrite/rewriter

LANGUAGE: yaml
CODE:
```
id: rewriter-demo
language: Python
rewriters:
- id: sub-rule
  rule: # some rule
  fix: # some fix
```

----------------------------------------

TITLE: Implement Tree-sitter Parser Function (Rust)
DESCRIPTION: Defines a function to provide the Tree-sitter grammar for a language, conditionally compiled based on the `builtin-parser` feature.

SOURCE: https://ast-grep.github.io/contributing/add-lang

LANGUAGE: rust
CODE:
```
#[cfg(feature = "builtin-parser")]
mod parser_implementation  {
  ...
  pub fn language_ruby() -> TSLanguage { 
    tree_sitter_ruby::language().into()  
  }                                      
  ...
}

#[cfg(not(feature = "builtin-parser"))] 
mod parser_implementation  {
  impl_parsers!(
    ...
    language_ruby, 
    ...
  );
}
```

----------------------------------------

TITLE: ast-grep Rewriter for Individual Imports
DESCRIPTION: Defines a rewriter rule to transform a captured identifier into an individual import statement.

SOURCE: https://ast-grep.github.io/reference/yaml/rewriter

LANGUAGE: YAML
CODE:
```
rewriters:
- id: rewrite-identifer
  rule:
    pattern: $IDENT
    kind: identifier
  fix: import $IDENT from './module/$IDENT'
```

----------------------------------------

TITLE: Match Word Pattern using regex in YAML
DESCRIPTION: This rule uses the `regex` property to match any sequence of word characters (`\w+`) within an AST node's text. It's recommended to combine `regex` with other rules like `kind` for better performance and accuracy, as regex matching alone can be computationally expensive.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: yaml
CODE:
```
rule:
  regex: "\w+"
```

----------------------------------------

TITLE: Replace Text with Regex in String Style
DESCRIPTION: This snippet shows the string-style syntax for the 'replace' transformation in ast-grep, allowing for inline replacement of text in a meta-variable using regular expressions. It specifies the source variable and the replacement details.

SOURCE: https://ast-grep.github.io/reference/yaml/transformation

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR: replace($VAR, replace=regex, by=replacement)
```

----------------------------------------

TITLE: Define Rewriter Rule for Keyword Arguments
DESCRIPTION: This YAML defines a rewriter rule to match keyword arguments within a `dict` function call. It extracts the key and value into metavariables `$KEY` and `$VAL` respectively.

SOURCE: https://ast-grep.github.io/guide/rewrite/rewriter

LANGUAGE: yaml
CODE:
```
rule:
  kind: keyword_argument
  all:
  - has:
      field: name
      pattern: $KEY
  - has:
      field: value
      pattern: $VAL
```

----------------------------------------

TITLE: Find Dynamic Imports (require/import) in TypeScript
DESCRIPTION: This rule identifies dynamic imports using `require` or `import` in TypeScript, capturing the variable name and the source module for both direct and awaited calls.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: find-all-imports-and-identifiers
language: TypeScript
rule:
  any:
    - all:
        - kind: variable_declarator
        - has:
            field: name
            kind: identifier
            pattern: $VAR_NAME
        - has:
            field: value
            any:
              - all:
                  - kind: call_expression
                  - has: { field: function, regex: '^(require|import)$' }
                  - has: { field: arguments, has: { kind: string, pattern: $SOURCE } }
              - kind: await_expression
                has:
                  all:
                    - kind: call_expression
                    - has: { field: function, regex: '^(require|import)$' }
                    - has: { field: arguments, has: { kind: string, pattern: $SOURCE } }
```

----------------------------------------

TITLE: Find Struct Inheritance in Cpp using ast-grep
DESCRIPTION: This rule demonstrates how to correctly identify struct inheritance in Cpp using ast-grep's pattern matching. It highlights the difference between incorrect patterns that don't match the AST structure and correct patterns that specify the full syntax, including the base class clause.

SOURCE: https://ast-grep.github.io/catalog/cpp

LANGUAGE: shell
CODE:
```
ast-grep --lang cpp --pattern '
struct $SOMETHING: $INHERITS { $$$BODY; }'
```

LANGUAGE: cpp
CODE:
```
struct Bar: Baz {
  int a, b;
}
```

----------------------------------------

TITLE: Optimize usize Digit Count in Rust using checked_ilog10
DESCRIPTION: Provides an efficient alternative to counting digits in a `usize` by avoiding string allocation. It uses `checked_ilog10().unwrap_or(0) + 1` for faster computation compared to `to_string().chars().count()`.

SOURCE: https://ast-grep.github.io/catalog/rust

LANGUAGE: rust
CODE:
```
num.checked_ilog10().unwrap_or(0) + 1
```

LANGUAGE: shell
CODE:
```
ast-grep -p '$NUM.to_string().chars().count()'
   -r '$NUM.checked_ilog10().unwrap_or(0) + 1'
   -l rs
```

LANGUAGE: rust
CODE:
```
let width = (lines + num).to_string().chars().count();
let width = (lines + num).checked_ilog10().unwrap_or(0) + 1;
```

----------------------------------------

TITLE: Define Rule ID
DESCRIPTION: Specifies a unique and descriptive identifier for the ast-grep rule. This is a required string field.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
id: no-console-log
```

----------------------------------------

TITLE: Transform Meta-variables
DESCRIPTION: Manipulates meta-variables using transformations. This can be a transformation object or a string specifying the transformation process.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR_NAME:
    replace:
      source: $ARGS
      replace: '^.+'
      by: ', '
```

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR_NAME: replace($ARGS, replace='^.+', by=', ')
```

----------------------------------------

TITLE: Match a node by its position with advanced nthChild options
DESCRIPTION: The `nthChild` rule can be configured with an object to specify `position` (number or formula), `reverse` (counting from the end), and `ofRule` (filtering siblings by another rule). This provides flexible control over sibling selection.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yaml
CODE:
```
nthChild:
  position: 2n+1
  reverse: true
  ofRule:
    kind: function_declaration
```

----------------------------------------

TITLE: Migrate Chai 'should' to 'expect' style
DESCRIPTION: This rule assists in migrating Chai assertion styles from the 'should' syntax to the more versatile 'expect' syntax in TypeScript. It covers patterns like '.should.be.an.instanceof()' and '.should.be.a()', providing fixes to convert them.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: should_to_expect_instanceof
language: TypeScript
rule:
  any:
  - pattern: $NAME.should.be.an.instanceof($TYPE)
  - pattern: $NAME.should.be.an.instanceOf($TYPE)
fix: |-
  expect($NAME).instanceOf($TYPE)
---
id: should_to_expect_genericShouldBe
language: TypeScript
rule:
  pattern: $NAME.should.be.$PROP
fix: |-
  expect($NAME).to.be.$PROP

```

LANGUAGE: javascript
CODE:
```
it('should produce an instance of chokidar.FSWatcher', () => {
  watcher.should.be.an.instanceof(chokidar.FSWatcher);
});
it('should expose public API methods', () => {
  watcher.on.should.be.a('function');
  watcher.emit.should.be.a('function');
  watcher.add.should.be.a('function');
  watcher.close.should.be.a('function');
  watcher.getWatched.should.be.a('function');
});

```

LANGUAGE: javascript
CODE:
```
it('should produce an instance of chokidar.FSWatcher', () => {
  watcher.should.be.an.instanceof(chokidar.FSWatcher); 
  expect(watcher).instanceOf(chokidar.FSWatcher); 
});
it('should expose public API methods', () => {
  watcher.on.should.be.a('function');   
  watcher.emit.should.be.a('function'); 
  watcher.add.should.be.a('function');  
  watcher.close.should.be.a('function'); 
  watcher.getWatched.should.be.a('function'); 
  expect(watcher.on).to.be.a('function'); 
  expect(watcher.emit).to.be.a('function'); 
  expect(watcher.add).to.be.a('function'); 
  expect(watcher.close).to.be.a('function'); 
  expect(watcher.getWatched).to.be.a('function'); 
});

```

----------------------------------------

TITLE: Upgrade Ant Design Vue Rule (YAML)
DESCRIPTION: This YAML configuration defines a rule for ast-grep to identify and replace the `visible` attribute with `open` in Ant Design Vue components. It uses HTML parsing to locate attributes within specific elements like `a-modal` and `a-tooltip`, ensuring that unrelated `visible` attributes (e.g., in `a-tag`) are not modified.

SOURCE: https://ast-grep.github.io/catalog/html/upgrade-ant-design-vue

LANGUAGE: yaml
CODE:
```
id: upgrade-ant-design-vue
language: HTML
utils:
  inside-tag:
    # find the enclosing element of the attribute
    inside:
      kind: element
      stopBy: { kind: element } # only the closest element
      # find the tag name and store it in metavar
      has:
        stopBy: { kind: tag_name }
        kind: tag_name
        pattern: $TAG_NAME
rule:
  # find the target attribute_name
  kind: attribute_name
  regex: :visible
  # find the element
  matches: inside-tag
# ensure it only matches modal/tooltip but not tag
constraints:
  TAG_NAME:
    regex: a-modal|a-tooltip
fix: :open
```

----------------------------------------

TITLE: ast-grep Rule to Capture Import Identifiers
DESCRIPTION: A basic ast-grep rule designed to capture all identifiers within a JavaScript import statement's curly braces.

SOURCE: https://ast-grep.github.io/reference/yaml/rewriter

LANGUAGE: YAML
CODE:
```
rule:
  pattern: import {$$$IDENTS} from './module'
```

----------------------------------------

TITLE: ast-grep Transform to Rewrite Multiple Identifiers
DESCRIPTION: Applies the defined rewriter to a collection of captured identifiers, joining the results with newlines.

SOURCE: https://ast-grep.github.io/reference/yaml/rewriter

LANGUAGE: YAML
CODE:
```
transform:
  IMPORTS:
    rewrite:
      rewriters: [rewrite-identifer]
      source: $$$IDENTS
      joinBy: "\n"
```

----------------------------------------

TITLE: Upgrade Ant Design Vue Attributes (HTML)
DESCRIPTION: This rule upgrades Ant Design Vue components by replacing the `visible` attribute with `open` for popup components like `a-modal` and `a-tooltip`. It uses ast-grep's HTML parser to identify and modify specific attributes within the correct HTML elements, ensuring that attributes on other elements like `a-tag` are not affected.

SOURCE: https://ast-grep.github.io/catalog/html

LANGUAGE: YAML
CODE:
```
id: upgrade-ant-design-vue
language: HTML
utils:
  inside-tag:
    # find the enclosing element of the attribute
    inside:
      kind: element
      stopBy: { kind: element } # only the closest element
      # find the tag name and store it in metavar
      has:
        stopBy: { kind: tag_name }
        kind: tag_name
        pattern: $TAG_NAME
rule:
  # find the target attribute_name
  kind: attribute_name
  regex: :visible
  # find the element
  matches: inside-tag
# ensure it only matches modal/tooltip but not tag
constraints:
  TAG_NAME:
    regex: a-modal|a-tooltip
fix: :open

```

LANGUAGE: HTML
CODE:
```
<template>
  <a-modal :visible="visible">content</a-modal>
  <a-tooltip :visible="visible" />
  <a-tag :visible="visible">tag</a-tag>
</template>

```

LANGUAGE: HTML
CODE:
```
<template>
  <a-modal :visible="visible">content</a-modal> // [!code --]
  <a-modal :open="visible">content</a-modal> // [!code ++]
  <a-tooltip :visible="visible" /> // [!code --]
  <a-tooltip :open="visible" /> // [!code ++]
  <a-tag :visible="visible">tag</a-tag>
</template>

```

----------------------------------------

TITLE: Combine Multiple Rewriters on a Source Variable in YAML
DESCRIPTION: This YAML snippet shows how to apply multiple rewriters ('rewrite-num' and 'rewrite-str') to a single source meta-variable ($$$LIST), allowing for targeted transformations on different node types within the list.

SOURCE: https://ast-grep.github.io/guide/rewrite/rewriter

LANGUAGE: yaml
CODE:
```
rule: {pattern: '[$$$LIST]' }
transform:
  NEW_VAR:
    rewrite:
      rewriters: [rewrite-num, rewrite-str]
      source: $$$LIST
```

----------------------------------------

TITLE: Pattern Object for Field Definition in YAML
DESCRIPTION: Illustrates using a pattern object in YAML to specifically match a field definition within a class context in JavaScript. This approach resolves ambiguity by defining the target node and its surrounding code.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: yaml
CODE:
```
pattern:
  selector: field_definition
  context: class A { $FIELD = $INIT }
```

----------------------------------------

TITLE: Define Supported Languages with Enum
DESCRIPTION: Defines an enum `Lang` for supported programming languages in `@ast-grep/napi`. It includes common languages like HTML, JavaScript, CSS, and TypeScript. A `CustomLang` type is also defined for extensibility.

SOURCE: https://ast-grep.github.io/reference/api

LANGUAGE: typescript
CODE:
```
export const enum Lang {
  Html = 'Html',
  JavaScript = 'JavaScript',
  Tsx = 'Tsx',
  Css = 'Css',
  TypeScript = 'TypeScript',
}

// More custom languages can be loaded
// see https://github.com/ast-grep/langs
type CustomLang = string & {}

```

----------------------------------------

TITLE: Configure Unused Suppression Reporting (CLI)
DESCRIPTION: Explains how to control the reporting of unused suppression comments using the ast-grep command line, including treating them as errors or enabling reports under specific conditions.

SOURCE: https://ast-grep.github.io/guide/project/severity

LANGUAGE: bash
CODE:
```
# treat unused directive as error, useful in CI/CD
ast-grep scan --error unused-suppression
# enable report even not all rules are enabled
ast-grep --rule rule.yml scan --hint unused-suppression
```

----------------------------------------

TITLE: Rewrite MobX Component Style
DESCRIPTION: This rule helps rewrite component styles in MobX applications, likely for TSX components, applying transformations for consistency.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TSX
CODE:
```
kind: "class_component"
pattern: "class $A extends React.Component {...}"
transform: "@observer class $A {...}"
```

----------------------------------------

TITLE: ast-grep Rewriter with Case Conversion
DESCRIPTION: Enhances the rewriter to convert the captured identifier to lowercase for use in the library path of the import statement.

SOURCE: https://ast-grep.github.io/reference/yaml/rewriter

LANGUAGE: YAML
CODE:
```
rewriters:
- id: rewrite-identifer
  rule:
    pattern: $IDENT
    kind: identifier
  transform:
    LIB: { convert: { source: $IDENT, toCase: lowerCase } }
  fix: import $IDENT from './module/$LIB'
```

----------------------------------------

TITLE: Traverse AST Nodes
DESCRIPTION: Provides methods for navigating the Abstract Syntax Tree (AST), similar to using jQuery. Includes functions to access children, fields, parents, ancestors, and siblings.

SOURCE: https://ast-grep.github.io/guide/api-usage/js-api

LANGUAGE: TypeScript
CODE:
```
export class SgNode {
  children(): Array<SgNode>
  field(name: string): SgNode | null
  parent(): SgNode | null
  child(nth: number): SgNode | null
  ancestors(): Array<SgNode>
  next(): SgNode | null
  nextAll(): Array<SgNode>
  prev(): SgNode | null
  prevAll(): Array<SgNode>
}
```

----------------------------------------

TITLE: Apply Rewriter to Metavariable via Transform
DESCRIPTION: This YAML snippet demonstrates how to apply a defined rewriter to a metavariable using the `transform` field. It specifies which rewriters to use and the source metavariable to apply them to.

SOURCE: https://ast-grep.github.io/guide/rewrite/rewriter

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR:
    rewrite:
      rewriters: [sub-rule]
      source: $OLD_VAR
```

----------------------------------------

TITLE: Typed SgNode and SgRoot in NAPI
DESCRIPTION: Introduces typed SgNode and SgRoot for NAPI users, enhancing type safety and code clarity when interacting with the ast-grep API. This feature improves the developer experience for NAPI integrations.

SOURCE: https://ast-grep.github.io/blog/stars-8000

LANGUAGE: typescript
CODE:
```
import { SgNode, SgRoot } from "@ast-grep/napi";

// Example usage with typed nodes
function processNode(node: SgNode) {
  // ...
}

function processRoot(root: SgRoot) {
  // ...
}
```

----------------------------------------

TITLE: Rewrite `Optional[Type]` to `Type | None`
DESCRIPTION: This rule rewrites Python type hints from `Optional[Type]` to the more modern `Type | None` syntax, applying transformations for improved type hinting.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Python
CODE:
```
kind: "type_hint"
pattern: "Optional[$A]"
transform: "$A | None"
```

----------------------------------------

TITLE: Exclude Files from Rule Application
DESCRIPTION: Uses glob patterns to exclude files from rule application. Files matching 'ignores' are skipped before 'files' are tested. This configuration is rule-specific.

SOURCE: https://ast-grep.github.io/reference/yaml

LANGUAGE: yaml
CODE:
```
ignores:
  - test/**/*.js
  - test/**/*.ts
```

----------------------------------------

TITLE: TypeScript Require Patterns
DESCRIPTION: Shows how to use the `require` function to import modules in a CommonJS style, including destructured and aliased requires.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: TypeScript
CODE:
```
// Require patterns
const mod = require('some-module');
require('polyfill');

// Destructured require
const { test122, test2 } = require('./destructured1');
// Aliased require
const { test122: test123, test2: test23, test3: test33 } = require('./destructured2');
```

----------------------------------------

TITLE: Ruby Prefer Symbol over Proc Rule Configuration
DESCRIPTION: This YAML configuration defines an ast-grep rule to enforce the preference of symbol over proc in Ruby. It targets patterns where a block is used to invoke a method and replaces it with the `&:method` shorthand.

SOURCE: https://ast-grep.github.io/catalog/ruby/prefer-symbol-over-proc

LANGUAGE: yaml
CODE:
```
id: prefer-symbol-over-proc
language: ruby
rule:
  pattern: $LIST.$ITER { |$V| $V.$METHOD }
constraints:
  ITER:
    regex: 'map|select|each'
fix: '$LIST.$ITER(&:$METHOD)'
```

----------------------------------------

TITLE: Define Rewriter with Fix for dict Arguments
DESCRIPTION: This YAML defines a rewriter named `dict-rewrite`. It uses the previously defined rule to match keyword arguments and transforms them into a dictionary key-value pair format like `'key': value`.

SOURCE: https://ast-grep.github.io/guide/rewrite/rewriter

LANGUAGE: yaml
CODE:
```
rewriters:
- id: dict-rewrite
  rule:
    kind: keyword_argument
    all:
    - has:
        field: name
        pattern: $KEY
    - has:
        field: value
        pattern: $VAL
  fix: "'$KEY': $VAL"
```

----------------------------------------

TITLE: Python Type Hint Transformation (YAML)
DESCRIPTION: This YAML configuration defines rules for recursively rewriting Python type hints. It handles transformations for Optional[T] to T | None and Union[T1, T2] to T1 | T2, including nested types.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: yaml
CODE:
```
id: recursive-rewrite-types
language: python
rewriters:
# rewrite Optional[T] to T | None
- id: optional
  rule:
    any:
    - pattern:
        context: 'arg: Optional[$TYPE]'
        selector: generic_type
    - pattern: Optional[$TYPE]
  # recursively apply rewriters to $TYPE
  transform:
    NT:
      rewrite:
        rewriters: [optional, unions]
        source: $TYPE
  # use the new variable $NT
  fix: $NT | None

# similar to Optional, rewrite Union[T1, T2] to T1 | T2
- id: unions
  language: Python
  rule:
    pattern:
      context: 'a: Union[$$$TYPES]'
      selector: generic_type
  transform:
    UNIONS:
      # rewrite all types inside $$$TYPES
      rewrite:
        rewriters: [ rewrite-unions ]
        source: $$$TYPES
        joinBy: " | "
  fix: $UNIONS
- id: rewrite-unions
  rule:
    pattern: $TYPE
    kind: type
  # recursive part
  transform:
    NT:
      rewrite:
        rewriters: [optional, unions]
        source: $TYPE
  fix: $NT

# find all types
rule:
  kind: type
  pattern: $TPE
# apply the recursive rewriters
transform:
  NEW_TYPE:
    rewrite:
      rewriters: [optional, unions]
      source: $TPE
# output
fix: $NEW_TYPE

```

----------------------------------------

TITLE: YAML: Rule for Python Generator Conversion
DESCRIPTION: A YAML rule definition that uses the `transform` key with a `substring` operation to convert a Python generator expression into a list comprehension.

SOURCE: https://ast-grep.github.io/guide/rewrite/transform

LANGUAGE: yaml
CODE:
```
id: convert_generator
rule:
  kind: generator_expression
  pattern: $GEN
transform:            # 1. the transform option
  LIST:               # 2. New variable name
    substring:        # 3. the transform operation name
      source: $GEN    # 4.1 transformation source
      startChar: 1    # 4.2 transformation argument
      endChar: -1
fix: '([$LIST])'      # 5. use the new variable in fix
```

----------------------------------------

TITLE: Match JavaScript Object Pair with String Key using 'field' and 'has'
DESCRIPTION: This YAML rule demonstrates an alternative way to match a JavaScript object 'pair' that has a 'string' as its 'key', using ast-grep's 'field' and 'has' properties.

SOURCE: https://ast-grep.github.io/advanced/core-concepts

LANGUAGE: yaml
CODE:
```
rule:
  kind: pair
  has:
    field: key
    kind: string
```

----------------------------------------

TITLE: Register Alias Languages with languageGlob
DESCRIPTION: The `languageGlob` feature in ast-grep rules allows registering custom language aliases for file extensions, providing flexibility in handling and overriding language-specific parsing and matching.

SOURCE: https://ast-grep.github.io/blog/stars-5000

LANGUAGE: yaml
CODE:
```
id: custom-lang
rule:
  languageGlob:
    vue: "*.vue"
  pattern: "<template>
    <script lang='js'>
      $A
    </script>
  </template>"
fix:
  - replace: "<script lang='js'>
    $A
  </script>"
```

----------------------------------------

TITLE: Extract i18n Keys from Static Text (HTML)
DESCRIPTION: This rule automates the extraction of static text from HTML templates into i18n keys, simplifying internationalization. It specifically targets plain text nodes and avoids dynamic content within mustache syntax (e.g., `{{ text }}`). The extracted text is formatted as an i18n function call.

SOURCE: https://ast-grep.github.io/catalog/html

LANGUAGE: YAML
CODE:
```
id: extract-i18n-key
language: html
rule:
  kind: text
  pattern: $T
  # skip dynamic text in mustache syntax
  not: { regex: '{{\.*}}' }
fix: "{{ $('$T') }}"

```

LANGUAGE: HTML
CODE:
```
<template>
  <span>Hello</span>
  <span>{{ text }}</span>
</template>

```

LANGUAGE: HTML
CODE:
```
<template>
  <span>Hello</span> // [!code --]
  <span>{{ $('Hello') }}</span> // [!code ++]
  <span>{{ text }}</span>
</template>

```

----------------------------------------

TITLE: Match node by field with relational rules
DESCRIPTION: Uses the 'field' property with 'has' or 'inside' to match nodes based on their semantic role within the AST.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
has:
  kind: statement_block
  field: body
```

----------------------------------------

TITLE: TypeScript Mixed Imports
DESCRIPTION: Combines default, named, and namespace imports from different modules in a single import statement.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: TypeScript
CODE:
```
// Mixed imports
import defaultExport, { namedExport } from './mixed';
import defaultExport2, * as namespace from './mixed2';
```

----------------------------------------

TITLE: Advanced positional control for siblings
DESCRIPTION: Provides advanced control for selecting siblings using 'position', 'reverse' counting, or filtering siblings with 'ofRule'.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
nthChild:
  position: 2
  reverse: true
  ofRule: { kind: argument_list }
```

----------------------------------------

TITLE: Rewrite Method to Function Call
DESCRIPTION: This rule transforms method calls into standalone function calls in C, applying transformations for code refactoring.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: C
CODE:
```
kind: "method_call"
pattern: "$A.$B($C)"
transform: "$B($A, $C)"
```

----------------------------------------

TITLE: Match console.log in JavaScript using Babel
DESCRIPTION: This JavaScript snippet shows a complex way to identify 'console.log' using the Babel AST manipulation API. It involves checking parent paths and identifier names.

SOURCE: https://ast-grep.github.io/guide/introduction

LANGUAGE: javascript
CODE:
```
path.parentPath.isMemberExpression() &&
path.parentPath.get('object').isIdentifier({ name: 'console' }) &&
path.parentPath.get('property').isIdentifier({ name: 'log' })
```

----------------------------------------

TITLE: Configure ast-grep Rule for Barrel Imports (YAML)
DESCRIPTION: This YAML configuration defines an ast-grep rule to find barrel import statements and a rewriter to transform them into direct imports. It targets TypeScript files and uses patterns to identify and modify import statements.

SOURCE: https://ast-grep.github.io/catalog/typescript/speed-up-barrel-import

LANGUAGE: yaml
CODE:
```
id: speed-up-barrel-import
language: typescript
# find the barrel import statement
rule:
  pattern: import {$$$IDENTS} from './barrel'
# rewrite imported identifiers to direct imports
rewriters:
- id: rewrite-identifer
  rule:
    pattern: $IDENT
    kind: identifier
  fix: import $IDENT from './barrel/$IDENT'
# apply the rewriter to the import statement
transform:
  IMPORTS:
    rewrite:
      rewriters: [rewrite-identifer]
      # $$$IDENTS contains imported identifiers
      source: $$$IDENTS
      # join the rewritten imports by newline
      joinBy: "\n"
fix: $IMPORTS
```

----------------------------------------

TITLE: Configure GraphQL Injection in JavaScript
DESCRIPTION: This configuration enables ast-grep to identify and parse GraphQL code embedded within JavaScript files. It defines the host language as 'js', uses a rule to match the `graphql` tag with a template literal, and specifies 'graphql' as the injected language.

SOURCE: https://ast-grep.github.io/advanced/language-injection

LANGUAGE: yaml
CODE:
```
languageInjections:
- hostLanguage: js
  rule:
    pattern: graphql`$CONTENT`
  injected: graphql
```

----------------------------------------

TITLE: TypeScript Imports with Comments
DESCRIPTION: Shows how comments can be included within import statements, including block comments and end-of-line comments.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: TypeScript
CODE:
```
// Comments in imports
import /* test */ {
    // Comment in import
    commentedImport
} from './commented'; // End of line comment
```

----------------------------------------

TITLE: Avoid Duplicated Exports in Rust
DESCRIPTION: This rule helps identify and refactor duplicated exports in Rust code, which can unnecessarily increase API surface and complicate IDE auto-completion. It suggests ensuring items are exported only once using `pub`.

SOURCE: https://ast-grep.github.io/catalog/rust

LANGUAGE: yaml
CODE:
```
id: avoid-duplicate-export
language: rust
rule:
  all:
     - pattern: pub use $B::$C;
     - inside:
        kind: source_file
        has:
          pattern: pub mod $A;
     - has:
        pattern: $A
        stopBy: end
```

LANGUAGE: rust
CODE:
```
pub mod foo;
pub use foo::Foo;
pub use foo::A::B;


pub use aaa::A;
pub use woo::Woo;
```

----------------------------------------

TITLE: Match Literal Values in YAML
DESCRIPTION: This YAML snippet defines a rule to match various literal kinds in JavaScript, such as 'false', 'undefined', 'null', 'true', 'regex', 'number', and 'string'. It serves as a base for reusable utility rules.

SOURCE: https://ast-grep.github.io/guide/rule-config/utility-rule

LANGUAGE: yaml
CODE:
```
any:
  - kind: 'false'
  - kind: undefined
  - kind: 'null'
  - kind: 'true'
  - kind: regex
  - kind: number
  - kind: string
```

----------------------------------------

TITLE: Switch Chai from `should` style to `expect`
DESCRIPTION: This rule assists in migrating assertion styles in Chai.js from the `should` style to the more common `expect` style in TypeScript.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TypeScript
CODE:
```
kind: "assertion"
pattern: "expect($A).to.equal($B)"
any: "$A"
transform: "$A.should.equal($B)"
```

----------------------------------------

TITLE: ast-grep scan: Threads Option
DESCRIPTION: Sets the approximate number of threads to use for the scan operation. A value of 0 (the default) allows ast-grep to determine the thread count heuristically.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan -j, --threads <NUM>
```

----------------------------------------

TITLE: JS: Babel Plugin for Reverse React Compiler
DESCRIPTION: This JavaScript code represents a Babel plugin designed as a parody of the React Compiler. It aims to remove memoization by replacing `useMemo`, `useCallback`, and `memo` calls with their first argument, potentially slowing down the application.

SOURCE: https://ast-grep.github.io/catalog/tsx

LANGUAGE: js
CODE:
```
const ReverseReactCompiler = ({ types: t }) => ({
  visitor: {
    CallExpression(path) {
      const callee = path.node.callee;
      if (
        t.isIdentifier(callee, { name: "useMemo" }) ||
        t.isIdentifier(callee, { name: "useCallback" }) ||
        t.isIdentifier(callee, { name: "memo" })
      ) {
        path.replaceWith(args[0]);
      }
    },
  },
});
```

----------------------------------------

TITLE: Extract Substring in YAML
DESCRIPTION: This YAML snippet illustrates the 'substring' transformation for extracting a portion of a meta-variable. It defines the 'source' variable and optionally specifies 'startChar' (inclusive) and 'endChar' (exclusive) for the substring.

SOURCE: https://ast-grep.github.io/reference/yaml/transformation

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR:
    substring:
      startChar: 1
      endChar: -1
      source: $VAR
```

----------------------------------------

TITLE: Set Linting Severity Level
DESCRIPTION: Defines the severity level for the linting message, such as 'warning' or 'error'.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
severity: warning
```

----------------------------------------

TITLE: Convert String Case in String Style
DESCRIPTION: This snippet shows the string-style usage of the 'convert' transformation for altering the case of a meta-variable. It includes the source variable and the desired target case.

SOURCE: https://ast-grep.github.io/reference/yaml/transformation

LANGUAGE: yaml
CODE:
```
transform:
  NEW_VAR: convert($VAR, toCase=snakeCase)
```

----------------------------------------

TITLE: Target node precedes another node
DESCRIPTION: This rule asserts that the target node must appear before another node that matches the given sub-rule pattern.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
precedes:
  pattern: function $FUNC() { $$ }
```

----------------------------------------

TITLE: Define a Dictionary Rewriter in YAML
DESCRIPTION: This snippet demonstrates how to define a rewriter rule in YAML for ast-grep. It targets keyword arguments and rewrites them into a specific string format.

SOURCE: https://ast-grep.github.io/guide/rewrite/rewriter

LANGUAGE: yaml
CODE:
```
rewriters:
- id: dict-rewrite
  rule:
    kind: keyword_argument
    all:
    - has:
        field: name
        pattern: $KEY
    - has:
        field: value
        pattern: $VAL
  fix: "'$KEY': $VAL"
```

----------------------------------------

TITLE: TypeScript Multiple Import Lines
DESCRIPTION: Demonstrates importing multiple named exports from the same module across different import statements.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: TypeScript
CODE:
```
// Multiple import lines from the same file
import { one, two as alias, three } from './multiple';
import { never, gonna, give, you, up } from './multiple';
```

----------------------------------------

TITLE: Match a single AST node with a string pattern
DESCRIPTION: The `pattern` rule, when provided as a string, matches a single Abstract Syntax Tree (AST) node based on ast-grep's pattern syntax. This is useful for directly specifying code structures to find.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yml
CODE:
```
pattern: console.log($ARG)
```

----------------------------------------

TITLE: Relational rule search with stopBy
DESCRIPTION: The 'stopBy' option allows relational rules like 'inside' to search up to the end of the AST, not just immediate neighbors.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
inside:
  kind: function_declaration
  stopBy: end
```

----------------------------------------

TITLE: Match node satisfying all sub-rules
DESCRIPTION: Ensures a target node meets all conditions specified in the list of sub-rules.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
all:
  - pattern: const $VAR = $VALUE
  - has: { kind: string_literal }
```

----------------------------------------

TITLE: ast-grep scan: Globs Option
DESCRIPTION: Includes or excludes file paths matching specified glob patterns. This option overrides all other ignore logic. Multiple glob flags can be used, and exclusion is indicated by a preceding `!`.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan --globs <GLOBS>
```

----------------------------------------

TITLE: Apply Rewriters to Sub-nodes in YAML
DESCRIPTION: This YAML configuration shows how to apply a defined rewriter ('dict-rewrite') to a specific part of the code identified by a pattern, using the 'transform' field.

SOURCE: https://ast-grep.github.io/guide/rewrite/rewriter

LANGUAGE: yaml
CODE:
```
rule:
  pattern: dict($$$ARGS)
transform:
  LITERAL:
    rewrite:
      rewriters: [dict-rewrite]
      source: $$$ARGS
fix: '{ $LITERAL }'
```

----------------------------------------

TITLE: Override Rule Severity (CLI)
DESCRIPTION: Shows how to override the default severity levels of rules directly from the command line using ast-grep. This allows for flexible control during scans, especially in CI/CD environments.

SOURCE: https://ast-grep.github.io/guide/project/severity

LANGUAGE: bash
CODE:
```
ast-grep scan --error rule-id --warning other-rule-id
```

----------------------------------------

TITLE: SgNode Class with Type Parameters in TypeScript
DESCRIPTION: Defines the SgNode class in TypeScript, which is central to ast-grep's new API. It accepts type parameters for the TypeMap (M) and the specific node Kind (K), enabling typed AST node representation.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
class SgNode<M extends TypesMap, K extends Kinds<M> = Kinds<M>> {
  kind: K
  fields: M[K]['fields'] // demo definition, real one is more complex
}
```

----------------------------------------

TITLE: TypeScript RuleMatch Object Definition
DESCRIPTION: The TypeScript interface definition for RuleMatch, extending the base Match object with rule-specific information like ruleId, severity, and message.

SOURCE: https://ast-grep.github.io/guide/tools/json

LANGUAGE: typescript
CODE:
```
interface RuleMatch extends Match {
  ruleId: string
  severity: Severity
  note?: string
  message: string
}

enum Severity {
  Error = "error",
  Warning = "warning",
  Info = "info",
  Hint = "hint",
}
```

----------------------------------------

TITLE: Rewrite `&&` short circuit to ternary operator (TSX Diff)
DESCRIPTION: This diff shows the transformation applied by ast-grep to fix the `&&` short-circuit issue in JSX. The original code, `<div>{ list.length && list.map(i => <p/>) }</div>`, is converted to `<div>{ list.length ? list.map(i => <p/>) : null }</div>`, replacing the `&&` with a ternary operator to ensure correct conditional rendering.

SOURCE: https://ast-grep.github.io/catalog/tsx/avoid-jsx-short-circuit

LANGUAGE: tsx
CODE:
```
<div>{ list.length && list.map(i => <p/>) }</div> 
<div>{ list.length ?  list.map(i => <p/>) : null }</div>
```

----------------------------------------

TITLE: Match JavaScript Object Property by Field and Key
DESCRIPTION: This snippet demonstrates how to find JavaScript object properties where the key matches a specific regex pattern, using the `field` meta-variable to ensure it's the key and not the value. The rule uses `kind: pair` and specifies `field: key` with `regex: 'prototype'`.

SOURCE: https://ast-grep.github.io/guide/rule-config/relational-rule

LANGUAGE: yaml
CODE:
```
kind: pair # key-value pair in JS
has:
  field: key # note here
  regex: 'prototype'
```

LANGUAGE: javascript
CODE:
```
var a = {
  prototype: anotherObject
}
```

----------------------------------------

TITLE: Find Import File without Extension (JavaScript)
DESCRIPTION: This rule identifies import statements in ECMAScript modules that are missing file extensions. It targets both static and dynamic imports for local or absolute modules, ensuring compliance with ESM specifications.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: find-import-file
language: js
rule:
  regex: "/[^.]+[^/]$"
  kind: string_fragment
  any:
    - inside:
        stopBy: end
        kind: import_statement
    - inside:
        stopBy: end
        kind: call_expression
        has:
          field: function
          regex: "^import$"
```

----------------------------------------

TITLE: Implement Language Trait with Macro (Rust)
DESCRIPTION: Uses a macro to implement the necessary methods for the ast-grep `Language` trait for a new language, with options for customizing identifier characters.

SOURCE: https://ast-grep.github.io/contributing/add-lang

LANGUAGE: rust
CODE:
```
// lib.rs
impl_lang_expando!(Ruby, language_ruby, 'µ'); 
```

----------------------------------------

TITLE: Define rule to avoid `&&` short circuit in JSX (YAML)
DESCRIPTION: This YAML configuration defines a rule for ast-grep to identify and fix the `&&` short-circuit pattern in JSX when a number is on the left side. It specifies the rule's ID, language, the pattern to match, conditions where it should not apply (e.g., inside JSX attributes), and the fix to apply (rewriting to a ternary operator).

SOURCE: https://ast-grep.github.io/catalog/tsx/avoid-jsx-short-circuit

LANGUAGE: yaml
CODE:
```
id: do-what-brooooooklyn-said
language: Tsx
rule:
  kind: jsx_expression
  has:
    pattern: $A && $B
  not:
    inside:
      kind: jsx_attribute
fix: "{$A ? $B : null}"
```

----------------------------------------

TITLE: Inspect Rule Severity with ast-grep
DESCRIPTION: This command uses the `--inspect` flag with ast-grep to scan for entity rules and display their severity levels. It helps in debugging rule configurations and understanding why rules are or are not triggered.

SOURCE: https://ast-grep.github.io/guide/project/severity

LANGUAGE: bash
CODE:
```
ast-grep scan --inspect entity
```

----------------------------------------

TITLE: TypeScript Named and Aliased Imports
DESCRIPTION: Shows how to import specific exports from a module using named imports and how to rename them using aliases.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: TypeScript
CODE:
```
//@ts-nocheck
// Named import
import { testing } from './tests';

// Aliased import
import { testing as test } from './tests2';
```

----------------------------------------

TITLE: Add New Language Variants and Implementations (Rust)
DESCRIPTION: This Rust code illustrates adding a 'Swift' variant to the `WasmLang` enum, handling it within the `execute_lang_method` macro, and implementing the `FromStr` trait for parsing.

SOURCE: https://ast-grep.github.io/contributing/add-lang

LANGUAGE: rust
CODE:
```
// new variant
public enum WasmLang {
  // ...
  Swift, 
}

// handle variant in macro
macro_rules! execute_lang_method {
  ($me: path, $method: ident, $($pname:tt),*) => {
    use WasmLang as W;
    match $me {
      W::Swift => L::Swift.$method($($pname,)*), 
    }
  }
}

// impl FromStr
impl FromStr for WasmLang {
  // ...
  fn from_str(s: &str) -> Result<Self, Self::Err> {
    Ok(match s {
      "swift" => Swift, 
    }))
  }
}
```

----------------------------------------

TITLE: Generate Code Edits
DESCRIPTION: Explains how to modify source code using the `SgNode` API. Since `SgNode` is immutable, the `replace` method generates an `Edit` object, which can then be applied using `commitEdits` to produce new source code.

SOURCE: https://ast-grep.github.io/guide/api-usage/js-api

LANGUAGE: TypeScript
CODE:
```
interface Edit {
  /** The start position of the edit */
  startPos: number
  /** The end position of the edit */
  endPos: number
  /** The text to be inserted */
  insertedText: string
}

class SgNode {
  replace(text: string): Edit
  commitEdits(edits: Edit[]): string
}
```

LANGUAGE: JavaScript
CODE:
```
const root = parse(Lang.JavaScript, "console.log('hello world')").root()
const node = root.find('console.log($A)')
const edit = node.replace("console.error('bye world')")
const newSource = node.commitEdits([edit])
// "console.error('bye world')"
```

----------------------------------------

TITLE: Target node follows another node
DESCRIPTION: This rule asserts that the target node must appear after another node that matches the given sub-rule pattern.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
follows:
  pattern: let x = 10;
```

----------------------------------------

TITLE: Match Any Variable Declaration (yaml)
DESCRIPTION: This rule uses the 'any' operator to match any variable declaration, regardless of whether it uses 'var', 'const', or 'let'. It utilizes meta-variables ($A) to capture the declared variable's name or value.

SOURCE: https://ast-grep.github.io/guide/rule-config/composite-rule

LANGUAGE: yaml
CODE:
```
rule:
  any:
    - pattern: var a = $A
    - pattern: const a = $A
    - pattern: let a = $A
```

----------------------------------------

TITLE: Automatic Type Refinement with 'field'
DESCRIPTION: The 'field' method automatically refines node types based on contextual information by examining static type information. This provides concise usage and correct type inference without explicit type specification.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
let exportStmt: SgNode<'export_statement'>
exportStmt.field('declaration') // Automatically refines to union:
                               // SgNode<'function_declaration'> |
                               // SgNode<'variable_declaration'> | ...
```

----------------------------------------

TITLE: YAML Rule for Avoiding Duplicated Exports
DESCRIPTION: This YAML configuration defines an ast-grep rule to detect duplicated exports in Rust code. It specifies that the rule applies to Rust source files and uses patterns to identify `pub use` statements within modules, checking for potential duplicate exports. The rule aims to enforce the best practice of exporting items only once.

SOURCE: https://ast-grep.github.io/catalog/rust/avoid-duplicated-exports

LANGUAGE: yaml
CODE:
```
id: avoid-duplicate-export
language: rust
rule:
  all:
     - pattern: pub use $B::$C;
     - inside:
        kind: source_file
        has:
          pattern: pub mod $A;
     - has:
        pattern: $A
        stopBy: end

```

----------------------------------------

TITLE: Programmatic API for Console Log Search (TypeScript)
DESCRIPTION: This TypeScript code snippet shows how to use the ast-grep programmatic API to parse JavaScript code and find 'console.log' calls within function declarations using a defined rule.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: typescript
CODE:
```
import { Lang, parse } from '@ast-grep/napi'

const sg = parse(Lang.JavaScript, code)
sg.root().find({
  rule: {
    pattern: 'console.log($A)',
    inside: {
      kind: 'function_declaration'
    }
  }
})
```

----------------------------------------

TITLE: Migrate action_filter in Ruby on Rails
DESCRIPTION: This rule assists in migrating `action_filter` in Ruby on Rails applications. It applies transformations and fixes to update the code.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Ruby
CODE:
```
kind: "method"
pattern: "action_filter :$A, only: [$B]"
transform: "before_action :$A, only: [$B]"
+1
```

----------------------------------------

TITLE: TypeScript Mixed Imports
DESCRIPTION: Combines default, named, and namespace imports from different modules in a single import statement.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: TypeScript
CODE:
```
// Mixed imports
import defaultExport, { namedExport } from './mixed';
import defaultExport2, * as namespace from './mixed2';
```

----------------------------------------

TITLE: Report Unused Suppressions (Diff)
DESCRIPTION: Shows the format of a report generated by ast-grep when it detects unused suppression comments in the codebase. This helps maintain code hygiene.

SOURCE: https://ast-grep.github.io/guide/project/severity

LANGUAGE: diff
CODE:
```
help[unused-suppression]: Unused 'ast-grep-ignore' directive.
- // ast-grep-ignore
+
```

----------------------------------------

TITLE: Extract Effective AST Node (Function Call)
DESCRIPTION: Illustrates ast-grep's extraction of the innermost node with multiple children for a function call, identifying the 'call_expression' as the effective AST node.

SOURCE: https://ast-grep.github.io/advanced/pattern-parse

LANGUAGE: yaml
CODE:
```
program
  expression_statement
    call_expression       <--- effective node
      identifier
      arguments
        identifier
```

----------------------------------------

TITLE: Fix Format String Vulnerability (YAML)
DESCRIPTION: This YAML rule uses ast-grep to identify and fix format string vulnerabilities in C++ code. It targets functions like `sprintf` and `fprintf` where user-controlled data might be misinterpreted as format specifiers. The fix explicitly adds `"%s"` to ensure the variable is treated as a string.

SOURCE: https://ast-grep.github.io/catalog/cpp/fix-format-vuln

LANGUAGE: yaml
CODE:
```
id: fix-format-security-error
language: Cpp
rule:
  pattern: $PRINTF($S, $VAR)
constraints:
  PRINTF: # a format string function
    { regex: "^sprintf|fprintf$" }
  VAR: # not a literal string
    not:
      any:
      - { kind: string_literal }
      - { kind: concatenated_string }
fix: $PRINTF($S, "%s", $VAR)
```

----------------------------------------

TITLE: Find Regular Imports in TypeScript
DESCRIPTION: This rule finds standard named imports in TypeScript (e.g., `import { ORIGINAL } from 'SOURCE'`). It captures the imported identifier and the source module.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: find-all-imports-and-identifiers
language: TypeScript
rule:
  any:
    - all:
        - kind: import_specifier
        - has:
            field: name
            pattern: $ORIGINAL
        - inside:
            stopBy: end
            kind: import_statement
            has:
              field: source
              pattern: $SOURCE
```

----------------------------------------

TITLE: Create SVG Element in TSX
DESCRIPTION: This snippet demonstrates how to create an SVG element within a TSX file using ast-grep. It defines an SVG with a path and specific attributes.

SOURCE: https://ast-grep.github.io/catalog/tsx

LANGUAGE: tsx
CODE:
```
const element = (
  <svg width="100" height="100" viewBox="0 0 100 100">
    <path d="M10 20 L30 40" stroke-linecap="round" fill-opacity="0.5" />
  </svg>
)
```

----------------------------------------

TITLE: Configure Missing Component Decorator Rule (YAML)
DESCRIPTION: This YAML configuration defines a rule for ast-grep to detect Angular lifecycle methods used in classes missing the @Component() decorator. It uses patterns and constraints to specify the code structure to match and highlights specific parts of the code with custom labels.

SOURCE: https://ast-grep.github.io/catalog/typescript/missing-component-decorator

LANGUAGE: yaml
CODE:
```
id: missing-component-decorator
message: You're using an Angular lifecycle method, but missing an Angular @Component() decorator.
language: TypeScript
severity: warning
rule:
  pattern:
    context: 'class Hi { $METHOD() { $$$_} }'
    selector: method_definition
  inside:
    pattern: 'class $KLASS $$$_ { $$$_ }'
    stopBy: end
    not:
      has:
        pattern: '@Component($$$_)'
constraints:
  METHOD:
    regex: ngOnInit|ngOnDestroy
labels:
  KLASS:
    style: primary
    message: "This class is missing the decorator."
  METHOD:
    style: secondary
    message: "This is an Angular lifecycle method."
metadata:
  contributedBy: samwightt
```

----------------------------------------

TITLE: Refine Node Matches
DESCRIPTION: Details methods for filtering nodes after an initial match, such as `matches`, `inside`, `has`, `precedes`, and `follows`. These methods currently only support pattern-based refinement.

SOURCE: https://ast-grep.github.io/guide/api-usage/js-api

LANGUAGE: TypeScript
CODE:
```
export class SgNode {
  matches(m: string): boolean
  inside(m: string): boolean
  has(m: string): boolean
  precedes(m: string): boolean
  follows(m: string): boolean
}
```

LANGUAGE: JavaScript
CODE:
```
const node = root.find('console.log($A)')
node.matches('console.$METHOD($B)') // true
```

----------------------------------------

TITLE: Define and Use Local Utility Rule 'is-literal' in YAML
DESCRIPTION: This YAML configuration shows how to define a local utility rule named 'is-literal' within the 'utils' section. This utility can then be referenced in the main 'rule' using 'matches', allowing for code reuse within the same configuration file.

SOURCE: https://ast-grep.github.io/guide/rule-config/utility-rule

LANGUAGE: yaml
CODE:
```
# define util rules using utils field
utils:
  # it accepts a string-keyed dictionary of rule object
  is-literal:               # rule-id
    any:                    # actual rule object
      - kind: 'false'
      - kind: undefined
      - kind: 'null'
      - kind: 'true'
      - kind: regex
      - kind: number
      - kind: string
rule:
  any:
    - matches: is-literal # reference the util!
    - kind: array
      has:
        matches: is-literal # reference it again!
```

----------------------------------------

TITLE: Match node text using Rust-style regular expressions
DESCRIPTION: The `regex` rule matches a node's text using Rust-style regular expressions. The regex must match the entire text of the node. It supports features similar to Perl-style regex but lacks lookarounds and backreferences.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yml
CODE:
```
regex: console
```

LANGUAGE: yml
CODE:
```
regex: ^[a-z]+$
```

LANGUAGE: yml
CODE:
```
regex: (?i)a(?-i)b+
```

----------------------------------------

TITLE: Fix Format String Vulnerability
DESCRIPTION: This rule helps fix format string vulnerabilities in C/C++ code by identifying and correcting problematic patterns. It leverages constraints for security.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: C++
CODE:
```
kind: "function_call"
pattern: "printf($A)"
constraints: "$A"
```

----------------------------------------

TITLE: ast-grep DSL: Trailing Commas Pitfall
DESCRIPTION: Highlights a common pitfall in the ast-grep DSL: the requirement for trailing commas in specific contexts, such as within the 'where' clause and 'if' blocks. Missing commas can lead to syntax errors.

SOURCE: https://ast-grep.github.io/blog/yaml-vs-dsl

LANGUAGE: JavaScript
CODE:
```
`$method($message)` where {
  $method <: `console.log`,
  if ($message <: r"Hello, .*!") {
    $linter = "hello world"
  } else {
    $linter = "not hello"
  },
  register_diagnostic(
    span = $method,
    message = $linter
  )
}
```

----------------------------------------

TITLE: Diff: List Comprehension vs. Generator Expression (Python)
DESCRIPTION: This diff highlights the transformation from a Python list comprehension `[x for x in range(10)]` to a more memory-efficient generator expression `(x for x in range(10))` within the context of the `any` function.

SOURCE: https://ast-grep.github.io/catalog/python/prefer-generator-expressions

LANGUAGE: python
CODE:
```
any([x for x in range(10)]) 
any(x for x in range(10)) 
```

----------------------------------------

TITLE: ast-grep Rule: Dynamic Imports (Destructured Alias Assignment)
DESCRIPTION: This rule identifies dynamic imports where a module is imported and its exports are destructured with aliasing. It captures the original identifier, the alias, and the module source. It handles both direct and awaited calls to 'require' or 'import'.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
- all:
    # 1. Target the pair_pattern for aliased destructuring
    - kind: pair_pattern
    # 2. Capture the original identifier (key)
    - has:
        field: key
        kind: property_identifier # Could be string/number literal too, but property_identifier is common
        pattern: $ORIGINAL
    # 3. Capture the alias identifier (value)
    - has:
        field: value
        kind: identifier
        pattern: $ALIAS
    # 4. Ensure it's inside an object_pattern that is the name of a variable_declarator
    - inside:
        kind: object_pattern
        inside: # Check the variable_declarator it belongs to
          kind: variable_declarator
          # 5. Check the value assigned by the variable_declarator
          has:
            field: value
            any:
              # Direct call
              - all:
                  - kind: call_expression
                  - has: { field: function, regex: '^(require|import)$' }
                  - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source
              # Awaited call
              - kind: await_expression
                has:
                  all:
                    - kind: call_expression
                    - has: { field: function, regex: '^(require|import)$' }
                    - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source
          stopBy: end # Search ancestors to find the correct variable_declarator
    stopBy: end # Ensure we check ancestors for the variable_declarator
```

----------------------------------------

TITLE: Add Language to SupportLang Enum (Rust)
DESCRIPTION: This snippet shows how to add a new language, 'Ruby', as an enum variant to the `SupportLang` enum in `lib.rs`.

SOURCE: https://ast-grep.github.io/contributing/add-lang

LANGUAGE: rust
CODE:
```
// lib.rs
public enum SupportLang {
  ...
  Ruby, 
  ...
}
```

----------------------------------------

TITLE: Demonstrate Correct JSON Tag Usage to Omit Fields in Go
DESCRIPTION: This code demonstrates the correct way to omit a field from JSON marshaling/unmarshaling in Go by using just `-` without a comma in the JSON tag. This ensures that the field is properly excluded from the marshaling/unmarshaling process.

SOURCE: https://ast-grep.github.io/catalog/go/unmarshal-tag-is-dash

LANGUAGE: go
CODE:
```
type User struct {
    Username string `json:"username,omitempty"`
    Password string `json:"password,omitempty"`
    IsAdmin  bool   `json:"-"`  // Correctly prevents marshaling/unmarshaling
}
```

----------------------------------------

TITLE: Suppress Rules with ast-grep-ignore
DESCRIPTION: The `ast-grep-ignore` comment can now be used directly on the same line as the code to be excluded. This simplifies the process of suppressing rules for specific lines of code, reducing clutter.

SOURCE: https://ast-grep.github.io/blog/stars-8000

LANGUAGE: yaml
CODE:
```
# ast-grep-ignore
<code_to_exclude>
```

----------------------------------------

TITLE: TypeScript Multiline Imports
DESCRIPTION: Illustrates how to import multiple named exports from a module using a multiline import statement.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: TypeScript
CODE:
```
// Multiline imports
import {
    longImport1,
    longImport2 as alias2,
    longImport3
} from './multiline';
```

----------------------------------------

TITLE: Define a Rule for No Await in Loops (TypeScript)
DESCRIPTION: Defines a specific ast-grep rule to detect and flag the use of `await` within loop constructs in TypeScript code. It specifies the rule's ID, message, severity, language, and the pattern to match.

SOURCE: https://ast-grep.github.io/guide/test-rule

LANGUAGE: yaml
CODE:
```
id: no-await-in-loop
message: Don't use await inside of loops
severity: warning
language: TypeScript
rule:
  all:
    - inside:
        any:
          - kind: for_in_statement
          - kind: while_statement
        stopBy:
          end
    - pattern: await $_
```

----------------------------------------

TITLE: Control ast-grep Heading Display
DESCRIPTION: This option determines whether ast-grep prints the file name as a heading before its matches. 'auto' (default) uses headings for terminal output but not for piped/redirected output. 'always' ensures headings are always printed, and 'never' prevents them from being printed.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: bash
CODE:
```
--heading <WHEN>
```

----------------------------------------

TITLE: TypeScript Diff: Console Usage
DESCRIPTION: Shows a diff of TypeScript code related to console usage. It highlights `console.debug('')` and a `try-catch` block with `console.error(e)` as an allowed exception.

SOURCE: https://ast-grep.github.io/catalog/typescript/no-console-except-catch

LANGUAGE: typescript
CODE:
```
console.debug('') 
try {
    console.log('hello') 
} catch (e) {
    console.error(e) // OK
}
```

----------------------------------------

TITLE: Exclude Files from Rule Application
DESCRIPTION: Specifies glob patterns for files that should be excluded when applying the rule.

SOURCE: https://ast-grep.github.io/cheatsheet/yaml

LANGUAGE: yaml
CODE:
```
ignores: ['test/**/*.js']
```

----------------------------------------

TITLE: Find Destructured Dynamic Imports in TypeScript
DESCRIPTION: This rule finds dynamic imports in TypeScript where the source is destructured from a `require` or `import` call (e.g., `const { ORIGINAL } = require('SOURCE')`). It captures the destructured identifier and the source module.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: find-all-imports-and-identifiers
language: TypeScript
rule:
  any:
    - all:
        - kind: shorthand_property_identifier_pattern
        - pattern: $ORIGINAL
        - inside:
            kind: object_pattern
            inside:
              kind: variable_declarator
              has:
                field: value
                any:
                  - all:
                      - kind: call_expression
                      - has: { field: function, regex: '^(require|import)$' }
                      - has: { field: arguments, has: { kind: string, pattern: $SOURCE } }
                  - kind: await_expression
                    has:
                      all:
                        - kind: call_expression
                        - has: { field: function, regex: '^(require|import)$' }
                        - has: { field: arguments, has: { kind: string, pattern: $SOURCE } }
```

----------------------------------------

TITLE: Match pattern with stopBy: end (ast-grep YAML)
DESCRIPTION: This YAML snippet demonstrates the use of 'stopBy: end' within a 'has' relational rule. It aims to find a node matching '$MY_PATTERN' that has a descendant matching the 'has' rule, searching until the end of the relevant scope.

SOURCE: https://ast-grep.github.io/guide/rule-config/relational-rule

LANGUAGE: yaml
CODE:
```
has:
  stopBy: end
  pattern: $MY_PATTERN
```

----------------------------------------

TITLE: ast-grep pattern for indoc! macro refactoring
DESCRIPTION: This command uses ast-grep to identify Rust code where the `indoc!` macro is used with raw string literals. It then rewrites the code to remove the macro and enclose the raw string content in backticks.

SOURCE: https://ast-grep.github.io/catalog/rust/rewrite-indoc-macro

LANGUAGE: shell
CODE:
```
ast-grep --pattern 'indoc! { r#"$$$A"# }' --rewrite '`$$$A`' sgtest.rs
```

----------------------------------------

TITLE: Reverse React Compiler™
DESCRIPTION: This rule appears to be related to reversing or analyzing the React Compiler, potentially for debugging or understanding its transformations in TSX.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TSX
CODE:
```
kind: "component"
pattern: "React.FC<$A>"
any: "$A"
transform: "function $A()"
```

----------------------------------------

TITLE: Code Modification in PyO3/NAPI
DESCRIPTION: Enables advanced code modification features like Fix Related Features and Modify Edit Range in PyO3/NAPI. This enhances refactoring and code transformation capabilities within Python and JavaScript.

SOURCE: https://ast-grep.github.io/blog/stars-8000

LANGUAGE: typescript
CODE:
```
import { sg } from "@ast-grep/napi";

const source = "let a = 1;";
const root = sg.parse(source);

root.modify({
  pattern: "let $A = $B",
  replacement: "const $A = $B",
});

console.log(root.print()); // Output: "const a = 1;"
```

LANGUAGE: python
CODE:
```
from ast_grep_py import SgRoot

source = "let a = 1;"
root = SgRoot.new_from_text(source)

root.modify_with_rule(rule={'pattern': 'let $A = $B', 'replacement': 'const $A = $B'})

print(root.print())
# Output: "const a = 1;"
```

----------------------------------------

TITLE: ast-grep Rule: Namespace Imports
DESCRIPTION: This rule identifies namespace imports in JavaScript, such as 'import * as ns from 'mod''. It captures the namespace alias and the module source.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
# NAMESPACE IMPORTS
# ------------------------------------------------------------
# import * as ns from 'mod'
# ------------------------------------------------------------
- all:
    - kind: import_statement
    - has:
        kind: import_clause
        has:
          kind: namespace_import
          has:
            # namespace_import's child identifier is the alias
            kind: identifier
            pattern: $NAMESPACE_ALIAS
    - has:
        field: source
        pattern: $SOURCE
```

----------------------------------------

TITLE: Match node text with regex
DESCRIPTION: This rule matches the text content of an AST node against a provided Rust regular expression.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
regex: ^regex.+$
```

----------------------------------------

TITLE: Python Type Hint Transformation Diff
DESCRIPTION: This Python diff shows the result of applying recursive rewrite types to a Python type hint. It illustrates the transformation from `Optional[Union[...]]` to a more modern `... | None` syntax.

SOURCE: https://ast-grep.github.io/catalog/python/recursive-rewrite-type

LANGUAGE: python
CODE:
```
results:  Optional[Union[List[Union[str, dict]], str]] 
results:  List[str | dict] | str | None

```

----------------------------------------

TITLE: Match a node by its position among siblings (formula)
DESCRIPTION: The `nthChild` rule supports an `An+B` style string to match nodes based on a formulaic position within their sibling list. This allows for matching patterns like every other element.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yaml
CODE:
```
nthChild: 2n+1
```

----------------------------------------

TITLE: TypeScript Match Object Definition
DESCRIPTION: The TypeScript interface definition for the match object returned by ast-grep. It outlines the structure and types of data included in each match.

SOURCE: https://ast-grep.github.io/guide/tools/json

LANGUAGE: typescript
CODE:
```
interface Match {
  text: string
  range: Range
  file: string // relative path to the file
  // the surrounding lines of the match.
  // It can be more than one line if the match spans multiple ones.
  lines: string
  // optional replacement if the match has a replacement
  replacement?: string
  replacementOffsets?: ByteOffset
  metaVariables?: MetaVariables // optional metavars generated in the match
}

interface Range {
  byteOffset: ByteOffset
  start: Position
  end: Position
}
// UTF-8 encoded byte offset
interface ByteOffset {
  start: number // start is inclusive
  end: number   // end is exclusive
}
interface Position {
  line: number   // zero-based line number
  column: number // zero-based column number
}

// See Pattern doc
interface MetaVariables {
  single: Record<String, MetaVar>
  multi: Record<String, MetaVar[]>
  transformed: Record<String, String> // See Rewrite doc
}
interface MetaVar {
  text: string
  range: Range
}
```

----------------------------------------

TITLE: Identify Pytest Context and Fixture Arguments
DESCRIPTION: Builds upon previous utilities to define rules for identifying if a code node is within a pytest context (either a test or fixture function) and if it represents an argument to such a function. This enables targeted refactoring of pytest-related code.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: yaml
CODE:
```
utils:
  is-pytest-context:
    # Pytest context is a node inside a pytest
    # test/fixture
    inside:
      stopBy: end
      any:
        - matches: is-fixture-function
        - matches: is-test-function
  is-fixture-arg:
    # Fixture arguments are identifiers inside the 
    # parameters of a test/fixture function
    all:
      - kind: identifier
      - inside:
          kind: parameters
      - matches: is-pytest-context

```

----------------------------------------

TITLE: TypeScript Side-effect and Type Imports
DESCRIPTION: Demonstrates importing modules solely for their side effects and importing types for type checking.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: TypeScript
CODE:
```
// Side-effect import
import '@fastify/static';

// Type import
import {type hello1243 as testing} from 'hello';
```

----------------------------------------

TITLE: Find Default Imports in TypeScript
DESCRIPTION: This rule targets default imports in TypeScript (e.g., `import DEFAULT_NAME from 'SOURCE'`). It captures the default import's name and the source module.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: find-all-imports-and-identifiers
language: TypeScript
rule:
  any:
    - all:
        - kind: import_statement
        - has:
            kind: import_clause
            has:
              kind: identifier
              pattern: $DEFAULT_NAME
        - has:
            field: source
            pattern: $SOURCE
```

----------------------------------------

TITLE: Detect problematic JSON tags with dash prefix
DESCRIPTION: This rule flags JSON tags that incorrectly use a dash prefix in Go. It enforces constraints on tag naming conventions.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Go
CODE:
```
kind: "struct"
pattern: "json:\"-$A\""
inside: "$A"
constraints: "$A"
```

----------------------------------------

TITLE: ast-grep scan: No Ignore Option
DESCRIPTION: Disables respect for hidden file system entries or ignore files like `.gitignore`. This option can be used multiple times with different values (`hidden`, `dot`, `exclude`, `global`, `parent`, `vcs`) to control which ignore mechanisms are bypassed.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: shell
CODE:
```
ast-grep scan --no-ignore <FILE_TYPE>
```

----------------------------------------

TITLE: Identify Duplicated Exports in Rust
DESCRIPTION: This rule identifies instances where a Rust item is exported multiple times, increasing the API surface. It looks for `pub use` statements that re-export items from modules, specifically targeting cases where the same item might be accessible through different paths. The rule aims to enforce a cleaner API by ensuring each item is exported only once.

SOURCE: https://ast-grep.github.io/catalog/rust/avoid-duplicated-exports

LANGUAGE: rust
CODE:
```
pub mod foo;
pub use foo::Foo;

```

LANGUAGE: rust
CODE:
```
pub mod foo;
pub use foo::Foo;
pub use foo::A::B;


pub use aaa::A;
pub use woo::Woo;

```

----------------------------------------

TITLE: TypeScript String Literal Variations in Imports
DESCRIPTION: Shows the use of both double and single quotes for module paths in import statements.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: TypeScript
CODE:
```
// String literal variations
import { test1 } from "./double-quoted";
import { test2 } from './single-quoted';
```

----------------------------------------

TITLE: Configure CSS Injection in JavaScript
DESCRIPTION: This configuration allows ast-grep to identify and parse CSS code embedded within JavaScript files, specifically targeting styled-components syntax. It requires defining the host language, a rule to match the pattern, and the injected language.

SOURCE: https://ast-grep.github.io/advanced/language-injection

LANGUAGE: yaml
CODE:
```
languageInjections:
- hostLanguage: js
  rule:
    pattern: styled.$TAG`$CONTENT`
  injected: css
```

----------------------------------------

TITLE: Python: Rewrite Optional[Type] to Type | None Rule
DESCRIPTION: Defines an ast-grep rule in YAML format to automatically rewrite Python type hints from `Optional[Type]` to `Type | None`. This adheres to PEP 604 for Python 3.10+.

SOURCE: https://ast-grep.github.io/catalog/python/optional-to-none-union

LANGUAGE: yaml
CODE:
```
id: optional-to-none-union
language: python
rule:
  pattern:
    context: 'a: Optional[$T]'
    selector: generic_type
fix: $T | None
```

----------------------------------------

TITLE: Match node by 1-based index among siblings
DESCRIPTION: This rule identifies a node by its 1-based index among its named siblings.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
nthChild: 1
```

----------------------------------------

TITLE: Match Identifier Child of Call Expression using ESQuery style kind
DESCRIPTION: This YAML rule demonstrates the experimental ESQuery style `kind` selector. It matches an `identifier` node that is a direct child (`>`) of a `call_expression` node, showcasing advanced AST node selection.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: yaml
CODE:
```
rule:
  kind: call_expression > identifier
```

----------------------------------------

TITLE: Match Function Call in C
DESCRIPTION: This rule identifies function calls within C code, using a pattern to match the function name and its arguments.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: C
CODE:
```
kind: "call"
pattern: "$A($B)"
```

----------------------------------------

TITLE: Match await inside a for-in loop (ast-grep YAML)
DESCRIPTION: This rule demonstrates how to find an 'await' expression specifically within a 'for-in' loop using the 'inside' relational rule. It specifies that the target 'await' pattern must be contained within a node of kind 'for_in_statement', and the search for the surrounding node stops at the end of its scope.

SOURCE: https://ast-grep.github.io/guide/rule-config/relational-rule

LANGUAGE: yaml
CODE:
```
rule:
  pattern: await $PROMISE
  inside:
    kind: for_in_statement
    stopBy: end
```

----------------------------------------

TITLE: Find Missing Component Decorator (TypeScript)
DESCRIPTION: This rule identifies Angular lifecycle methods used within a class that lacks the `@Component()` decorator. It helps ensure that Angular components are correctly configured. The rule uses custom labels to highlight the missing decorator and the lifecycle method.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: missing-component-decorator
message: You're using an Angular lifecycle method, but missing an Angular @Component() decorator.
language: TypeScript
severity: warning
rule:
  pattern:
    context: 'class Hi { $METHOD() { $$$_} }'
    selector: method_definition
  inside:
    pattern: 'class $KLASS $$$_ { $$$_ }'
    stopBy: end
    not:
      has:
        pattern: '@Component($$$_)'
constraints:
  METHOD:
    regex: ngOnInit|ngOnDestroy
labels:
  KLASS:
    style: primary
    message: "This class is missing the decorator."
  METHOD:
    style: secondary
    message: "This is an Angular lifecycle method."
metadata:
  contributedBy: samwightt
```

LANGUAGE: typescript
CODE:
```
class NotComponent {
    ngOnInit() {}
}

@Component()
class Klass {
    ngOnInit() {}
}
```

----------------------------------------

TITLE: Define RefineNode Utility Type in TypeScript
DESCRIPTION: Introduces the `RefineNode` utility type, which handles AST node type refinement. It checks if the kind `K` includes `string`; if so, it returns a general `SgNode`. Otherwise, it distributes over the union of `K` to return specific `SgNode` types, leveraging TypeScript's distributive conditional types.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
type RefineNode<M, K> = string extends K ? SgNode<M, K> : // one SgNode
  K extends keyof M ? SgNode<M, K> : never  // distribute over union
```

----------------------------------------

TITLE: Apply Rewriter to dict Function Call Arguments
DESCRIPTION: This YAML snippet shows how to apply the `dict-rewrite` rewriter to all arguments (`$$$ARGS`) of a `dict` function call. The transformed arguments are stored in a new metavariable `LITERAL`.

SOURCE: https://ast-grep.github.io/guide/rewrite/rewriter

LANGUAGE: yaml
CODE:
```
rule:
  pattern: dict($$$ARGS)        # match dict function call, capture $$$ARGS
transform:
  LITERAL:                      # the transformed code
    rewrite:
      rewriters: [dict-rewrite] # specify the rewriter defined above
      source: $$$ARGS           # apply rewriters to $$$ARGS arguments
```

----------------------------------------

TITLE: Find C++ Struct Inheritance Pattern
DESCRIPTION: This snippet demonstrates the correct ast-grep pattern for finding C++ struct inheritance. It uses a placeholder `$SOMETHING` for the struct name, `$INHERITS` for the inherited class, and `$$$BODY` for the struct's content.

SOURCE: https://ast-grep.github.io/catalog/cpp/find-struct-inheritance

LANGUAGE: shell
CODE:
```
ast-grep --lang cpp --pattern '
struct $SOMETHING: $INHERITS { $$$BODY; }'
```

LANGUAGE: cpp
CODE:
```
struct Bar: Baz {
  int a, b;
}
```

----------------------------------------

TITLE: ResolveType Utility for Type Aliases in TypeScript
DESCRIPTION: Presents the ResolveType utility type in TypeScript, designed to recursively resolve Tree-sitter's type aliases to their concrete node kinds, ensuring accurate mapping for ast-grep rules.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
type ResolveType<M, T extends keyof M> =
  M[T] extends {subtypes: infer S extends {type: string}[] }
    ? ResolveType<M, S[number]['type']>
    : T
```

----------------------------------------

TITLE: Match String Key in JavaScript Object Pair using 'field' and 'inside'
DESCRIPTION: This YAML rule uses ast-grep's 'field' and 'inside' properties to precisely match a 'string' node that is the 'key' within a 'pair' node, common in JavaScript objects.

SOURCE: https://ast-grep.github.io/advanced/core-concepts

LANGUAGE: yaml
CODE:
```
rule:
  kind: string
  inside:
    field: key
    kind: pair
```

----------------------------------------

TITLE: Vim Regex for indoc! macro removal
DESCRIPTION: This Vim regex is used to find and replace Rust raw string literals, potentially enclosed by the `indoc!` macro. It captures the content of the raw string and rewrites it enclosed in backticks.

SOURCE: https://ast-grep.github.io/catalog/rust/rewrite-indoc-macro

LANGUAGE: vim
CODE:
```
%s/\v(indoc!|)(| )([|\{)r#"(([^#]+|\n+)+)"#/`\4`/
```

----------------------------------------

TITLE: TypeScript @Input() Optionality Fixes in ast-grep
DESCRIPTION: Demonstrates two distinct interactive fixes for optional @Input() properties in Angular TypeScript using ast-grep. The first adds 'undefined' to the type, and the second makes the input required.

SOURCE: https://ast-grep.github.io/blog/interactive-demo

LANGUAGE: TypeScript
CODE:
```
test: string;
// Fix 1: Add `undefined` to Type
test: string | undefined;

// Fix 2: Make Input Required
@Input({ required: true })
test: string;
```

----------------------------------------

TITLE: Semgrep: Match Nested Expressions with Deep Expression Operator
DESCRIPTION: This Semgrep pattern utilizes the deep expression operator `<...>` to match expressions that might be deeply nested within other expressions. It's used here to find nested if statements containing a specific condition.

SOURCE: https://ast-grep.github.io/blog/code-search-design-space

LANGUAGE: YAML
CODE:
```
# Use the deep expression operator <... [your_pattern] ...>
# to match an expression that
# could be deeply nested within another expression
pattern: |
  if <... $USER.is_admin() ...>:
    ...
```

----------------------------------------

TITLE: Find Import Usage Rule in YAML
DESCRIPTION: This YAML configuration defines an ast-grep rule to find the usage of an imported module. It specifies the identifier pattern and the conditions for its import statement.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-usage

LANGUAGE: yaml
CODE:
```
id: find-import-usage
language: typescript
rule:
  kind: identifier # ast-grep requires a kind
  pattern: $MOD   # the identifier to find
  inside: # find the root
    stopBy: end
    kind: program
    has: # and has the import statement
      kind: import_statement
      has: # look for the matching identifier
        stopBy: end
        kind: import_specifier
        pattern: $MOD # same pattern as the usage is enforced here
```

----------------------------------------

TITLE: Match node satisfying any sub-rule
DESCRIPTION: Checks if a target node satisfies at least one of the rules provided in the list.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
any:
  - pattern: let $X = $Y
  - pattern: const $X = $Y
```

----------------------------------------

TITLE: Exhaustive Pattern Matching with 'kindToRefine'
DESCRIPTION: Utilize the 'kindToRefine' property for exhaustive pattern matching with union types. This enables TypeScript's type narrowing, ensuring all cases are handled and catching potential errors at compile time.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
const func: SgNode<'function_declaration'> | SgNode<'arrow_function'>

switch (func.kindToRefine) {
  case 'function_declaration':
    func.kindToRefine // Narrowed to function_declaration
    break
  case 'arrow_function':
    func.kindToRefine // Narrowed to arrow_function
    break
  default:
    func satisfies never // TypeScript ensures we handled all cases
}
```

----------------------------------------

TITLE: Match Nth Child with Reverse and Rule Filter in YAML
DESCRIPTION: This YAML configuration demonstrates an object-style `nthChild` rule. It matches the second-to-last (`2n+1`, `reverse: true`) node that is also a `function_declaration`, showcasing advanced filtering capabilities.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: yaml
CODE:
```
# object style nthChild rule
nthChild:
  # accepts number or An+B style string
  position: 2n+1
  # optional, count index from the end of sibling list
  reverse: true # default is false
  # optional, filter the sibling node list based on rule
  ofRule:
    kind: function_declaration # accepts ast-grep rule
```

----------------------------------------

TITLE: Match JSON Key-Value Pairs with Complete Snippets
DESCRIPTION: Addresses the issue of matching incomplete JSON code snippets like `"a": 123` in ast-grep. It explains that such snippets are not valid JSON without enclosing curly braces and thus cannot be parsed. The solution involves using a pattern object with a `context` field containing a complete JSON object.

SOURCE: https://ast-grep.github.io/advanced/pattern-parse

LANGUAGE: json
CODE:
```
"a": 123
```

LANGUAGE: yaml
CODE:
```
pattern:
  context: '{ "a": 123 }'
  selector: pair
```

----------------------------------------

TITLE: ast-grep: Refactor string iteration from chars().enumerate() to char_indices()
DESCRIPTION: Provides an ast-grep command to automatically refactor Rust code. It searches for patterns using `$A.chars().enumerate()` and replaces them with `$A.char_indices()`, ensuring correct byte offset handling during string iteration.

SOURCE: https://ast-grep.github.io/catalog/rust/boshen-footgun

LANGUAGE: shell
CODE:
```
ast-grep -p '$A.chars().enumerate()' \
   -r '$A.char_indices()' \
   -l rs
```

----------------------------------------

TITLE: ast-grep Rule: Dynamic Imports (Destructured Alias Assignment)
DESCRIPTION: This rule identifies dynamic imports where a module is imported and its exports are destructured with aliasing. It captures the original identifier, the alias, and the module source. It handles both direct and awaited calls to 'require' or 'import'.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: yaml
CODE:
```
- all:
    # 1. Target the pair_pattern for aliased destructuring
    - kind: pair_pattern
    # 2. Capture the original identifier (key)
    - has:
        field: key
        kind: property_identifier # Could be string/number literal too, but property_identifier is common
        pattern: $ORIGINAL
    # 3. Capture the alias identifier (value)
    - has:
        field: value
        kind: identifier
        pattern: $ALIAS
    # 4. Ensure it's inside an object_pattern that is the name of a variable_declarator
    - inside:
        kind: object_pattern
        inside: # Check the variable_declarator it belongs to
          kind: variable_declarator
          # 5. Check the value assigned by the variable_declarator
          has:
            field: value
            any:
              # Direct call
              - all:
                  - kind: call_expression
                  - has: { field: function, regex: '^(require|import)$' }
                  - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source
              # Awaited call
              - kind: await_expression
                has:
                  all:
                    - kind: call_expression
                    - has: { field: function, regex: '^(require|import)$' }
                    - has: { field: arguments, has: { kind: string, pattern: $SOURCE } } # Capture source
          stopBy: end # Search ancestors to find the correct variable_declarator
    stopBy: end # Ensure we check ancestors for the variable_declarator
```

----------------------------------------

TITLE: Find Dynamic Imports (require/import) in TypeScript
DESCRIPTION: This rule identifies dynamic imports using `require` or `import` in TypeScript, capturing the variable name and the source module for both direct and awaited calls.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: yaml
CODE:
```
id: find-all-imports-and-identifiers
language: TypeScript
rule:
  any:
    - all:
        - kind: variable_declarator
        - has:
            field: name
            kind: identifier
            pattern: $VAR_NAME
        - has:
            field: value
            any:
              - all:
                  - kind: call_expression
                  - has: { field: function, regex: '^(require|import)$' }
                  - has: { field: arguments, has: { kind: string, pattern: $SOURCE } }
              - kind: await_expression
                has:
                  all:
                    - kind: call_expression
                    - has: { field: function, regex: '^(require|import)$' }
                    - has: { field: arguments, has: { kind: string, pattern: $SOURCE } }
```

----------------------------------------

TITLE: Prefer Symbol over Proc
DESCRIPTION: This rule promotes the use of Symbols over Procs in Ruby for certain programming patterns, enforcing constraints for better practice.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Ruby
CODE:
```
kind: "method_call"
pattern: "proc { $A }"
constraints: "$A"
```

----------------------------------------

TITLE: Rewrite && Short-Circuit in JSX to Ternary (TSX)
DESCRIPTION: Finds and fixes the anti-pattern of using the && operator for conditional rendering in JSX when the left side is a number, which React renders as 0. Rewrites the pattern to a ternary operator for correct conditional rendering.

SOURCE: https://ast-grep.github.io/catalog/tsx

LANGUAGE: yaml
CODE:
```
id: do-what-brooooooklyn-said
language: Tsx
rule:
  kind: jsx_expression
  has:
    pattern: $A && $B
  not:
    inside:
      kind: jsx_attribute
fix: "{$A ? $B : null}"
```

LANGUAGE: tsx
CODE:
```
<div>{ list.length && list.map(i => <p/>) }</div>
```

LANGUAGE: tsx
CODE:
```
<div>{ list.length && list.map(i => <p/>) }</div> 
<div>{ list.length ?  list.map(i => <p/>) : null }</div> 
```

----------------------------------------

TITLE: Match JavaScript Class Property Declaration
DESCRIPTION: This JavaScript code snippet demonstrates a class property declaration (`a = 123`). It is matched by the `field_definition` kind rule in ast-grep, highlighting how `kind` helps differentiate between variable assignments and property declarations.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: javascript
CODE:
```
class Test {
  a = 123 // match this line
}
```

----------------------------------------

TITLE: Rewrite MobX Component Style (JavaScript)
DESCRIPTION: Demonstrates the incorrect and correct way to define a MobX observer component in React to satisfy ESLint's hook checking. The corrected version separates the component logic into a base function before applying the observer.

SOURCE: https://ast-grep.github.io/catalog/tsx/rewrite-mobx-component

LANGUAGE: javascript
CODE:
```
export const Example = observer(() => {
  return <div>Hello World</div>
})
```

LANGUAGE: javascript
CODE:
```
const BaseExample = () => {
  return <div>Hello World</div>
}
export const Example = observer(BaseExample)
```

----------------------------------------

TITLE: Fix Format String Vulnerability in Cpp
DESCRIPTION: This rule identifies and fixes format string vulnerabilities in Cpp code, specifically in functions like sprintf and fprintf. It ensures that user-controlled data is treated as a string by explicitly specifying the format string as '%s', preventing arbitrary code execution.

SOURCE: https://ast-grep.github.io/catalog/cpp

LANGUAGE: yaml
CODE:
```
id: fix-format-security-error
language: Cpp
rule:
  pattern: $PRINTF($S, $VAR)
constraints:
  PRINTF: # a format string function
    { regex: "^sprintf|fprintf$" }
  VAR: # not a literal string
    not:
      any:
      - { kind: string_literal }
      - { kind: concatenated_string }
fix: $PRINTF($S, "%s", $VAR)
```

LANGUAGE: cpp
CODE:
```
// Error
fprintf(stderr, out);
sprintf(&buffer[2], obj->Text);
sprintf(buf1, Text_String(TXT_WAITING_FOR_CONNECTIONS));
// OK
fprintf(stderr, "%s", out);
sprintf(&buffer[2], "%s", obj->Text);
sprintf(buf1, "%s", Text_String(TXT_WAITING_FOR_CONNECTIONS));
```

LANGUAGE: js
CODE:
```
// Error
fprintf(stderr, out);
fprintf(stderr, "%s", out);
sprintf(&buffer[2], obj->Text);
sprintf(&buffer[2], "%s", obj->Text);
sprintf(buf1, Text_String(TXT_WAITING_FOR_CONNECTIONS));
sprintf(buf1, "%s", Text_String(TXT_WAITING_FOR_CONNECTIONS));
// OK
fprintf(stderr, "%s", out);
sprintf(&buffer[2], "%s", obj->Text);
sprintf(buf1, "%s", Text_String(TXT_WAITING_FOR_CONNECTIONS));
```

----------------------------------------

TITLE: Control ast-grep Output Color
DESCRIPTION: This flag manages when ast-grep uses color output. The 'auto' setting (default) enables colors when outputting to a terminal but suppresses them for piped or redirected output. 'always' forces color emission, while 'ansi' specifically uses ANSI color codes. 'never' disables all color output.

SOURCE: https://ast-grep.github.io/reference/cli/run

LANGUAGE: bash
CODE:
```
--color <WHEN>
```

----------------------------------------

TITLE: Find Import Identifiers in YAML
DESCRIPTION: This snippet shows how to define rules in YAML for finding import identifiers with ast-grep. It supports various import syntaxes.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: yaml
CODE:
```
language: typescript
rule:
  pattern: | 
    import $IDENTIFIER from $SOURCE
    import { $IDENTIFIER } from $SOURCE
    import $IDENTIFIER = require($SOURCE)
    import($SOURCE)
    require($SOURCE)
    import * as $IDENTIFIER from $SOURCE
    import { $IDENTIFIER as $ALIAS } from $SOURCE
```

----------------------------------------

TITLE: Rewrite Check to Yoda Condition
DESCRIPTION: This rule rewrites conditional statements to use the Yoda Condition style (e.g., `constant == variable` instead of `variable == constant`) in C, applying transformations and constraints.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: C
CODE:
```
kind: "if_statement"
pattern: "if ($A == $B)"
inside: "$A"
constraints: "$A"
transform: "if ($B == $A)"
```

----------------------------------------

TITLE: YAML Rule for Finding Imports without Extension
DESCRIPTION: This YAML configuration defines a rule for ast-grep to find import statements in JavaScript code that are missing file extensions. It uses a regex to match string fragments within import statements or function calls named 'import'.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-file-without-extension

LANGUAGE: yaml
CODE:
```
id: find-import-file
language: js
rule:
  regex: "/[^.]+[^/]$"
  kind: string_fragment
  any:
    - inside:
        stopBy: end
        kind: import_statement
    - inside:
        stopBy: end
        kind: call_expression
        has:
          field: function
          regex: "^import$"
```

----------------------------------------

TITLE: Find usage of imported modules
DESCRIPTION: This TypeScript rule helps locate where a specific imported module is used within a codebase. It identifies the module's import statement and then searches for its identifier usage throughout the program.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: find-import-usage
language: typescript
rule:
  kind: identifier # ast-grep requires a kind
  pattern: $MOD   # the identifier to find
  inside: # find the root
    stopBy: end
    kind: program
    has: # and has the import statement
      kind: import_statement
      has: # look for the matching identifier
        stopBy: end
        kind: import_specifier
        pattern: $MOD # same pattern as the usage is enforced here

```

LANGUAGE: typescript
CODE:
```
import { MongoClient } from 'mongodb';
const url = 'mongodb://localhost:27017';
async function run() {
  const client = new MongoClient(url);
}

```

----------------------------------------

TITLE: Define Named and Unnamed Nodes in JavaScript Grammar
DESCRIPTION: This snippet demonstrates how to define named and unnamed nodes within a JavaScript grammar using Tree-sitter's rule format. Named nodes like 'identifier' are defined with regular names, while unnamed nodes like the '+' operator are defined with literal strings.

SOURCE: https://ast-grep.github.io/advanced/core-concepts

LANGUAGE: javascript
CODE:
```
rules: {
  // named nodes are defined with the format `kind: parseRule`
  identifier: $ => /[a-z]+/,
  // binary_expression is also a named node,
  // the `+` operator is defined with a string literal, so it is an unnamed node
  binary_expression: $ => seq($.identifier, '+', $.identifier) // ↑ unnamed node
}
```

----------------------------------------

TITLE: Rewrite Optional[Type] to Type | None in Python
DESCRIPTION: Implements a refactoring rule using ast-grep to convert Python type hints from the `Optional[Type]` syntax to the more modern `Type | None` syntax, as recommended by PEP 604 for Python 3.10 and later. This rule handles cases where `Optional` is used as a generic type.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: python
CODE:
```
id: optional-to-none-union
language: python
rule:
  pattern:
    context: 'a: Optional[$T]'
    selector: generic_type
fix: $T | None

```

----------------------------------------

TITLE: Target node has child matching sub-rule
DESCRIPTION: Verifies that the target node contains a child or descendant node that matches the provided sub-rule.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
has:
  kind: method_definition
```

----------------------------------------

TITLE: Find Import Identifiers in TypeScript
DESCRIPTION: This snippet demonstrates how to find import identifiers in TypeScript code using ast-grep. It covers various import styles such as alias, default, dynamic, and namespace imports.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: typescript
CODE:
```
import { hello as world } from './file'
import test from './my-test'
require(...)
import(...)
import * as myCode from './code'
```

----------------------------------------

TITLE: Avoid `&&` short circuit in JSX
DESCRIPTION: This rule helps avoid the use of `&&` for short-circuiting in JSX, which can sometimes lead to unexpected behavior or readability issues. It is primarily applicable to TSX code.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TSX
CODE:
```
kind: "jsx"
pattern: "$A && $B"
```

----------------------------------------

TITLE: Avoid Duplicated Exports
DESCRIPTION: This rule identifies and helps to avoid duplicated exports in Rust code. It checks for patterns where the same item might be exported multiple times.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Rust
CODE:
```
kind: "all"
pattern: "export $A"
inside: "$A"
has: "$A"
```

----------------------------------------

TITLE: TSX: Diff Showing Memoization Removal
DESCRIPTION: This TypeScript diff highlights the changes made by a tool that removes memoization from a React component. It shows `useCallback` being replaced by a direct function assignment and `useMemo` being replaced by an IIFE, effectively removing the memoization.

SOURCE: https://ast-grep.github.io/catalog/tsx

LANGUAGE: tsx
CODE:
```
const Component = () => {
  const [count, setCount] = useState(0)
  const increment = useCallback(() => {
    setCount((prevCount) => prevCount + 1)
  }, [])
  const increment = () => { 
    setCount((prevCount) => prevCount + 1)
  } 
  const expensiveCalculation = useMemo(() => {
    // mock Expensive calculation
    return count * 2
  }, [count])
  const expensiveCalculation = (() => {
    // mock Expensive calculation
    return count * 2
  })()
  return (
    <>
      <p>Expensive Result: {expensiveCalculation}</p>
      <button onClick={increment}>{count}</button>
    </>
  )
}
```

----------------------------------------

TITLE: Find Alias Imports in TypeScript
DESCRIPTION: This rule identifies named imports in TypeScript that use an alias (e.g., `import { ORIGINAL as ALIAS } from 'SOURCE'`). It captures the original identifier, the alias, and the source module.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: find-all-imports-and-identifiers
language: TypeScript
rule:
  any:
    - all:
        - kind: import_specifier
        - has:
            field: alias
            pattern: $ALIAS
        - has:
            field: name
            pattern: $ORIGINAL
        - inside:
            stopBy: end
            kind: import_statement
            has:
              field: source
              pattern: $SOURCE
```

----------------------------------------

TITLE: Find Import Identifiers
DESCRIPTION: This rule helps find import identifiers in TypeScript code, checking for various conditions and patterns related to imports.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TypeScript
CODE:
```
kind: "import"
pattern: "import {$A} from '$B'"
all: "$A"
has: "$A"
inside: "$A"
+2
```

----------------------------------------

TITLE: Extract Effective AST Node (Number Literal)
DESCRIPTION: Demonstrates how ast-grep extracts the innermost leaf node for a simple number literal, which is considered the effective AST node for pattern matching.

SOURCE: https://ast-grep.github.io/advanced/pattern-parse

LANGUAGE: yaml
CODE:
```
program
  expression_statement
    number              <--- effective node
```

----------------------------------------

TITLE: No `console` except in `catch` block
DESCRIPTION: This rule enforces a policy of not using `console.log` or similar statements outside of `catch` blocks in TypeScript. It includes constraints and fixes for compliance.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TypeScript
CODE:
```
kind: "call"
pattern: "console.$A($B)"
constraints: "$A"
fix: "console.$A($B)"
+1
```

----------------------------------------

TITLE: Rust: Refactored iteration using char_indices()
DESCRIPTION: Shows the refactored version of the Rust string iteration loop, replacing `chars().enumerate()` with `char_indices()`. This change ensures that the index `i` correctly represents the byte offset of each character within the UTF-8 encoded string, resolving potential pitfalls.

SOURCE: https://ast-grep.github.io/catalog/rust/boshen-footgun

LANGUAGE: rs
CODE:
```
for (i, char) in source.char_indices() {
    println!("Boshen is angry :)");
}
```

----------------------------------------

TITLE: ast-grep Rule: Namespace Imports
DESCRIPTION: This rule identifies namespace imports in JavaScript, such as 'import * as ns from 'mod''. It captures the namespace alias and the module source.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: yaml
CODE:
```
# NAMESPACE IMPORTS
# ------------------------------------------------------------
# import * as ns from 'mod'
# ------------------------------------------------------------
- all:
    - kind: import_statement
    - has:
        kind: import_clause
        has:
          kind: namespace_import
          has:
            # namespace_import's child identifier is the alias
            kind: identifier
            pattern: $NAMESPACE_ALIAS
    - has:
        field: source
        pattern: $SOURCE
```

----------------------------------------

TITLE: ast-grep Rules for Removing React Memoization (TSX)
DESCRIPTION: These YAML rules are designed for ast-grep to identify and rewrite React memoization patterns. They target `useCallback`, `memo`, and `useMemo`, replacing them with the underlying function or expression.

SOURCE: https://ast-grep.github.io/catalog/tsx/reverse-react-compiler

LANGUAGE: yaml
CODE:
```
id: rewrite-cache
language: tsx
rule:
  any:
  - pattern: useCallback($FN, $$$)
  - pattern: memo($FN, $$$)
fix: $FN
---
id: rewrite-use-memo
language: tsx
rule: { pattern: 'useMemo($FN, $$$)' }
fix: ($FN)()   # need IIFE to wrap memo function
```

----------------------------------------

TITLE: Match a node by its kind
DESCRIPTION: The `kind` rule matches an AST node based on its type name. You can find available kind names in the ast-grep playground. It also supports limited ESQuery syntax for more specific kind matching.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yml
CODE:
```
kind: call_expression
```

LANGUAGE: yml
CODE:
```
kind: call_expression > identifier
```

----------------------------------------

TITLE: Find Destructured Dynamic Imports in TypeScript
DESCRIPTION: This rule finds dynamic imports in TypeScript where the source is destructured from a `require` or `import` call (e.g., `const { ORIGINAL } = require('SOURCE')`). It captures the destructured identifier and the source module.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: yaml
CODE:
```
id: find-all-imports-and-identifiers
language: TypeScript
rule:
  any:
    - all:
        - kind: shorthand_property_identifier_pattern
        - pattern: $ORIGINAL
        - inside:
            kind: object_pattern
            inside:
              kind: variable_declarator
              has:
                field: value
                any:
                  - all:
                      - kind: call_expression
                      - has: { field: function, regex: '^(require|import)$' }
                      - has: { field: arguments, has: { kind: string, pattern: $SOURCE } }
                  - kind: await_expression
                    has:
                      all:
                        - kind: call_expression
                        - has: { field: function, regex: '^(require|import)$' }
                        - has: { field: arguments, has: { kind: string, pattern: $SOURCE } }
```

----------------------------------------

TITLE: Find Regular Imports in TypeScript
DESCRIPTION: This rule finds standard named imports in TypeScript (e.g., `import { ORIGINAL } from 'SOURCE'`). It captures the imported identifier and the source module.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: yaml
CODE:
```
id: find-all-imports-and-identifiers
language: TypeScript
rule:
  any:
    - all:
        - kind: import_specifier
        - has:
            field: name
            pattern: $ORIGINAL
        - inside:
            stopBy: end
            kind: import_statement
            has:
              field: source
              pattern: $SOURCE
```

----------------------------------------

TITLE: Find Import Usage
DESCRIPTION: This rule locates the usage of imported identifiers within TypeScript code. It analyzes patterns and contexts of import usage.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TypeScript
CODE:
```
kind: "variable"
pattern: "$A"
inside: "$A"
```

----------------------------------------

TITLE: Rename Pytest Fixture and References (YAML)
DESCRIPTION: This YAML rule uses ast-grep to rename a pytest fixture named 'foo' to 'five' and updates all its references. It leverages the `is-fixture-context` utility to ensure the renaming is specific to fixtures and their usages.

SOURCE: https://ast-grep.github.io/catalog/python/refactor-pytest-fixtures

LANGUAGE: yaml
CODE:
```
rule:
  kind: identifier
  matches: is-fixture-context
  regex: ^foo$
fix: 'five'

```

----------------------------------------

TITLE: Add Type Hint to Pytest Fixture Argument
DESCRIPTION: A specific ast-grep rule designed to add a type hint (e.g., ': int') to a pytest fixture argument. It targets identifier nodes that are arguments within a pytest context and match a specific name (e.g., 'foo').

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: yaml
CODE:
```
rule:
  matches: is-fixture-arg
  regex: ^foo$
fix: 'foo: int'

```

----------------------------------------

TITLE: Suppress ast-grep Errors and Warnings
DESCRIPTION: Users can now suppress specific ast-grep errors or warnings using the `ast-grep-ignore` code comment. This feature also respects suppression comments within the Language Server Protocol (LSP) for better error management.

SOURCE: https://ast-grep.github.io/blog/stars-6000

LANGUAGE: bash
CODE:
```
ast-grep-ignore
```

----------------------------------------

TITLE: Vim Regex for indoc! Macro Removal
DESCRIPTION: This Vimscript snippet provides a regular expression for substituting 'indoc!' macro declarations in Vim. It aims to extract the content within Rust raw strings and wrap it in backticks.

SOURCE: https://ast-grep.github.io/catalog/rust

LANGUAGE: vimscript
CODE:
```
%s/\v(indoc!|)(| )([|\{)r#"(([^#]+|\n+)+)"#/`\4`/
```

----------------------------------------

TITLE: Define Kinds and LowPriorityString Types in TypeScript
DESCRIPTION: Defines a `Kinds` type alias that resolves to the keys of a provided type `M`, combined with `LowPriorityString`. `LowPriorityString` is an alias for `string & {}`, designed to be a lenient string type that prioritizes `ResolveType` in TypeScript completions.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
type Kinds<M> = ResolveType<M, keyof M> & LowPriorityString
type LowPriorityString = string & {}
```

----------------------------------------

TITLE: Safely Convert List Comprehension to Generator Expression with Functions (Python)
DESCRIPTION: This YAML rule enhances ast-grep's capability to safely convert Python list comprehensions to generator expressions when they are passed as arguments to functions like `any`, `all`, or `sum`. This ensures memory efficiency without breaking functionality.

SOURCE: https://ast-grep.github.io/catalog/python/prefer-generator-expressions

LANGUAGE: yaml
CODE:
```
id: prefer-generator-expressions
language: python
rule:
  pattern: $FUNC($LIST)
constraints:
  LIST: { kind: list_comprehension }
  FUNC:
    any:
      - pattern: any
      - pattern: all
      - pattern: sum
      # ...
transform:
  INNER:
    substring: {source: $LIST, startChar: 1, endChar: -1 }
fix: $FUNC($INNER)
```

----------------------------------------

TITLE: YAML Rule for No Console Except Catch
DESCRIPTION: Defines an ast-grep rule in YAML format to disallow console methods, with an exception for `console.error` inside catch clauses. It targets patterns like `console.error($$$)` and `console.$METHOD($$$)` where METHOD is 'log', 'debug', or 'warn'.

SOURCE: https://ast-grep.github.io/catalog/typescript/no-console-except-catch

LANGUAGE: yaml
CODE:
```
id: no-console-except-error
language: typescript
rule:
  any:
    - pattern: console.error($$$)
      not:
        inside:
          kind: catch_clause
          stopBy: end
    - pattern: console.$METHOD($$$)
constraints:
  METHOD:
    regex: 'log|debug|warn'
```

----------------------------------------

TITLE: Rewrite Check to Yoda Condition in C
DESCRIPTION: This rule transforms C code to use Yoda conditions, placing constants on the left side of comparisons (e.g., `42 == myNumber`). This style helps prevent accidental assignment errors in conditional statements. The rule specifically targets equality comparisons within `if` statements where the right side is a number literal.

SOURCE: https://ast-grep.github.io/catalog/c

LANGUAGE: yaml
CODE:
```
id: may-the-force-be-with-you
language: c
rule:
  pattern: $A == $B                 # Find equality comparison
  inside:
    kind: parenthesized_expression
    inside: {kind: if_statement}
constraints:
  B: { kind: number_literal }       # with the constraint that
fix: $B == $A
```

LANGUAGE: c
CODE:
```
if (myNumber == 42) { /* ... */}
if (notMatch == another) { /* ... */}
if (notMatch) { /* ... */}
```

LANGUAGE: c
CODE:
```
if (myNumber == 42) { /* ... */}
if (42 == myNumber) { /* ... */}
if (notMatch == another) { /* ... */}
if (notMatch) { /* ... */}
```

----------------------------------------

TITLE: Match JavaScript Array Second Number
DESCRIPTION: This JavaScript code snippet represents an array `const arr = [ 1, 2, 3, ]`. The comment `//   |- match this number` indicates that the second element, the number `2`, is the target for matching, typically used with positional rules like `nthChild`.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: javascript
CODE:
```
const arr = [ 1, 2, 3, ]
            //   |- match this number
```

----------------------------------------

TITLE: ast-grep Rule: Dynamic Imports (Side Effect / Source Only)
DESCRIPTION: This rule targets dynamic imports used solely for their side effects, where only the module source is relevant. It matches string literals that are arguments to 'require' or 'import' calls, ensuring they are not part of a lexical declaration.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
# DYNAMIC IMPORTS (Side Effect / Source Only)
# ------------------------------------------------------------
# require('SOURCE')
# ------------------------------------------------------------
- all:
    - kind: string # Target the source string literal directly
    - pattern: $SOURCE
    - inside: # String must be the argument of require() or import()
        kind: arguments
        parent:
          kind: call_expression
          has:
            field: function
            # Match 'require' identifier or 'import' keyword used dynamically
            regex: '^(require|import)$'
        stopBy: end # Search ancestors if needed (for the arguments/call_expression)
    - not:
        inside:
          kind: lexical_declaration
          stopBy: end # Search all ancestors up to the root
```

----------------------------------------

TITLE: Match Field Definition using kind in YAML
DESCRIPTION: This rule uses the `kind` property to specifically match `field_definition` AST nodes. It's useful for targeting specific code constructs like class properties in JavaScript, ensuring accurate parsing when simple patterns might be ambiguous.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: yaml
CODE:
```
rule:
  kind: field_definition
```

----------------------------------------

TITLE: Avoid Unnecessary React Hook
DESCRIPTION: This rule identifies potentially unnecessary React Hooks in TSX code. It uses utility functions and constraints to determine if a hook is redundant.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TSX
CODE:
```
kind: "any"
pattern: "use$A($B)"
utils: "$A"
constraints: "$B"
```

----------------------------------------

TITLE: Find Unused Local Variables in Java
DESCRIPTION: This rule identifies unused local variables in Java code. It captures the variable identifier and uses a 'not precedes' pattern to ensure the identifier does not appear later in the code. This is for educational purposes, as linters are generally recommended for this task.

SOURCE: https://ast-grep.github.io/catalog/java

LANGUAGE: YAML
CODE:
```
id: no-unused-vars
rule:
    kind: local_variable_declaration
    all:
        - has:
            has:
                kind: identifier
                pattern: $IDENT
        - not:
            precedes:
                stopBy: end
                has:
                    stopBy: end
                    any:
                        - { kind: identifier, pattern: $IDENT }
                        - { has: {kind: identifier, pattern: $IDENT, stopBy: end}}
fix: ''
```

LANGUAGE: Java
CODE:
```
String unused = "unused"; 
String used = "used";
System.out.println(used);
```

----------------------------------------

TITLE: Suppress Specific Rules in a File (JavaScript)
DESCRIPTION: Demonstrates how to suppress only specific rules within a JavaScript file by using a suppression comment with the rule ID, followed by an empty line.

SOURCE: https://ast-grep.github.io/guide/project/severity

LANGUAGE: javascript
CODE:
```
// ast-grep-ignore: no-debugger

// This file will not be scanned by ast-grep
// note the empty line after the suppression comment.
debugger // this line will not trigger error
console.debug('debugging') // this line will trigger error
```

----------------------------------------

TITLE: Extract i18n Keys
DESCRIPTION: This rule is designed to extract internationalization (i18n) keys from HTML code. It helps in managing and organizing translation strings.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: HTML
CODE:
```
kind: "attribute"
pattern: "data-i18n-key='$A'"
not: "$A"
```

----------------------------------------

TITLE: Prevent await in Promise.all
DESCRIPTION: This rule identifies and helps refactor code where 'await' is used directly within Promise.all, which is often redundant. It targets TypeScript code and provides a fix to remove the unnecessary 'await'.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: no-await-in-promise-all
language: typescript
rule:
  pattern: await $A
  inside:
    pattern: Promise.all($_)
    stopBy:
      not: { any: [{kind: array}, {kind: arguments}] }
fix: $A

```

LANGUAGE: typescript
CODE:
```
const [foo, bar] = await Promise.all([
  await getFoo(),
  getBar(),
  (async () => { await getBaz()})(),
])

```

LANGUAGE: typescript
CODE:
```
const [foo, bar] = await Promise.all([
  await getFoo(), 
  getFoo(), 
  getBar(),
  (async () => { await getBaz()})(),
])

```

----------------------------------------

TITLE: TypeScript String Literal Variations in Imports
DESCRIPTION: Shows the use of both double and single quotes for module paths in import statements.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: TypeScript
CODE:
```
// String literal variations
import { test1 } from "./double-quoted";
import { test2 } from './single-quoted';
```

----------------------------------------

TITLE: Find Import File without Extension
DESCRIPTION: This rule identifies import statements in TypeScript where the file extension is omitted. It checks various kinds of imports and patterns.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TypeScript
CODE:
```
kind: "import"
pattern: "import ... from '$A'"
regex: "^[^.]*$"
```

----------------------------------------

TITLE: Find Java field declarations of type String
DESCRIPTION: This rule identifies Java field declarations where the type is `String`. It uses `kind` and `has` attributes for precise matching.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Java
CODE:
```
kind: "field"
pattern: "String $A;"
has: "$A"
```

----------------------------------------

TITLE: Match a node by its position among siblings (exact)
DESCRIPTION: The `nthChild` rule can match a node based on its exact index within its parent's children list. The index is 1-based, similar to CSS selectors.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yaml
CODE:
```
nthChild: 3
```

----------------------------------------

TITLE: Identify Pytest Context and Fixture Arguments (YAML)
DESCRIPTION: This YAML snippet defines ast-grep utility rules to determine if a code node is within a pytest context (fixture or test function) and if it represents a fixture argument. `is-pytest-context` checks if a node is inside a fixture or test function, and `is-fixture-arg` specifically targets identifiers within the parameters of such functions.

SOURCE: https://ast-grep.github.io/catalog/python/refactor-pytest-fixtures

LANGUAGE: yaml
CODE:
```
utils:
  is-pytest-context:
    # Pytest context is a node inside a pytest
    # test/fixture
    inside:
      stopBy: end
      any:
        - matches: is-fixture-function
        - matches: is-test-function
  is-fixture-arg:
    # Fixture arguments are identifiers inside the 
    # parameters of a test/fixture function
    all:
      - kind: identifier
      - inside:
          kind: parameters
      - matches: is-pytest-context

```

----------------------------------------

TITLE: Python Recursive Rewrite Type Configuration (YAML)
DESCRIPTION: This YAML configuration defines recursive rewriters for Python code. It includes rules to transform `Optional[T]` to `T | None` and `Union[T1, T2]` to `T1 | T2` by recursively applying rewriters to inner types.

SOURCE: https://ast-grep.github.io/catalog/python/recursive-rewrite-type

LANGUAGE: yaml
CODE:
```
id: recursive-rewrite-types
language: python
rewriters:
# rewrite Optional[T] to T | None
- id: optional
  rule:
    any:
    - pattern:
        context: 'arg: Optional[$TYPE]'
        selector: generic_type
    - pattern: Optional[$TYPE]
  # recursively apply rewriters to $TYPE
  transform:
    NT:
      rewrite:
        rewriters: [optional, unions]
        source: $TYPE
  # use the new variable $NT
  fix: $NT | None

# similar to Optional, rewrite Union[T1, T2] to T1 | T2
- id: unions
  language: Python
  rule:
    pattern:
      context: 'a: Union[$$$TYPES]'
      selector: generic_type
  transform:
    UNIONS:
      # rewrite all types inside $$$TYPES
      rewrite:
        rewriters: [ rewrite-unions ]
        source: $$$TYPES
        joinBy: " | "
  fix: $UNIONS
- id: rewrite-unions
  rule:
    pattern: $TYPE
    kind: type
  # recursive part
  transform:
    NT:
      rewrite:
        rewriters: [optional, unions]
        source: $TYPE
  fix: $NT

# find all types
rule:
  kind: type
  pattern: $TPE
# apply the recursive rewriters
transform:
  NEW_TYPE:
    rewrite:
      rewriters: [optional, unions]
      source: $TPE
# output
fix: $NEW_TYPE

```

----------------------------------------

TITLE: No `await` in `Promise.all` array
DESCRIPTION: This rule flags the use of `await` within the array passed to `Promise.all` in TypeScript, which is often unnecessary and can be inefficient. It suggests fixes for better performance.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TypeScript
CODE:
```
kind: "call"
pattern: "Promise.all([await $A])"
inside: "$A"
fix: "Promise.all([$A])"
```

----------------------------------------

TITLE: Customize Output Color with --color
DESCRIPTION: The `--color` flag manages when ast-grep uses color output. The default 'auto' setting enables color when outputting to a terminal and disables it when redirected. Other options include 'always', 'ansi', and 'never'.

SOURCE: https://ast-grep.github.io/reference/cli/scan

LANGUAGE: bash
CODE:
```
sg --color=auto
sg --color=always
sg --color=ansi
sg --color=never
```

----------------------------------------

TITLE: Suppress All Diagnostics in a File (JavaScript)
DESCRIPTION: Illustrates how to disable all ast-grep diagnostics for an entire JavaScript file using a specific comment at the beginning of the file, followed by an empty line.

SOURCE: https://ast-grep.github.io/guide/project/severity

LANGUAGE: javascript
CODE:
```
// ast-grep-ignore

// This file will not be scanned by ast-grep
// note the empty line after the suppression comment.
debugger // this line will not be scanned
console.debug('debugging') // this line will not be scanned
```

----------------------------------------

TITLE: Find Default Imports in TypeScript
DESCRIPTION: This rule targets default imports in TypeScript (e.g., `import DEFAULT_NAME from 'SOURCE'`). It captures the default import's name and the source module.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: yaml
CODE:
```
id: find-all-imports-and-identifiers
language: TypeScript
rule:
  any:
    - all:
        - kind: import_statement
        - has:
            kind: import_clause
            has:
              kind: identifier
              pattern: $DEFAULT_NAME
        - has:
            field: source
            pattern: $SOURCE
```

----------------------------------------

TITLE: Specify Node Type with Type Parameters
DESCRIPTION: Explicitly specify node types using type parameters to refine nodes, similar to DOM API's querySelector. This is useful when the node kind is certain and runtime checks can be skipped for performance.

SOURCE: https://ast-grep.github.io/blog/typed-napi

LANGUAGE: typescript
CODE:
```
sgNode.parent<"program">() // Returns SgNode<TS, "program">
```

----------------------------------------

TITLE: Convert List Comprehension to Generator Expression (Python)
DESCRIPTION: This YAML rule for ast-grep targets Python list comprehensions and transforms them into generator expressions by replacing square brackets with parentheses. It's designed for simple cases where the entire list is not needed multiple times or modified.

SOURCE: https://ast-grep.github.io/catalog/python/prefer-generator-expressions

LANGUAGE: yaml
CODE:
```
id: prefer-generator-expressions
language: python
rule:
  pattern: $LIST
  kind: list_comprehension
transform:
  INNER:
    substring: {source: $LIST, startChar: 1, endChar: -1 }
fix: ($INNER)
```

----------------------------------------

TITLE: Match a node that is inside another node matching a sub-rule
DESCRIPTION: The `inside` relational rule requires the target node to be contained within another node that satisfies a specified sub-rule. Options like `stopBy` and `field` allow further refinement of the search context.

SOURCE: https://ast-grep.github.io/reference/rule

LANGUAGE: yaml
CODE:
```
inside:
  pattern: class $TEST { $$$ }
  stopBy: end
  field: body
```

----------------------------------------

TITLE: Target node inside parent matching sub-rule
DESCRIPTION: Ensures the target node is located within a parent or ancestor node that satisfies the specified sub-rule.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
inside:
  kind: function_declaration
```

----------------------------------------

TITLE: Avoid nested links
DESCRIPTION: This rule detects and discourages the nesting of links within each other, which can be an anti-pattern in web development. It is applicable to TSX.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TSX
CODE:
```
kind: "jsx"
pattern: "<a><a>$A</a></a>"
```

----------------------------------------

TITLE: Add Type Hint to Pytest Fixture Argument (YAML)
DESCRIPTION: This YAML rule for ast-grep targets fixture arguments matching the name 'foo' and adds an integer type hint. It utilizes the previously defined `is-fixture-arg` utility to ensure the refactoring only applies to actual fixture arguments.

SOURCE: https://ast-grep.github.io/catalog/python/refactor-pytest-fixtures

LANGUAGE: yaml
CODE:
```
rule:
  matches: is-fixture-arg
  regex: ^foo$
fix: 'foo: int'

```

----------------------------------------

TITLE: Find Unused Java Variables (YAML)
DESCRIPTION: This YAML rule for ast-grep identifies unused local variables in Java. It captures the variable identifier and uses a negative lookahead (`not` and `precedes`) to find declarations whose identifiers do not appear later in the code. The `all` keyword ensures the identifier is captured within the declaration itself.

SOURCE: https://ast-grep.github.io/catalog/java/no-unused-vars

LANGUAGE: yaml
CODE:
```
id: no-unused-vars
rule:
    kind: local_variable_declaration
    all:
        - has:
            has:
                kind: identifier
                pattern: $IDENT
        - not:
            precedes:
                stopBy: end
                has:
                    stopBy: end
                    any:
                        - { kind: identifier, pattern: $IDENT }
                        - { has: {kind: identifier, pattern: $IDENT, stopBy: end}}
fix: ''

```

----------------------------------------

TITLE: ast-grep Rule for Yoda Condition Refactoring (YAML)
DESCRIPTION: This YAML configuration defines an ast-grep rule to identify and fix non-Yoda conditions. It targets equality comparisons where the constant is on the right and refactors them to place the constant on the left, specifically when the right side is a number literal.

SOURCE: https://ast-grep.github.io/catalog/c/yoda-condition

LANGUAGE: yaml
CODE:
```
id: may-the-force-be-with-you
language: c
rule:
  pattern: $A == $B                 # Find equality comparison
  inside:                           # inside an if_statement
    kind: parenthesized_expression
    inside: {kind: if_statement}
constraints:
  B: { kind: number_literal }       # with the constraint that
fix: $B == $A
```

----------------------------------------

TITLE: Missing Component Decorator
DESCRIPTION: This rule identifies missing component decorators in TypeScript code, enforcing constraints and applying labels for better code organization.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TypeScript
CODE:
```
kind: "class"
pattern: "class $A {...}"
inside: "$A"
constraints: "$A"
labels: "$A"
```

----------------------------------------

TITLE: Match Exact Nth Child using nthChild in YAML
DESCRIPTION: This YAML rule uses `nthChild: 3` to match the third child node of a parent. The `nthChild` rule is 1-based and selects nodes based on their position among siblings, similar to CSS pseudo-classes.

SOURCE: https://ast-grep.github.io/guide/rule-config/atomic-rule

LANGUAGE: yaml
CODE:
```
# a number to match the exact nth child
nthChild: 3
```

----------------------------------------

TITLE: Find Alias Imports in TypeScript
DESCRIPTION: This rule identifies named imports in TypeScript that use an alias (e.g., `import { ORIGINAL as ALIAS } from 'SOURCE'`). It captures the original identifier, the alias, and the source module.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: yaml
CODE:
```
id: find-all-imports-and-identifiers
language: TypeScript
rule:
  any:
    - all:
        - kind: import_specifier
        - has:
            field: alias
            pattern: $ALIAS
        - has:
            field: name
            pattern: $ORIGINAL
        - inside:
            stopBy: end
            kind: import_statement
            has:
              field: source
              pattern: $SOURCE
```

----------------------------------------

TITLE: Match node NOT satisfying sub-rule
DESCRIPTION: This rule excludes nodes that match the specified sub-rule.

SOURCE: https://ast-grep.github.io/cheatsheet/rule

LANGUAGE: yaml
CODE:
```
not:
  pattern: console.log($$)
```

----------------------------------------

TITLE: Restrict console usage except in catch blocks
DESCRIPTION: This rule enforces that 'console' methods (like log, debug, warn) are not used outside of 'catch' blocks in TypeScript. It allows 'console.error' within 'catch' blocks for debugging purposes. The rule aims to prevent sensitive information leaks or performance issues.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
id: no-console-except-error
language: typescript
rule:
  any:
    - pattern: console.error($$$)
      not:
        inside:
          kind: catch_clause
          stopBy: end
    - pattern: console.$METHOD($$$)
constraints:
  METHOD:
    regex: 'log|debug|warn'

```

LANGUAGE: typescript
CODE:
```
console.debug('')
try {
    console.log('hello')
} catch (e) {
    console.error(e) // OK
}

```

LANGUAGE: typescript
CODE:
```
console.debug('') 
try {
    console.log('hello') 
} catch (e) {
    console.error(e) // OK
}

```

----------------------------------------

TITLE: Remove async function and await calls in Python
DESCRIPTION: This snippet demonstrates how to use ast-grep to transform an asynchronous Python function into a synchronous one. It removes the `async` keyword from the function definition and the `await` keyword from calls within the function body. The YAML configuration specifies the rule for matching async function definitions and a rewriter to handle the `await` calls.

SOURCE: https://ast-grep.github.io/catalog/python/remove-async-await

LANGUAGE: yaml
CODE:
```
id: remove-async-def
language: python
rule:
  # match async function definition
  pattern:
    context: 'async def $FUNC($$$ARGS): $$$BODY'
    selector: function_definition
rewriters:
# define a rewriter to remove the await keyword
  remove-await-call:
    pattern: 'await $$$CALL'
    fix: $$$CALL # remove await keyword
# apply the rewriter to the function body
transform:
  REMOVED_BODY:
    rewrite:
      rewriters: [remove-await-call]
      source: $$$BODY
fix: |-
  def $FUNC($$$ARGS):
    $REMOVED_BODY
```

LANGUAGE: python
CODE:
```
async def main3():
  await somecall(1, 5)
```

LANGUAGE: diff
CODE:
```
async def main3(): 
  await somecall(1, 5) 
def main3(): 
  somecall(1, 5) 
```

----------------------------------------

TITLE: ast-grep Rule: Side Effect Imports
DESCRIPTION: This rule targets JavaScript side-effect imports, like 'import 'mod'', which import a module solely for its side effects without importing any specific bindings. It captures the module source.

SOURCE: https://ast-grep.github.io/catalog/typescript

LANGUAGE: yaml
CODE:
```
# SIDE EFFECT IMPORTS
# ------------------------------------------------------------
# import 'mod'
# ------------------------------------------------------------
- all:
    - kind: import_statement
    - not: # Must NOT have an import_clause
        has: { kind: import_clause }
    - has: # But must have a source
        field: source
        pattern: $SOURCE
```

----------------------------------------

TITLE: YAML Rule for Unnecessary React Hook
DESCRIPTION: This YAML configuration defines a rule for ast-grep to identify functions or variables prefixed with 'use' that do not contain any other React hook calls. It aims to help refactor these into plain functions, separating application logic from React-specific UI logic.

SOURCE: https://ast-grep.github.io/catalog/tsx/unnecessary-react-hook

LANGUAGE: yaml
CODE:
```
id: unnecessary-react-hook
language: Tsx
utils:
  hook_call:
    has:
      kind: call_expression
      regex: ^use
      stopBy: end
rule:
  any:
  - pattern: function $FUNC($$$) { $$$ }
  - pattern: let $FUNC = ($$$) => $$$ 
  - pattern: const $FUNC = ($$$) => $$$ 
  has:
    pattern: $BODY
    kind: statement_block
    stopBy: end
constraints:
  FUNC: {regex: ^use }
  BODY: { not: { matches: hook_call } }
```

----------------------------------------

TITLE: Match Node with Both Number and String Children (yaml)
DESCRIPTION: This rule correctly identifies a node that possesses both a number child and a string child. It achieves this by using the 'all' operator to combine two 'has' rules, ensuring both conditions are met for the same parent node.

SOURCE: https://ast-grep.github.io/guide/rule-config/composite-rule

LANGUAGE: yaml
CODE:
```
all:
- has: {kind: number}
- has: {kind: string}
```

----------------------------------------

TITLE: Remove `async` function
DESCRIPTION: This rule helps remove unnecessary `async` keywords from function definitions in Python, applying transformations for cleaner code.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Python
CODE:
```
kind: "function_definition"
pattern: "async def $A(...):"
transform: "def $A(...):"
rewriters: "$A"
+1
```

----------------------------------------

TITLE: JavaScript Key-Value Pair Deletion with Comma Removal
DESCRIPTION: Shows how to remove a key-value pair from a JavaScript object, including the trailing comma, using ast-grep's expandEnd feature. This ensures cleaner code by removing unnecessary punctuation.

SOURCE: https://ast-grep.github.io/guide/rewrite-code

LANGUAGE: JavaScript
CODE:
```
const obj = {
  Remove: 'value1'
}
const obj2 = {
  Remove: 'value1',
  Kept: 'value2',
}
```

LANGUAGE: YAML
CODE:
```
language: javascript
rule:
  kind: pair
  has:
    field: key
    regex: Remove
# remove the key-value pair and its comma
fix:
  template: ''
  expandEnd: { regex: ',' } # expand the range to the comma
```

----------------------------------------

TITLE: ast-grep Rule: Dynamic Imports (Side Effect / Source Only)
DESCRIPTION: This rule targets dynamic imports used solely for their side effects, where only the module source is relevant. It matches string literals that are arguments to 'require' or 'import' calls, ensuring they are not part of a lexical declaration.

SOURCE: https://ast-grep.github.io/catalog/typescript/find-import-identifiers

LANGUAGE: yaml
CODE:
```
# DYNAMIC IMPORTS (Side Effect / Source Only)
# ------------------------------------------------------------
# require('SOURCE')
# ------------------------------------------------------------
- all:
    - kind: string # Target the source string literal directly
    - pattern: $SOURCE
    - inside: # String must be the argument of require() or import()
        kind: arguments
        parent:
          kind: call_expression
          has:
            field: function
            # Match 'require' identifier or 'import' keyword used dynamically
            regex: '^(require|import)$'
        stopBy: end # Search ancestors if needed (for the arguments/call_expression)
    - not:
        inside:
          kind: lexical_declaration
          stopBy: end # Search all ancestors up to the root
```

----------------------------------------

TITLE: Unnecessary `useState` Type
DESCRIPTION: This rule identifies and helps remove unnecessary type annotations for `useState` in TSX components, simplifying the code.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: TSX
CODE:
```
kind: "variable_declaration"
pattern: "const [$A, $B] = useState<$C>($D)"
transform: "const [$A, $B] = useState($D)"
```

----------------------------------------

TITLE: Recursive Rewrite Type
DESCRIPTION: This rule performs recursive rewrites of types, applying transformations and utility functions in Python for code refactoring.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Python
CODE:
```
kind: "type_hint"
pattern: "Optional[$A]"
transform: "$A | None"
rewriters: "$A"
+1
```

----------------------------------------

TITLE: Find Java Field Declarations of Type String
DESCRIPTION: This rule extracts all Java field names of type String, regardless of modifiers or annotations. It uses a structural rule targeting 'field_declaration' nodes and applies a 'has' constraint on the 'type' child node to match the 'String' type, ensuring robust field capture.

SOURCE: https://ast-grep.github.io/catalog/java

LANGUAGE: YAML
CODE:
```
id: find-field-with-type
language: java
rule:
  kind: field_declaration
  has:
    field: type
    regex: ^String$
```

LANGUAGE: Java
CODE:
```
@Component
class ABC extends Object{
    @Resource
    private final String with_anno;

    private final String with_multi_mod;

    public String simple;
}
```

----------------------------------------

TITLE: JavaScript Recursive Number Literal Matching
DESCRIPTION: This demonstrates a recursive rule trick in ast-grep to match number literals, including those enclosed in parentheses like '(((123)))'. It utilizes a utility rule 'is-number' that recursively checks for number kinds or parenthesized expressions containing a match for 'is-number'.

SOURCE: https://ast-grep.github.io/guide/rule-config/utility-rule

LANGUAGE: YAML
CODE:
```
utils:
  is-number:
    any:
      - kind: number
      - kind: parenthesized_expression
        has:
          matches: is-number
rule:
  matches: is-number
```

----------------------------------------

TITLE: Prefer Generator Expressions - Python
DESCRIPTION: This rule converts Python list comprehensions to generator expressions for improved memory efficiency. It replaces square brackets with parentheses, but includes a warning that this is not suitable if the list is used multiple times, modified, sliced, or indexed.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: yaml
CODE:
```
id: prefer-generator-expressions
language: python
rule:
  pattern: $LIST
  kind: list_comprehension
transform:
  INNER:
    substring: {source: $LIST, startChar: 1, endChar: -1 }
fix: ($INNER)
```

LANGUAGE: yaml
CODE:
```
id: prefer-generator-expressions
language: python
rule:
  pattern: $FUNC($LIST)
constraints:
  LIST: { kind: list_comprehension }
  FUNC:
    any:
      - pattern: any
      - pattern: all
      - pattern: sum
      # ...
transform:
  INNER:
    substring: {source: $LIST, startChar: 1, endChar: -1 }
fix: $FUNC($INNER)
```

LANGUAGE: python
CODE:
```
any([x for x in range(10)])
```

LANGUAGE: python
CODE:
```
any([x for x in range(10)]) 
any(x for x in range(10)) 
```

----------------------------------------

TITLE: Refactor Rust: Remove indoc! Macro with ast-grep
DESCRIPTION: This snippet uses ast-grep to refactor Rust code by removing 'indoc!' macro declarations and replacing them with backtick-enclosed content. It targets Rust raw string literals within the macro.

SOURCE: https://ast-grep.github.io/catalog/rust

LANGUAGE: shell
CODE:
```
ast-grep --pattern 'indoc! { r#"$$$A"# }' --rewrite '`$$$A`' sgtest.rs
```

----------------------------------------

TITLE: No `await` in `Promise.all` array (JavaScript)
DESCRIPTION: This rule detects the incorrect usage of `await` within the array passed to `Promise.all`. It aims to prevent performance issues by ensuring promises are executed in parallel as intended.

SOURCE: https://ast-grep.github.io/catalog/typescript



----------------------------------------

TITLE: Prefer Generator Expressions
DESCRIPTION: This rule encourages the use of generator expressions over list comprehensions in Python for memory efficiency. It applies transformations to refactor the code.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Python
CODE:
```
kind: "list_comprehension"
pattern: "[$A for $B in $C]"
transform: "($A for $B in $C)"
```

----------------------------------------

TITLE: Remove Async Keyword and Await Calls in Python Functions
DESCRIPTION: This rule refactors Python asynchronous functions by removing the 'async' keyword from the function definition and the 'await' keyword from calls within the function body. It converts async functions to their synchronous equivalents.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: yaml
CODE:
```
id: remove-async-def
language: python
rule:
  # match async function definition
  pattern:
    context: 'async def $FUNC($$$ARGS): $$$BODY'
    selector: function_definition
rewriters:
# define a rewriter to remove the await keyword
  remove-await-call:
    pattern: 'await $$$CALL'
    fix: $$$CALL # remove await keyword
# apply the rewriter to the function body
transform:
  REMOVED_BODY:
    rewrite:
      rewriters: [remove-await-call]
      source: $$$BODY
fix: |-
  def $FUNC($$$ARGS):
    $REMOVED_BODY
```

----------------------------------------

TITLE: No Unused Vars in Java
DESCRIPTION: This rule identifies and helps remove unused variables in Java code. It applies fixes to ensure code cleanliness.

SOURCE: https://ast-grep.github.io/catalog/index

LANGUAGE: Java
CODE:
```
kind: "variable"
pattern: "$A"
all: "$A"
has: "$A"
not: "$A"
fix: ""
```

----------------------------------------

TITLE: Find Java String Fields with ast-grep
DESCRIPTION: This snippet demonstrates how to use ast-grep's structural rules to find Java field declarations of type String. It uses a `field_declaration` kind with a `has` constraint on the `type` child node, matching the regex '^String$' to correctly capture fields regardless of modifiers or annotations.

SOURCE: https://ast-grep.github.io/catalog/java/find-field-with-type

LANGUAGE: yaml
CODE:
```
id: find-field-with-type
language: java
rule:
  kind: field_declaration
  has:
    field: type
    regex: ^String$
```

LANGUAGE: java
CODE:
```
@Component
class ABC extends Object{
    @Resource
    private final String with_anno;

    private final String with_multi_mod;

    public String simple;
}
```

----------------------------------------

TITLE: Use Walrus Operator in Python If Statements
DESCRIPTION: This rule refactors Python code by replacing a variable assignment followed by an if statement with the walrus operator (:=). It simplifies conditional assignments within if statements.

SOURCE: https://ast-grep.github.io/catalog/python

LANGUAGE: yaml
CODE:
```
id: use-walrus-operator
language: python
rule:
  pattern: "if $VAR: $$$B"
  follows:
    pattern:
      context: $VAR = $$$EXPR
      selector: expression_statement
fix: |-
  if $VAR := $$$EXPR:
    $$$B
```
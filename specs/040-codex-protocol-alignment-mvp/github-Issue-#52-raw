```toml
[gh_issues_metadata]
title = "Codex Protocol Alignment MVP #52"
uri = "https://github.com/lwyBZss8924d/ACPLazyBridge/issues/52"
owner = "lwyBZss8924d"
status = "opened"
milestone = "0.1.0"
projects = "https://github.com/users/lwyBZss8924d/projects/7"
lables = [
  "codex-integration",
  "enhancement",
  "M1",
  "task"
  ]

[comments]
uri = ""

[pr]
uri = ""
```

- **Milestone**: 0.1.0 – Core Runtime & Zed ↔ Codex-CLI MVP
- **Issue URI**: https://github.com/lwyBZss8924d/ACPLazyBridge/issues/52 _(created 2025-09-30)_
- **Requirements & Research**: `dev-docs/_requirements/040-codex-protocol-alignment-mvp/`
    - Research report (3,500 lines)
    - Gap analysis (2,500 lines)
    - Complete protocol mappings (ACP + Codex)
    - Reference implementation analysis (TypeScript + Rust)
- **SDD Artifacts**: _(will be generated by `/sdd-task 52`)_
    - Spec: `specs/040-codex-protocol-alignment-mvp/spec.md`
    - Plan: `specs/040-codex-protocol-alignment-mvp/plan.md`
    - Tasks: `specs/040-codex-protocol-alignment-mvp/tasks.md`
- **Evidence Root**: `_artifacts/040-codex-protocol-alignment-mvp/`
- **Dependencies**:
    - Task 038 – `specs/038-adopt-acp-runtime/`
    - Task 039 – `specs/039-streaming-alignment-session-notifications/`
    - ACP crate `agent-client-protocol` Latest Release: `v0.4.4` [v0.4.4](https://github.com/zed-industries/agent-client-protocol/releases/tag/v0.4.4)
- **Supersedes**: `dev-docs/_issues_drafts/open/#46-protocol-cleanup-official-models.md`

```tree
dev-docs/_requirements/040-codex-protocol-alignment-mvp
❯ tree
.
├── README.md
├── acp-protocol-complete-mapping.md
├── codex-protocol-analysis
│   ├── README.md
│   ├── codex-complete-protocol-mapping.md
│   └── codex-to-acp-mapping-recommendations.md
├── issue-50-gap-analysis.md
└── issue-50-research-report.md

2 directories, 7 files
```

> dev-docs/_requirements/040-codex-protocol-alignment-mvp

- [issue-50-research-report.md](dev-docs/_requirements/040-codex-protocol-alignment-mvp/issue-50-research-report.md)
- [issue-50-gap-analysis.md](dev-docs/_requirements/040-codex-protocol-alignment-mvp/issue-50-gap-analysis.md)
- [acp-protocol-complete-mapping.md](dev-docs/_requirements/040-codex-protocol-alignment-mvp/acp-protocol-complete-mapping.md)
- [codex-protocol-analysis](dev-docs/_requirements/040-codex-protocol-alignment-mvp/codex-protocol-analysis)
    - [README.md](dev-docs/_requirements/040-codex-protocol-alignment-mvp/codex-protocol-analysis/README.md
    - [codex-complete-protocol-mapping.md](dev-docs/_requirements/040-codex-protocol-alignment-mvp/codex-protocol-analysis/codex-complete-protocol-mapping.md)
    - [codex-to-acp-mapping-recommendations.md](dev-docs/_requirements/040-codex-protocol-alignment-mvp/codex-protocol-analysis/codex-to-acp-mapping-recommendations.md)
- [README.md](dev-docs/_requirements/040-codex-protocol-alignment-mvp/README.md)

## Summary

Complete the Codex adapter migration so every Codex submission, tool lifecycle event, approval flow, and plan update is represented with official ACP models. Implement an MCP-to-ACP bridge architecture (TCP server + MCP binary) to enable Codex MCP client functionality while maintaining ACP client compatibility. Retire the narrow scope of Issue #46 and align the milestone documentation with the broader MVP expectation captured in DeepResearch notes.

## Problem

The Codex bridge currently covers only a subset of `EventMsg` variants (44% coverage - 11/25 events). Missing mappings for plan updates, apply_patch approvals, MCP calls, slash commands, and experimental JSON streams prevent ACP clients (e.g., Zed) from rendering complete workflows.

**Critical Gap**: The current subprocess-only architecture cannot support Codex's MCP client capabilities. Codex CLI expects to connect to MCP servers for filesystem operations, but ACP clients provide filesystem APIs directly. We need an **MCP-to-ACP bridge** (TCP server + MCP server binary) to mediate between Codex's MCP client and the ACP client API.

**Missing Event Coverage** (14 critical events):

- Approval flows (ApprovalRequired, ApprovalResponse)
- Enhanced tool lifecycle (ToolProgress, ToolCallUpdate)
- MCP integration (McpServerConnected, McpToolCall)
- Plan streaming (PlanChunk, PlanComplete)
- Slash commands (SlashCommandInvoked, SlashCommandResult)
- Reasoning tracking (ReasoningSection, ReasoningComplete)
- Context operations (ContextAdded, ContextRemoved)

Documentation still references Issue #46, which no longer reflects the necessary work.

## Why Now

Milestone 0.1.0 promises ACP fidelity for Codex, completing the runtime/streaming migrations started in Issues #44 and #45. Without this alignment and the MCP-to-ACP bridge infrastructure, the Codex adapter cannot be presented as an MVP deliverable, blocking integration with Zed and future ACP clients.

## Goals

1. **MCP-to-ACP Bridge Architecture**: Implement TCP bridge server (`McpBridge`) and MCP server binary (`acp_mcp_server`) to mediate between Codex MCP client and ACP client API
2. **Complete Event Coverage**: Implement end-to-end ACP mappings for all 25 critical `EventMsg` variants (target: 100% coverage)
3. **Submission Metadata**: Capture submission metadata (cwd, sandbox, approval policy, model, XML annotations, @-mentions) as ACP session state and content annotations
4. **Slash Command Support**: Implement built-in slash command handlers (/status, /model, /approvals, /compact, /review)
5. **Dual Session Tracking**: Track both ACP session ID and MCP bridge session ID for proper lifecycle management
6. **Documentation Update**: Update milestone documentation to reference Issue #52, marking Issue #46 as superseded
7. **Regression Evidence**: Provide regression evidence (JSONL, schema validation, Zed smoke test logs) under `_artifacts/040-codex-protocol-alignment-mvp/`

## Non-Goals

- Adding new Codex CLI capabilities
- Shipping adapters for Claude or Gemini
- Introducing persistence or background workers
- Implementing custom MCP servers beyond filesystem bridge

## Architecture

### Hybrid Subprocess + MCP Bridge Model

```txt
Zed IDE (ACP Client)
    ↓ stdio (JSON-RPC 2.0)
┌────────────────────────────────────────────────┐
│ codex-cli-acp Agent (AgentSideConnection)      │
│                                                │
│  ┌─────────────────────────────────────────┐   │
│  │ SessionState                            │   │
│  │  - acp_session_id: String               │   │
│  │  - fs_session_id: String (bridge)       │   │
│  │  - reasoning_sections: Vec<String>      │   │
│  │  - current_approval: AskForApproval     │   │
│  │  - current_sandbox: SandboxPolicy       │   │
│  │  - token_usage: Option<TokenUsage>      │   │
│  └─────────────────────────────────────────┘   │
│                                                │
│  ┌──────────────────────────────┐              │
│  │ McpBridge (TCP Server)       │              │
│  │  - address: 127.0.0.1:XXXXX  │              │
│  │  - spawn: acp_mcp_server     │──┐           │
│  └──────────────────────────────┘  │           │
│                                    ↓           │
│           ┌──────────────────────────────────┐ │
│           │ acp_mcp_server (MCP Server)      │ │
│           │  Tools:                          │ │
│           │   - read_text_file               │ │
│           │   - write_text_file              │ │
│           │   - edit_text_file               │ │
│           │   - multi_edit_text_file         │ │
│           │                                  │ │
│           │  StagedEdits:                    │ │
│           │   - Track in-memory versions     │ │
│           │   - Generate diffs               │ │
│           └──────────────────────────────────┘ │
│                                    ↓           │
│           ┌──────────────────────────────────┐ │
│           │ ACP Client API                   │ │
│           │  - client.read_text_file()       │ │
│           │  - client.write_text_file()      │ │
│           │  (with try-fallback to local fs) │ │
│           └──────────────────────────────────┘ │
│                                                │
│  ┌────────────────────────────────────────┐    │
│  │ Codex CLI (subprocess: proto mode)     │    │
│  │  - Spawned with --mcp-server flag      │    │
│  │  - Points to 127.0.0.1:XXXXX           │    │
│  │  - Emits EventMsg to stdout            │    │
│  └────────────────────────────────────────┘    │
│                                                │
│  ┌────────────────────────────────────────┐    │
│  │ CodexStreamManager                     │    │
│  │  - Maps EventMsg → SessionUpdate       │    │
│  │  - Handles tool lifecycle              │    │
│  │  - Processes slash commands            │    │
│  └────────────────────────────────────────┘    │
└────────────────────────────────────────────────┘
```

### Key Architectural Components

**1. McpBridge (TCP Server)**

- Binds to `127.0.0.1:0` (random available port)
- Spawns `acp_mcp_server` binary with connection info
- Accepts connections from Codex CLI MCP client
- Lifetime tied to ACP session
- Location: `crates/acp-lazy-core/src/mcp_bridge.rs` (~400 lines)

**2. acp_mcp_server (MCP Server Binary)**

- Separate binary in `codex-cli-acp` crate
- Exposes 4 filesystem tools via MCP protocol
- Translates MCP tool calls to ACP Client API calls
- Implements staged edits pattern for multi-edit operations
- Provides try-fallback to local filesystem if ACP unavailable
- Location: `crates/codex-cli-acp/src/bin/acp_mcp_server.rs` (~850 lines)

**MCP Tools Exposed:**

```rust
// Tool 1: Read file with pagination
read_text_file(path: String, line?: u32, limit?: u32) -> ReadResult {
    content: String,
    _meta: {
        total_lines: u32,
        returned_lines: u32,
        has_more: bool,
        next_line?: u32
    }
}

// Tool 2: Write complete file
write_text_file(path: String, content: String) -> WriteResult {
    success: bool,
    error?: String
}

// Tool 3: Single edit with diff
edit_text_file(
    path: String,
    old_string: String,
    new_string: String
) -> EditResult {
    success: bool,
    diff: String,      // unified diff format
    error?: String
}

// Tool 4: Multiple edits with staging
multi_edit_text_file(
    path: String,
    edits: Vec<EditOp>
) -> MultiEditResult {
    success: bool,
    diff: String,      // cumulative diff
    applied_count: u32,
    error?: String
}
```

**3. Slash Command Handler**

- Detects `/` prefix in user messages
- Built-in commands: `/status`, `/model`, `/approvals`, `/compact`, `/review`
- Updates `AvailableCommandsUpdate` on session initialization
- Maps commands to ACP protocol operations
- Location: `crates/codex-cli-acp/src/commands.rs` (~300 lines)

**4. Dual Session Tracking**

- ACP session ID (client-provided)
- MCP bridge session ID (internally managed)
- Proper cleanup on session termination
- Token usage tracking per session

### Event Flow Examples

**File Edit with Bridge:**

```txt
1. Zed sends session/prompt with "edit config.toml"
2. codex-cli-acp spawns Codex CLI with --mcp-server=127.0.0.1:XXXXX
3. Codex decides to edit → MCP call to tcp://127.0.0.1:XXXXX
4. acp_mcp_server receives edit_text_file tool call
5. acp_mcp_server calls ACP client.read_text_file() to get current content
6. acp_mcp_server applies edit, generates diff
7. acp_mcp_server calls ACP client.write_text_file() with new content
8. codex-cli-acp emits SessionUpdate::ToolCall + ToolCallUpdate
9. Zed renders tool execution in UI
```

**Slash Command:**

```txt
1. User types "/status" in Zed
2. codex-cli-acp detects slash command prefix
3. Command handler executes (query session state)
4. Emits SessionUpdate::AgentMessageChunk with status info
5. Zed renders status output
```

## Acceptance Criteria

### Event Coverage

- ✅ All 25 targeted `EventMsg` variants map to ACP `SessionUpdate` payloads with correct status transitions and metadata
- ✅ Event mapping coverage reaches 100% (currently 44%)
- ✅ Missing events implemented: ApprovalRequired, ApprovalResponse, ToolProgress, McpServerConnected, McpToolCall, PlanChunk, PlanComplete, SlashCommandInvoked, SlashCommandResult, ReasoningSection, ReasoningComplete, ContextAdded, ContextRemoved, TokenUsageUpdate

### MCP-to-ACP Bridge

- ✅ McpBridge TCP server starts on random port and accepts Codex MCP client connections
- ✅ acp_mcp_server binary exposes 4 MCP tools (read/write/edit/multi_edit)
- ✅ MCP tools successfully translate to ACP Client API calls
- ✅ Staged edits pattern correctly generates diffs for multi-edit operations
- ✅ Try-fallback to local filesystem works when ACP unavailable
- ✅ Bridge lifecycle properly tied to session lifecycle

### Slash Commands

- ✅ Built-in commands implemented: /status, /model, /approvals, /compact, /review
- ✅ Slash commands surfaced via AvailableCommandsUpdate on session start
- ✅ Command execution emits appropriate SessionUpdate payloads
- ✅ Invalid commands handled gracefully with error messages

### Session Management

- ✅ Dual session ID tracking (ACP + MCP bridge)
- ✅ Proper cleanup of bridge resources on session termination
- ✅ Token usage tracking per session
- ✅ Reasoning section accumulation with proper aggregation

### Submission Context

- ✅ Submission context captures cwd, sandbox, approval, model, and reasoning toggles
- ✅ Context exposed to ACP clients via session state
- ✅ XML annotations and @-mentions parsed and represented

### Tool Lifecycle

- ✅ Apply-patch and MCP tool flows emit paired `ToolCall`/`ToolCallUpdate` notifications
- ✅ Tool status transitions: pending → in_progress → completed/failed
- ✅ Raw input/output captured with location hints
- ✅ Output truncation with metadata flags (max 10KB preview)

### Testing & Evidence

- ✅ Proto and experimental JSON ingestion paths covered by failing-first tests
- ✅ JSONL fixtures for all new event mappings
- ✅ Bridge integration tests (TCP connection, MCP tool calls)
- ✅ Slash command unit tests
- ✅ Evidence logs stored under `_artifacts/040-codex-protocol-alignment-mvp/`

### Documentation

- ✅ Documentation set updated with Issue #52 references:
    - `dev-docs/_requirements/Roadmap.md`
    - `dev-docs/_requirements/m1-technical-implementation-plan.md`
    - `dev-docs/_requirements/m1-issue-list.md`
    - `dev-docs/_requirements/acp-lazybridge-requirements.md`
    - `dev-docs/_requirements/acp-lazybridge-project-plan.md`
    - `dev-docs/_requirements/migration-blueprint-project-management-plan.md`
- ✅ Issue #46 marked as superseded
- ✅ Architecture diagrams updated with bridge components

## Deliverables

### Core Implementation (~2,250 lines)

**New Files:**

- (1) `crates/acp-lazy-core/src/mcp_bridge.rs` (~400 lines)
    - McpBridge struct with TCP server
    - Lifecycle management tied to session
    - Connection handler loop
    - Port allocation and cleanup

- (2) `crates/codex-cli-acp/src/bin/acp_mcp_server.rs` (~850 lines)
    - MCP server binary entry point
    - 4 filesystem tool implementations
    - StagedEdits manager for multi-edit
    - ACP Client API integration with fallback

- (3) `crates/codex-cli-acp/src/commands.rs` (~300 lines)
    - Slash command parser
    - Built-in command handlers
    - AvailableCommand static definitions
    - Command execution helpers

**Updated Files:**

- (4) `crates/codex-cli-acp/src/codex_agent.rs` (~250 lines of changes)

- Initialize McpBridge on session/new
- Pass bridge address to Codex CLI spawn
- Track dual session IDs
- Cleanup bridge on session end

- (5) `crates/codex-cli-acp/src/codex_proto.rs` (~400 lines of changes)
    - Add 14 missing event handlers
    - Implement reasoning section aggregation
    - Enhanced tool status transitions
    - MCP event processing

- (6) `crates/codex-cli-acp/src/tool_calls.rs` (~50 lines of changes)
    - Add MCP tool categorization
    - Enhanced diff extraction
    - Staged edit detection

### Testing (~500 lines)

- (7) `crates/codex-cli-acp/tests/mcp_bridge_test.rs` (~150 lines)
    - TCP server lifecycle tests
    - MCP connection tests
    - Tool call integration tests

- (8) `crates/codex-cli-acp/tests/commands_test.rs` (~100 lines)
    - Slash command parsing tests
    - Built-in command execution tests
    - Error handling tests

- (9) JSONL fixtures for new events (~250 lines)
    - `_artifacts/tests/protocol-baseline/approval_flows.jsonl`
    - `_artifacts/tests/protocol-baseline/mcp_integration.jsonl`
    - `_artifacts/tests/protocol-baseline/slash_commands.jsonl`
    - `_artifacts/tests/protocol-baseline/reasoning_tracking.jsonl`

### Documentation Updates

- (10) Updated requirements documentation
- (11) Architecture diagrams with bridge components
- (12) Issue #46 supersession notice
- (13) Quickstart/manual validation steps for Zed ↔ Codex workflows

### Evidence Artifacts

- (14) Test logs, lint results, schema validation
- (15) Zed smoke test session recordings
- (16) Performance benchmarks (bridge overhead < 5ms)

## Implementation Roadmap

### Week 1: Bridge Infrastructure (5-6 days)

**Day 1-2: McpBridge Foundation**

- [ ] Implement `McpBridge` struct in `acp-lazy-core/src/mcp_bridge.rs`
- [ ] TCP server with random port allocation
- [ ] Connection accept loop
- [ ] Lifecycle management (start/stop/cleanup)
- [ ] Unit tests for server lifecycle

**Day 3-4: MCP Server Binary**

- [ ] Create `acp_mcp_server.rs` binary entry point
- [ ] Implement 4 MCP tools (read/write/edit/multi_edit)
- [ ] StagedEdits manager for in-memory versioning
- [ ] ACP Client API integration with try-fallback
- [ ] Integration tests for each tool

**Day 5-6: Bridge Integration**

- [ ] Update `codex_agent.rs` to spawn McpBridge
- [ ] Pass bridge address to Codex CLI via `--mcp-server`
- [ ] Dual session ID tracking
- [ ] Bridge cleanup on session termination
- [ ] End-to-end test: Zed → codex-cli-acp → McpBridge → acp_mcp_server

### Week 2: Event Coverage & Slash Commands (5-6 days)

**Day 1-2: Missing Event Handlers**

- [ ] Implement 14 missing events in `codex_proto.rs`
- [ ] Approval flows (ApprovalRequired, ApprovalResponse)
- [ ] Tool progress (ToolProgress, ToolCallUpdate enhancements)
- [ ] MCP integration (McpServerConnected, McpToolCall)
- [ ] Reasoning tracking (ReasoningSection, ReasoningComplete)

**Day 3-4: Plan & Context Events**

- [ ] Plan streaming (PlanChunk, PlanComplete)
- [ ] Context operations (ContextAdded, ContextRemoved)
- [ ] Token usage (TokenUsageUpdate)
- [ ] JSONL fixtures for all new events

**Day 5-6: Slash Commands**

- [ ] Create `commands.rs` with parser
- [ ] Implement 5 built-in commands (/status, /model, /approvals, /compact, /review)
- [ ] AvailableCommandsUpdate on session init
- [ ] Command execution tests

### Week 3: Testing, Documentation & Evidence (4-5 days)

**Day 1-2: Comprehensive Testing**

- [ ] Write failing-first tests for all new events
- [ ] Bridge integration test suite
- [ ] Slash command test suite
- [ ] JSONL regression scenarios
- [ ] Schema validation tests

**Day 3: Documentation Updates**

- [ ] Update 6 requirements documents with Issue #52
- [ ] Mark Issue #46 as superseded
- [ ] Create architecture diagrams with bridge
- [ ] Write Zed quickstart guide

**Day 4-5: Evidence & Validation**

- [ ] Run full test suite, collect logs
- [ ] Perform Zed smoke tests, record sessions
- [ ] Measure bridge overhead (target < 5ms)
- [ ] Run `scripts/ci/run-local-ci.sh`
- [ ] Store all evidence in `_artifacts/040-codex-protocol-alignment-mvp/`
- [ ] Final PR with evidence links

## Risks & Mitigations

| Risk | Mitigation |
| --- | --- |
| Missing Codex event variants | Complete event mapping inventory during research phase (DONE: see `dev-docs/_requirements/040-codex-protocol-alignment-mvp/`) and add failing tests before implementation |
| Tool payload size & secrets | Implement truncation with metadata flags (max 10KB preview) and redact sensitive data per Constitution Article IX |
| Documentation divergence | Update docs early in the branch and rerun `scripts/sdd/check-sdd-consistency.sh` before PR |
| Experimental JSON drift | Keep feature behind config flag; add regression tests for both outputs |
| TCP port conflicts | Use OS-assigned random port (bind to 0) and implement retry logic |
| Bridge process crashes | Implement health checks and automatic restart; ensure proper cleanup |
| MCP protocol incompatibility | Version check on connection; fail gracefully with clear error messages |
| Slash command namespace collision | Reserve `/` prefix; document custom command patterns |
| Filesystem fallback failures | Log fallback attempts; provide clear error messages to user |

## Research & References

### Comprehensive Analysis Complete

All research materials are available in `dev-docs/_requirements/040-codex-protocol-alignment-mvp/`:

**Primary Documents:**

1. `issue-50-research-report.md` (3,500 lines) - Executive summary, protocol analysis, implementation roadmap
2. `issue-50-gap-analysis.md` (2,500 lines) - Current state, missing events, file-by-file implementation guide
3. `acp-protocol-complete-mapping.md` (800 lines) - ACP protocol reference, SessionUpdate variants
4. `codex-protocol-analysis/codex-complete-protocol-mapping.md` (1,000 lines) - All Codex EventMsg variants
5. `codex-protocol-analysis/codex-to-acp-mapping-recommendations.md` (800 lines) - Event mapping patterns

**Reference Implementations Analyzed:**

- `claude-code-acp` (TypeScript) - <https://github.com/zed-industries/claude-code-acp>
- `codex-acp` (Rust) - `/Users/arthur/dev-space/codex-acp`
    - **Critical Discovery**: Filesystem bridge architecture (TCP server + MCP binary)
    - Source of bridge design, MCP tools, staged edits pattern

## "ACP" and "Codex-CLI" for "ACPLazyBridge" Dev references

### (Codex-CLI)

<"Codex-CLI" for "ACPLazyBridge" Dev references repo path>

- (/OpenAI/codex/)
- (/OpenAI/codex/docs/)
- (/OpenAI/codex/codex-cli/)
- (/OpenAI/codex/codex-rs/)

</"Codex-CLI" for "ACPLazyBridge" Dev references repo path>

- <https://github.com/openai/codex/tree/main/codex-rs>
- "headless" CLI for use in automation <https://github.com/openai/codex/tree/main/codex-rs/exec/src>
- CLI multitool that provides the aforementioned CLIs via subcommands:<https://github.com/openai/codex/tree/main/codex-rs/cli>
- TODO lists
- @file path for workspace context input
- Images
- Tool calls event
- Approval Following event and user input approval actions (Codex CLI's model requires human approval before executing a command)
- Interactive (and background) terminals
- Codex CLI Built-in Slash commands and Custom [Slash commands]
- Client MCP servers

### (ACP)

Cargo.toml

```toml
[dependencies]
agent-client-protocol = { git = "https://github.com/zed-industries/agent-client-protocol" }
```

<"ACP and ACP Rust library" for "ACPLazyBridge" Dev references repo path>

- (/Zed-Industries/agent-client-protocol/)
- (/Zed-Industries/agent-client-protocol/docs/protocol/)
- (/Zed-Industries/agent-client-protocol/schema/schema.json)
- (/Zed-Industries/agent-client-protocol/schema/meta.json)
- (/Zed-Industries/agent-client-protocol/rust/)

</"ACP and ACP Rust library" for "ACPLazyBridge" Dev references repo path>

- <https://agentclientprotocol.com/overview/architecture>
- <https://github.com/zed-industries/agent-client-protocol/blob/main/schema/meta.json>
- <https://github.com/zed-industries/agent-client-protocol/blob/main/schema/schema.json>

Protocol:

- [**Overview**](https://agentclientprotocol.com/protocol/overview)
- [Initialization](https://agentclientprotocol.com/protocol/initialization)
- [Session Setup](https://agentclientprotocol.com/protocol/session-setup)
- [Prompt Turn](https://agentclientprotocol.com/protocol/prompt-turn)
- [Content](https://agentclientprotocol.com/protocol/content)
- [Tool Calls](https://agentclientprotocol.com/protocol/tool-calls)
- [File System](https://agentclientprotocol.com/protocol/file-system)
- [Terminals](https://agentclientprotocol.com/protocol/terminals)
- [Agent Plan](https://agentclientprotocol.com/protocol/agent-plan)
- [Session Modes](https://agentclientprotocol.com/protocol/session-modes)
- [Slash Commands](https://agentclientprotocol.com/protocol/slash-commands)
- [Extensibility](https://agentclientprotocol.com/protocol/extensibility)
- [Schema](https://agentclientprotocol.com/protocol/schema)

## Next Actions

**Phase 1: Issue Creation & SDD Initialization**

(1) ✅ **GitHub Issue #52 Created**: https://github.com/lwyBZss8924d/ACPLazyBridge/issues/52

(2) **Initialize SDD workflow**: Run `/sdd-task 52` (or `/sdd-task https://github.com/lwyBZss8924d/ACPLazyBridge/issues/52`)

- This will automatically:
    - Create worktree: `../acplb-worktrees/040-codex-protocol-alignment-mvp` from `origin/main`
    - Run `/specify` → generate `specs/040-codex-protocol-alignment-mvp/spec.md` from requirements
    - Run `/plan` → generate `specs/040-codex-protocol-alignment-mvp/plan.md` with technical design
    - Run `/tasks` → generate `specs/040-codex-protocol-alignment-mvp/tasks.md` with implementation checklist

**Phase 2: Implementation (2 days)**

(3) **Day 0.5**: Bridge infrastructure (McpBridge + acp_mcp_server)
(4) **Day 0.5**: Event coverage (14 missing events) + slash commands
(5) **Day 1**: Testing, documentation, evidence collection

**Phase 3: Validation & PR**

(6) Update milestone documentation and mark Issue #46 as superseded
(7) Run `scripts/ci/run-local-ci.sh` (includes `check-sdd-consistency.sh`)
(8) Collect evidence in `_artifacts/040-codex-protocol-alignment-mvp/`
(9) Create PR with comprehensive evidence links

**Reference Materials Available:**

- Complete research: [dev-docs/_requirements/040-codex-protocol-alignment-mvp/](dev-docs/_requirements/040-codex-protocol-alignment-mvp/README.md)
- Gap analysis: 14 missing events identified with implementation guidance
- Protocol mappings: Complete Codex EventMsg → ACP SessionUpdate tables
- Reference implementations: TypeScript (claude-code-acp) + Rust (codex-acp) patterns

---

⚠️ _Based on SDD CONSTITUTION: `.specify/memory/constitution.md`_
⚠️ _Follow the SDD workflow implementation: `.specify/memory/lifecycle.md`_
⚠️ _Follow the SDD rules: `sdd-rules/rules/README.md`_

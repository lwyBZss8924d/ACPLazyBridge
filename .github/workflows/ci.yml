name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches:
      - feature/**
      - fix/**
      - perf/**
      - chore/**
      - docs/**

# Required for security-events write permission
permissions:
  contents: read
  pull-requests: read
  security-events: write

jobs:
  # Cross-platform build and test matrix
  build-test:
    strategy:
      matrix:
        # Windows temporarily removed due to Unix-specific code in acplb_notify_forwarder
        # TODO: Re-enable after fixing Windows compatibility (Issue #32)
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy (deny warnings)
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Tests
        run: cargo test --workspace --all-features --locked

  # SDD validation checks
  sdd-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: SDD structure lint
        run: bash scripts/ci/run-sdd-structure-lint.sh

      - name: Language policy check (normative artifacts)
        run: bash scripts/ci/check-language-policy.sh

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Protocol scenarios (JSONL replay)
        id: scenarios
        shell: bash
        run: |
          set -euo pipefail
          if compgen -G "dev-docs/review/_artifacts/tests/*.jsonl" > /dev/null; then
            mkdir -p _ci_artifacts/protocol
            for f in dev-docs/review/_artifacts/tests/*.jsonl; do
              out="_ci_artifacts/protocol/$(basename "$f").out.jsonl"
              echo "Running scenario: $f"
              # Run the scenario and capture output
              if RUST_LOG=info cargo run -p codex-cli-acp --bin codex-cli-acp < "$f" > "$out" 2>&1; then
                # Validate output is valid JSONL
                if jq -c . "$out" >/dev/null 2>&1; then
                  echo "✓ Valid JSONL output"
                else
                  echo "⚠ Warning: Output is not valid JSONL"
                fi
              else
                echo "⚠ Warning: Scenario execution failed"
              fi
            done
          else
            echo "No protocol scenarios found, skipping."
          fi

      - name: Upload protocol artifacts
        if: ${{ hashFiles('dev-docs/review/_artifacts/tests/*.jsonl') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: protocol-outputs
          path: _ci_artifacts/protocol

  # Typos checking for documentation and code
  typos-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install typos
        uses: taiki-e/install-action@v2
        with:
          tool: typos-cli

      - name: Run typos check
        run: |
          echo "Checking for typos..."
          typos || {
            echo "::warning::Typos found. Please review and fix."
            # Don't fail the job for typos
            exit 0
          }
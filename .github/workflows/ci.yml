name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches:
      - feature/**
      - fix/**
      - perf/**
      - chore/**
      - docs/**

# Required for security-events write permission
permissions:
  contents: read
  pull-requests: read
  security-events: write

jobs:
  # Cross-platform build and test matrix
  build-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy (deny warnings)
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Tests
        run: cargo test --workspace --all-features --locked

  # SDD validation checks
  sdd-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: SDD structure lint
        run: bash scripts/ci/run-sdd-structure-lint.sh

      - name: Language policy check (normative artifacts)
        run: bash scripts/ci/check-language-policy.sh

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Protocol scenarios (JSONL replay)
        id: scenarios
        shell: bash
        run: |
          set -euo pipefail
          if compgen -G "dev-docs/review/_artifacts/tests/*.jsonl" > /dev/null; then
            mkdir -p _ci_artifacts/protocol
            for f in dev-docs/review/_artifacts/tests/*.jsonl; do
              out="_ci_artifacts/protocol/$(basename "$f").out.jsonl"
              echo "Running scenario: $f"
              RUST_LOG=info cargo run -p codex-cli-acp --bin codex-cli-acp < "$f" | tee "$out" | jq -c . >/dev/null
            done
          else
            echo "No protocol scenarios found, skipping."
          fi

      - name: Upload protocol artifacts
        if: ${{ hashFiles('dev-docs/review/_artifacts/tests/*.jsonl') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: protocol-outputs
          path: _ci_artifacts/protocol

  # ast-grep code scanning with SARIF upload
  # Report-only mode: continues even if violations found
  ast-grep-scan:
    runs-on: ubuntu-latest
    continue-on-error: true  # Report-only mode - won't block PR
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install ast-grep
        uses: taiki-e/install-action@v2
        with:
          tool: ast-grep

      - name: Run ast-grep scan
        id: ast-grep
        run: |
          echo "Running ast-grep scan..."
          ast-grep scan -c sgconfig.yml --json > ast-grep-results.json || true

          # Show summary in logs
          if [ -s ast-grep-results.json ]; then
            echo "Found $(jq '. | length' ast-grep-results.json) issues"
            jq -r '.[] | "\(.severity): \(.rule_id) at \(.file):\(.start_line)"' ast-grep-results.json || true
          else
            echo "No issues found"
            echo "[]" > ast-grep-results.json
          fi

      - name: Convert to SARIF format
        if: always()
        run: |
          echo "Converting ast-grep results to SARIF..."
          jq -f scripts/ci/json-to-sarif.jq ast-grep-results.json > results.sarif

          # Validate SARIF output
          if jq -e '.version == "2.1.0"' results.sarif > /dev/null 2>&1; then
            echo "✓ Valid SARIF generated"
          else
            echo "⚠ SARIF validation failed, creating minimal valid SARIF"
            cat > results.sarif <<'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [{
              "tool": {
                "driver": {
                  "name": "ast-grep",
                  "version": "0.x.x"
                }
              },
              "results": []
            }]
          }
          EOF
          fi

      - name: Upload SARIF to GitHub Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: ast-grep

      - name: Upload ast-grep artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ast-grep-results
          path: |
            ast-grep-results.json
            results.sarif

  # Typos checking for documentation and code
  typos-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install typos
        uses: taiki-e/install-action@v2
        with:
          tool: typos-cli

      - name: Run typos check
        run: |
          echo "Checking for typos..."
          typos || {
            echo "::warning::Typos found. Please review and fix."
            # Don't fail the job for typos
            exit 0
          }